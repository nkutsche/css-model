<?xml version="1.0" encoding="UTF-8"?>
<!-- This file was generated on Thu Jul 20, 2023 10:46 (UTC+02) by REx v5.56 which is Copyright (c) 1979-2023 by Gunther Rademacher <grd@gmx.net> -->
<!-- REx command line: css3.ebnf -xslt -ll 3 -tree -main -name css3 -backtrack -->

<!--
    This file was generated based on ../ebnf/css3.ebnf 
    which has the following copyright:
    
Copyright (c) 2015, transpect.io
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, this
  list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 

-->

<xsl:stylesheet version="2.0"
                xmlns:xs="http://www.w3.org/2001/XMLSchema"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:p="http://www.nkutsche.com/css-parser">
  <!--~
   ! The index of the lexer state for accessing the combined
   ! (i.e. level > 1) lookahead code.
  -->
  <xsl:variable name="p:lk" as="xs:integer" select="1"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the token that has been consumed.
  -->
  <xsl:variable name="p:b0" as="xs:integer" select="2"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the token that has been consumed.
  -->
  <xsl:variable name="p:e0" as="xs:integer" select="3"/>

  <!--~
   ! The index of the lexer state for accessing the code of the
   ! level-1-lookahead token.
  -->
  <xsl:variable name="p:l1" as="xs:integer" select="4"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the level-1-lookahead token.
  -->
  <xsl:variable name="p:b1" as="xs:integer" select="5"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the level-1-lookahead token.
  -->
  <xsl:variable name="p:e1" as="xs:integer" select="6"/>

  <!--~
   ! The index of the lexer state for accessing the code of the
   ! level-2-lookahead token.
  -->
  <xsl:variable name="p:l2" as="xs:integer" select="7"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the level-2-lookahead token.
  -->
  <xsl:variable name="p:b2" as="xs:integer" select="8"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the level-2-lookahead token.
  -->
  <xsl:variable name="p:e2" as="xs:integer" select="9"/>

  <!--~
   ! The index of the lexer state for accessing the code of the
   ! level-3-lookahead token.
  -->
  <xsl:variable name="p:l3" as="xs:integer" select="10"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the level-3-lookahead token.
  -->
  <xsl:variable name="p:b3" as="xs:integer" select="11"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the level-3-lookahead token.
  -->
  <xsl:variable name="p:e3" as="xs:integer" select="12"/>

  <!--~
   ! The index of the lexer state for accessing the token code that
   ! was expected when an error was found.
  -->
  <xsl:variable name="p:error" as="xs:integer" select="13"/>

  <!--~
   ! The index of the lexer state for accessing the memoization
   ! of backtracking results.
  -->
  <xsl:variable name="p:memo" as="xs:integer" select="14"/>

  <!--~
   ! The index of the lexer state that points to the first entry
   ! used for collecting action results.
  -->
  <xsl:variable name="p:result" as="xs:integer" select="15"/>

  <!--~
   ! The codepoint to charclass mapping for 7 bit codepoints.
  -->
  <xsl:variable name="p:MAP0" as="xs:integer+" select="
    0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 1, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
    20, 21, 21, 21, 22, 23, 24, 25, 26, 21, 27, 28, 10, 29, 30, 10, 31, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 33, 33, 33, 33, 33,
    33, 33, 33, 33, 35, 36, 37, 38, 33, 10, 39, 40, 41, 42, 43, 44, 45, 46, 47, 33, 48, 49, 50, 51, 52, 53, 33, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
    66, 10
  "/>

  <!--~
   ! The codepoint to charclass mapping for codepoints below the surrogate block.
  -->
  <xsl:variable name="p:MAP1" as="xs:integer+" select="
    54, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
    58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 90, 122, 185, 153, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
    216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 1, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 21, 21, 22, 23, 24, 25, 26, 21, 27, 28, 10, 29, 30, 10, 39, 40,
    41, 42, 43, 44, 45, 46, 47, 33, 48, 49, 50, 51, 52, 53, 33, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 10, 31, 32, 32, 32, 32, 32, 32, 33, 33, 33,
    33, 33, 33, 33, 33, 33, 33, 34, 33, 33, 33, 33, 33, 33, 33, 33, 33, 35, 36, 37, 38, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
    33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33
  "/>

  <!--~
   ! The codepoint to charclass mapping for codepoints above the surrogate block.
  -->
  <xsl:variable name="p:MAP2" as="xs:integer+" select="
    57344, 65536, 65533, 1114111, 33, 33
  "/>

  <!--~
   ! The token-set-id to DFA-initial-state mapping.
  -->
  <xsl:variable name="p:INITIAL" as="xs:integer+" select="
    2561, 3074, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
    41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 1101, 1102,
    1103
  "/>

  <!--~
   ! The DFA transition table.
  -->
  <xsl:variable name="p:TRANSITION" as="xs:integer+" select="
    5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186,
    5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186,
    5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 4446, 5186, 4352, 4364, 4366, 4374, 4356, 4381, 4415, 4423, 4439, 5186, 5186, 6896,
    4469, 4477, 4489, 5185, 5186, 7115, 7113, 5186, 4857, 6407, 5186, 5186, 5833, 7058, 6895, 5186, 5835, 6742, 5186, 5834, 7344, 5186, 5832, 5808, 5186, 6407,
    5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 4402, 5186,
    4352, 4364, 4366, 4374, 4356, 4381, 4415, 4423, 4900, 5186, 5186, 6896, 4469, 4477, 5041, 5185, 5186, 7115, 7113, 5186, 4508, 6407, 5186, 5186, 5833, 6408,
    6895, 5186, 5835, 7065, 5186, 5834, 4937, 5186, 5832, 6724, 5186, 6407, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186,
    5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 4446, 5186, 4352, 4364, 4366, 4374, 4356, 4381, 4415, 4530, 4551, 5186, 5186, 6896, 4469, 4477,
    4388, 4542, 5186, 7115, 7113, 5186, 4537, 6710, 5186, 5186, 6292, 6711, 4620, 5186, 6294, 5512, 5186, 6293, 5207, 5186, 6291, 4629, 5186, 6710, 5186, 5186,
    5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 4639, 5186, 4352, 4364,
    4366, 4374, 4356, 4381, 4415, 4423, 4660, 4672, 5186, 6896, 4469, 4477, 4489, 5185, 6725, 7115, 7113, 5186, 4508, 6407, 5186, 5186, 5833, 6408, 6895, 5186,
    5835, 7065, 5186, 5834, 4937, 5186, 4852, 6724, 5186, 6407, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186,
    5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5714, 5186, 7187, 5186, 7186, 5186, 5186, 4518, 4520, 4431, 4660, 4683, 5186, 5186, 4521, 5186, 4694, 5186,
    6725, 5186, 5186, 5186, 4899, 5186, 5186, 5186, 5671, 5186, 5186, 5186, 5673, 5186, 5186, 5672, 5186, 5186, 5670, 5186, 5186, 5186, 5186, 5186, 5186, 5186,
    5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 4728, 5186, 5186, 5972, 4754, 4772,
    4734, 5974, 4766, 4758, 4660, 4672, 5186, 5186, 5186, 5186, 6354, 5186, 6725, 5186, 5186, 5186, 4780, 5186, 5186, 5186, 5658, 5186, 5186, 5186, 5660, 5186,
    5186, 5659, 5186, 5186, 5657, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186,
    5186, 5186, 5186, 5186, 5186, 5186, 5714, 5186, 7187, 5186, 7186, 5186, 4740, 4790, 4794, 4802, 4660, 4683, 5186, 5186, 5186, 5186, 4694, 5186, 6725, 5186,
    5186, 5186, 4899, 5186, 5186, 5186, 5671, 5186, 5186, 5186, 5673, 5186, 5186, 5672, 5186, 5186, 5670, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186,
    5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5714, 5186, 7187, 5186, 7186, 5186, 6265, 5186,
    5186, 4431, 4660, 4683, 5186, 5186, 5186, 5186, 4694, 5186, 6725, 5186, 5186, 5186, 4899, 5186, 5186, 5186, 5671, 5186, 5186, 5186, 5673, 5186, 5186, 5672,
    5186, 5186, 5670, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186,
    5186, 5186, 5186, 5186, 5714, 5186, 7187, 5186, 7186, 5186, 5186, 5186, 5186, 4431, 4660, 4683, 5186, 5186, 7018, 5186, 4694, 5186, 6725, 7020, 5186, 5186,
    4899, 5186, 5186, 5186, 5671, 5186, 5186, 5186, 5673, 5186, 5186, 5672, 5186, 5186, 5670, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186,
    5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5714, 5186, 7187, 5186, 7186, 5186, 5186, 5186, 5186, 4431,
    4660, 4683, 5186, 5186, 5186, 5186, 4694, 5186, 6725, 5186, 5186, 5186, 4899, 5186, 5186, 5186, 5671, 5186, 5186, 5186, 5673, 5186, 5186, 5672, 5186, 5186,
    5670, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186,
    5186, 5186, 4809, 5186, 5186, 5124, 4829, 4821, 4841, 5126, 4815, 4833, 4660, 4672, 5186, 5186, 5186, 5186, 5079, 5186, 6725, 5186, 5186, 5186, 4430, 5186,
    5186, 5186, 4950, 5186, 5186, 5186, 4952, 5186, 5186, 4951, 5186, 5186, 4949, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186,
    5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5714, 4870, 5186, 5186, 5186, 5186, 4921, 4884, 4880, 4892, 4660, 4979,
    5186, 5186, 5096, 5186, 4694, 5923, 6725, 5186, 5096, 5186, 5919, 4911, 5186, 4909, 7472, 5186, 5927, 4920, 7474, 5186, 5186, 7473, 6334, 5186, 5670, 5925,
    5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186,
    5714, 4935, 6450, 6448, 5186, 5186, 5186, 6451, 4929, 4947, 4660, 4672, 5186, 5186, 5186, 5186, 4694, 5186, 6725, 5186, 5186, 5186, 4899, 5186, 5186, 5186,
    5671, 5186, 5186, 5186, 5673, 5186, 5186, 5672, 5186, 5186, 5670, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186,
    5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5243, 5357, 7187, 7200, 6429, 5186, 6309, 4960, 4964, 7032, 4972, 4993, 5186, 5186,
    5186, 5186, 5012, 5186, 6725, 5186, 5186, 5186, 4899, 5186, 5186, 5186, 5671, 5186, 5186, 5186, 5673, 5186, 5186, 5672, 5186, 5186, 5670, 5186, 5186, 5186,
    5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5714, 5186,
    7187, 5186, 7186, 5186, 5186, 4872, 5019, 5036, 4660, 4683, 5186, 5186, 4871, 5024, 4694, 5186, 6725, 5186, 5186, 5186, 4899, 5186, 5186, 5186, 5671, 5186,
    5186, 5186, 5673, 5186, 5186, 5672, 5186, 5186, 5670, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186,
    5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5049, 5186, 5063, 5186, 7396, 7399, 6654, 5387, 5065, 5073, 4660, 4683, 5186, 5186, 5296, 5293,
    4694, 5186, 6725, 5186, 5186, 5186, 4899, 5186, 5186, 5186, 5671, 5186, 5186, 5186, 5673, 5186, 5186, 5672, 5186, 5186, 5670, 5186, 5186, 5186, 5186, 5186,
    5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5087, 5186, 5104, 4452,
    5115, 6533, 5134, 6539, 5154, 7295, 5162, 5180, 5186, 6691, 6365, 5186, 4489, 5183, 6725, 5186, 6365, 5186, 6478, 6407, 5186, 4500, 5833, 5619, 5186, 5310,
    5835, 5186, 6434, 5834, 5186, 5195, 5832, 6724, 5186, 6407, 5186, 6247, 5186, 5205, 4621, 5186, 5215, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186,
    5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5714, 5186, 7187, 5186, 7186, 5186, 6825, 5224, 5228, 5236, 4660, 4683, 5186, 5186, 4847, 5186, 4694, 5186,
    6725, 5186, 5186, 5186, 4899, 5186, 5186, 5186, 5671, 5186, 5186, 5186, 5673, 5186, 5186, 5672, 5186, 5186, 5670, 5186, 5186, 5186, 5186, 5186, 5186, 5186,
    5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5608, 5186, 7187, 5187, 7269, 7278,
    7282, 7274, 5257, 5262, 5270, 4683, 5186, 5186, 5186, 5186, 5278, 5186, 6725, 5186, 5186, 5186, 4899, 5186, 5186, 5186, 5671, 5186, 5186, 5186, 5673, 5186,
    5186, 5672, 5186, 5186, 5670, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186,
    5186, 5186, 5186, 5186, 5186, 5186, 5714, 5186, 7187, 5186, 7186, 5186, 5186, 5881, 5000, 5004, 5286, 5305, 5186, 6691, 5322, 5186, 5350, 5369, 5380, 5401,
    6365, 5186, 5412, 6635, 6818, 5866, 6960, 7150, 6911, 5185, 4395, 7082, 5430, 6081, 6314, 5439, 5832, 5449, 5186, 6407, 5186, 5186, 5186, 5186, 5186, 5186,
    5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5714, 5186, 7187, 5186, 7186, 5186, 5186, 5881,
    5000, 5004, 5286, 5305, 5186, 6691, 5322, 5186, 5350, 5369, 5468, 5401, 6365, 5186, 5412, 6635, 6052, 5866, 6960, 4711, 6062, 5185, 4395, 5186, 5430, 6081,
    5186, 5439, 5832, 5478, 5186, 6407, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186,
    5186, 5186, 5186, 5186, 5714, 5186, 7187, 5186, 7186, 5186, 5186, 5881, 5000, 5004, 5286, 5305, 5186, 6691, 5322, 5186, 5350, 5369, 5488, 5401, 6365, 5186,
    5412, 6635, 6603, 5866, 6960, 7104, 5495, 5185, 4395, 6578, 5430, 6081, 7109, 5439, 5832, 5503, 5186, 6407, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186,
    5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5714, 5186, 7187, 5186, 7186, 5186, 5186, 5881, 5000, 5004,
    5286, 5305, 5186, 6691, 5322, 5186, 5350, 5369, 5468, 5401, 6365, 5186, 5412, 6635, 6052, 5866, 6960, 4711, 5871, 5185, 4395, 5869, 5430, 6081, 5869, 5439,
    5832, 5520, 5186, 6494, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186,
    5186, 5186, 5714, 5186, 7187, 5186, 7186, 5186, 5186, 5881, 5000, 5004, 5286, 5305, 5186, 6691, 5322, 5186, 5350, 5369, 5488, 5401, 6365, 5186, 5412, 6635,
    6603, 5866, 6960, 7104, 5495, 5185, 4395, 5493, 5430, 6081, 7109, 5439, 5832, 5503, 5186, 6407, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186,
    5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5714, 5186, 7187, 5186, 7186, 5186, 5186, 5881, 5000, 5004, 5286, 5305,
    5186, 6691, 5322, 5186, 5350, 5369, 5468, 5401, 6365, 5186, 5412, 6635, 6052, 5866, 6960, 4711, 5871, 5185, 4395, 5869, 5430, 6081, 5869, 5439, 5832, 5520,
    5186, 6494, 5186, 6504, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186,
    5714, 5186, 7187, 5186, 7186, 5186, 5186, 5881, 5000, 5004, 5286, 5305, 5186, 6691, 5322, 5186, 5350, 5369, 5468, 5401, 6365, 5186, 5412, 6635, 6052, 5866,
    6960, 4711, 6062, 5185, 4395, 5186, 5430, 6081, 5186, 5439, 5832, 5539, 5186, 6407, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186,
    5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5714, 5729, 5550, 5729, 5570, 5730, 5731, 5593, 5588, 5601, 4660, 4683, 5186, 5186,
    5186, 5186, 4694, 5186, 6725, 5186, 5186, 5186, 4899, 5186, 5186, 5186, 5671, 5186, 5186, 5186, 5673, 5186, 5186, 5672, 5186, 5186, 5670, 5186, 5186, 5186,
    5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5714, 7211,
    5627, 5186, 7186, 5297, 7308, 7213, 7215, 5630, 4660, 4683, 5186, 5186, 5186, 5186, 4694, 5186, 6725, 5186, 5186, 5186, 4899, 5186, 5186, 5186, 5671, 5186,
    5186, 5186, 5673, 5186, 5186, 5672, 5186, 5186, 5670, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186,
    5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5714, 5186, 7187, 5186, 7186, 5186, 5638, 5186, 5186, 4431, 4660, 4683, 7006, 5655, 5186, 5186,
    4694, 5186, 6725, 5186, 5186, 5186, 4899, 5186, 5186, 5186, 5671, 5186, 5186, 5186, 5673, 5186, 5186, 5672, 5186, 5186, 5670, 5186, 5186, 5186, 5186, 5186,
    5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5714, 5186, 7187, 5186,
    7186, 5186, 5186, 5186, 5991, 5668, 4660, 4683, 5186, 5186, 5186, 5169, 4694, 5186, 6725, 5186, 5186, 5186, 4899, 5186, 5186, 5186, 5671, 5186, 5186, 5186,
    5673, 5186, 5186, 5672, 5186, 5186, 5670, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186,
    5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5714, 5186, 7187, 5186, 7186, 5699, 5695, 5681, 5689, 5707, 4660, 4683, 5186, 5186, 5186, 5186, 4694, 5186,
    6725, 5186, 5186, 5186, 4899, 5186, 5186, 5186, 5671, 5186, 5186, 5186, 5673, 5186, 5186, 5672, 5186, 5186, 5670, 5186, 5186, 5186, 5186, 5186, 5186, 5186,
    5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5739, 5186, 5753, 4607, 5776, 5764,
    7240, 5770, 5790, 7382, 5819, 5843, 5186, 6691, 5862, 5186, 5350, 5369, 5468, 5879, 6365, 5186, 5412, 6635, 6052, 5866, 6960, 4711, 6062, 5185, 4395, 5186,
    5430, 6081, 5186, 5439, 5832, 5478, 5186, 6407, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186,
    5186, 5186, 5186, 5186, 5186, 5186, 5739, 5186, 5753, 4607, 5776, 5764, 7240, 5770, 5790, 6128, 6924, 5889, 5186, 6691, 4496, 5186, 4489, 5183, 6725, 5186,
    6365, 5186, 6478, 6407, 5186, 5866, 5833, 7058, 5186, 5185, 5835, 5186, 5186, 5834, 5186, 5186, 5832, 6724, 5186, 6407, 5186, 5186, 5186, 5186, 5186, 5186,
    5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5739, 5186, 5753, 4607, 5776, 5764, 7240, 5770,
    5790, 6128, 6924, 5889, 5186, 6691, 4600, 5186, 4489, 5183, 6725, 5562, 5647, 5186, 6478, 6407, 5186, 5866, 5833, 7058, 5186, 5185, 5835, 5186, 5186, 5834,
    5186, 5186, 5832, 6724, 5186, 6407, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186,
    5186, 5186, 5186, 5186, 5714, 5186, 7187, 5186, 7186, 5186, 6610, 5900, 5904, 5912, 4660, 4683, 5186, 5186, 5186, 5186, 4694, 5186, 6725, 5186, 5186, 5186,
    4899, 5186, 5186, 5186, 5671, 5186, 5186, 5186, 5673, 5186, 5186, 5672, 5186, 5186, 5670, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186,
    5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5935, 5186, 5952, 5720, 6241, 6229, 5963, 6235, 5982, 4407,
    5999, 6025, 5186, 6519, 4645, 5186, 6526, 6048, 6692, 5186, 5107, 5186, 6043, 6250, 4461, 4649, 4744, 6270, 6060, 6050, 4746, 5526, 5186, 4745, 4461, 5186,
    4743, 5989, 5186, 6250, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186,
    5186, 5186, 5714, 5186, 6070, 5186, 7186, 5186, 6076, 5186, 5186, 4431, 4660, 4683, 5186, 5186, 5186, 5186, 4694, 5186, 6725, 5186, 5186, 5186, 4899, 5186,
    5186, 5186, 5671, 5186, 5186, 5186, 5673, 5186, 5186, 5672, 5186, 5186, 5670, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186,
    5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5714, 5186, 7187, 5186, 7186, 5186, 6349, 5186, 5186, 4431, 4660, 4683,
    5186, 5186, 5186, 5186, 4694, 5186, 6725, 5186, 5186, 5186, 4899, 5186, 5186, 5186, 5671, 5186, 5186, 5186, 5673, 5186, 5186, 5672, 5186, 5186, 5670, 5186,
    5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186,
    5739, 5186, 5753, 4667, 6089, 5764, 6107, 6563, 6115, 5854, 5819, 5843, 5186, 6691, 5862, 5186, 5350, 6123, 5468, 5879, 6376, 4901, 5412, 6635, 6052, 6136,
    6147, 4711, 6062, 5185, 4395, 5186, 5430, 6155, 5186, 5439, 5832, 6163, 5186, 5422, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186,
    5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5739, 5186, 5753, 4607, 5776, 6171, 7240, 5770, 5790, 4985, 5819, 5843, 5186, 6691,
    5862, 5186, 5350, 5369, 5468, 5879, 6365, 5186, 5412, 6635, 6052, 5866, 6960, 4711, 6062, 5185, 4395, 5186, 6185, 6081, 5186, 6196, 5832, 6210, 5186, 6407,
    5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5739, 5186,
    5753, 4607, 5776, 5764, 7240, 5770, 5790, 7382, 5819, 5843, 5186, 5580, 6222, 5186, 6258, 5369, 5468, 6288, 6302, 5186, 5412, 6635, 6052, 5866, 6960, 4711,
    6062, 4675, 4395, 5186, 5430, 6081, 5186, 5439, 5832, 5478, 6322, 6407, 5186, 5955, 5186, 6332, 6873, 4522, 6948, 5186, 5186, 5186, 5186, 5186, 5186, 5186,
    5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5739, 5186, 5753, 4607, 5776, 5764, 7240, 5770, 5790, 7382, 5819, 5843, 5186, 6691, 6342, 5186,
    5350, 5369, 6362, 6373, 4481, 5186, 5412, 6635, 6052, 5866, 5745, 4711, 6062, 5185, 4395, 5186, 5430, 6081, 5186, 5439, 5832, 5478, 5941, 6407, 6613, 5186,
    5480, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5739, 5186, 5753, 4607,
    5776, 5764, 7240, 5770, 5790, 7382, 5819, 5843, 5093, 6691, 6384, 6828, 5350, 5369, 5468, 6404, 5140, 4782, 5412, 6635, 6416, 5866, 6960, 7172, 6062, 6446,
    6975, 5186, 6459, 6081, 5186, 5439, 6473, 5478, 5186, 6407, 6491, 6502, 5186, 7340, 6512, 6585, 6188, 6465, 6547, 5186, 5186, 5186, 5186, 5186, 5186, 5186,
    5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5739, 5186, 5753, 4607, 5776, 6557, 7240, 5770, 5790, 7382, 5819, 5843, 5186, 6691, 6571, 5186, 5350, 6596,
    5468, 6621, 5361, 6707, 5412, 6635, 6052, 5866, 6960, 4711, 5782, 5185, 4395, 5186, 5430, 6081, 6632, 6643, 5832, 5478, 5186, 6407, 5186, 5186, 6651, 5186,
    5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5739, 5186, 5753, 4607, 5776, 5764,
    7240, 5770, 5790, 6128, 6924, 5889, 5186, 6691, 4496, 5186, 4489, 5892, 6725, 5186, 6365, 5556, 6478, 6407, 5186, 6662, 5833, 7058, 5186, 5185, 5835, 5186,
    5186, 5834, 5186, 5186, 6674, 6724, 5186, 6407, 5186, 5186, 5969, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186,
    5186, 5186, 5186, 5186, 5186, 5186, 5739, 5186, 5753, 4607, 5776, 5764, 7240, 5770, 5790, 6128, 6924, 5889, 5186, 6691, 4496, 5186, 4489, 5183, 6725, 5561,
    7091, 6666, 6478, 6986, 5186, 6844, 5833, 7058, 5186, 5185, 5835, 5186, 5186, 5834, 5186, 5186, 5832, 6724, 5186, 6687, 5186, 5186, 5186, 7217, 5186, 5186,
    5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5739, 5186, 5753, 4607, 5776, 5764, 7240, 5770,
    5790, 6128, 6924, 5889, 6982, 4720, 4565, 4631, 6700, 5183, 6725, 5121, 7204, 5186, 6478, 6407, 4912, 7208, 5833, 7058, 5186, 5185, 6719, 5186, 5197, 5834,
    5186, 4457, 5832, 6724, 5756, 6624, 5508, 5186, 5186, 6031, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186,
    5186, 5186, 5186, 5186, 5739, 5186, 5753, 4607, 5776, 5764, 7240, 5770, 5790, 6128, 6924, 5889, 5186, 6691, 4496, 5186, 4489, 5183, 6725, 5186, 6365, 5186,
    6478, 6407, 5186, 5866, 5833, 6734, 5186, 5185, 7159, 5186, 5186, 5834, 5186, 5186, 5832, 6724, 5186, 6407, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186,
    5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5739, 5186, 5753, 4607, 5776, 6754, 7240, 5770, 5790, 5249,
    6924, 5889, 6768, 6691, 4496, 5186, 4489, 5418, 7377, 5186, 5944, 5186, 6478, 6407, 5186, 5866, 5833, 7058, 5186, 4686, 5835, 5186, 5186, 5834, 5186, 5186,
    5832, 6724, 6780, 6407, 5186, 5186, 6796, 5186, 6095, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186,
    5186, 5186, 5739, 5186, 5753, 4607, 5776, 5764, 7240, 5770, 5790, 6128, 6924, 5889, 5186, 6792, 4572, 5186, 6804, 5183, 6725, 6836, 6852, 5372, 6478, 6407,
    5186, 5866, 6280, 7058, 5186, 5185, 6861, 5186, 7323, 5834, 5186, 5542, 5832, 6724, 5186, 6407, 5186, 5186, 5186, 5216, 5186, 6869, 5186, 5186, 5186, 5186,
    5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5739, 5186, 5753, 4607, 5776, 5764, 6881, 6760, 5790, 6128, 6924, 5889,
    5186, 6889, 4496, 5186, 6904, 5183, 6738, 4912, 6365, 5186, 6478, 6811, 5186, 5866, 5833, 7058, 5186, 5185, 5835, 6932, 5186, 5834, 5186, 5470, 5832, 6724,
    5186, 6407, 6944, 5186, 6956, 5186, 6139, 5186, 6968, 5531, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186,
    5739, 5186, 5753, 4607, 5776, 5764, 6994, 7129, 5790, 6128, 6924, 5889, 5186, 7002, 4496, 6214, 4489, 5183, 7062, 5186, 6365, 5186, 6478, 6407, 7066, 5866,
    5833, 7058, 6746, 5146, 5835, 7067, 5186, 5834, 7014, 5849, 5832, 6724, 6772, 6407, 5186, 5186, 5643, 5186, 7028, 6936, 5725, 7040, 5186, 5186, 5186, 5186,
    5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5739, 5186, 5753, 4607, 5776, 5764, 7240, 5770, 5790, 6128, 6924, 5889, 5186, 6691,
    4579, 7053, 7075, 5183, 6725, 5614, 5028, 6275, 6478, 6407, 5404, 5866, 6859, 7058, 5186, 5185, 5835, 5186, 5186, 5834, 5186, 5186, 6035, 6724, 4706, 4716,
    5186, 7099, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5739, 5186,
    5753, 4607, 5776, 7123, 7240, 5770, 5790, 5055, 6924, 7137, 5186, 7255, 4586, 5186, 4489, 6483, 7356, 7088, 5314, 5186, 6679, 6407, 5186, 7145, 5833, 7058,
    5186, 4862, 5835, 6726, 5186, 7158, 5186, 5186, 5832, 6724, 7167, 6407, 5186, 6099, 5431, 5186, 5186, 4612, 6202, 7180, 7195, 5186, 5186, 5186, 5186, 5186,
    5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5739, 5186, 5753, 4607, 5776, 5764, 7225, 7233, 5790, 6128, 6924, 5889, 5186, 6691, 4496, 5186,
    4489, 5183, 6725, 5186, 6365, 5186, 6478, 5576, 5186, 5866, 5833, 7058, 5186, 5185, 5835, 5186, 4543, 5802, 5186, 5186, 5832, 6724, 5186, 6407, 5186, 5186,
    5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5739, 5186, 5753, 4607,
    5776, 5764, 7240, 5770, 5790, 5393, 6924, 7263, 5186, 6691, 4558, 5186, 4489, 7290, 7303, 5186, 7316, 7335, 6478, 7251, 5810, 5796, 5833, 7352, 5811, 4513,
    5835, 5810, 7246, 5834, 4939, 5172, 6918, 6724, 7364, 7372, 6784, 5460, 4652, 7327, 5186, 7390, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186,
    5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5739, 5186, 5753, 4701, 7407, 5764, 7240, 6177, 7415, 7045, 6924, 5889, 5186, 6691, 4496, 5186, 4489, 5183,
    6725, 5186, 6365, 5186, 6478, 6407, 5186, 5866, 5833, 7058, 5186, 5185, 5835, 5186, 5186, 5834, 5186, 5186, 5832, 6724, 5186, 6407, 5186, 5186, 5186, 5186,
    5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5739, 5186, 5753, 4607, 5776, 5764,
    7240, 5770, 5790, 6128, 6924, 5889, 5186, 6691, 4593, 5186, 4489, 5183, 6725, 5455, 6438, 5186, 6478, 6407, 5186, 5866, 5833, 7058, 5186, 5185, 5835, 5186,
    5186, 5834, 5186, 5186, 5832, 6724, 5186, 6407, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186,
    5186, 5186, 5186, 5186, 5186, 5186, 5739, 5186, 5753, 4607, 5776, 5764, 7240, 5770, 5790, 6128, 6924, 5889, 5186, 6691, 4496, 5186, 4489, 5183, 6725, 5186,
    7091, 5186, 6478, 6407, 5186, 5866, 5833, 7058, 5186, 5185, 5835, 5186, 5186, 5834, 5186, 5186, 5832, 6724, 5186, 6407, 5186, 5186, 5186, 5186, 5186, 5186,
    5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5739, 5186, 5753, 4607, 5776, 5764, 7240, 5770,
    5790, 6128, 6924, 5889, 5186, 6691, 4496, 5186, 4489, 5183, 6725, 5559, 6840, 5186, 6478, 6407, 5186, 5866, 5833, 7058, 4912, 5185, 5835, 5186, 5186, 5834,
    5186, 5186, 5832, 6724, 5186, 6407, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186,
    5186, 5186, 5186, 5186, 5739, 5186, 5753, 4607, 5776, 5764, 7240, 5770, 5790, 6128, 6924, 5889, 5186, 6691, 4496, 5186, 4489, 5183, 6725, 5186, 6365, 5186,
    6478, 6588, 5186, 5866, 5833, 7058, 5186, 5185, 5835, 5186, 5186, 5834, 5186, 5186, 5832, 6724, 5186, 6407, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186,
    5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5739, 5186, 5753, 4607, 5776, 5764, 7240, 5770, 5790, 6128,
    6924, 5889, 5186, 6691, 4496, 5186, 4489, 5183, 7423, 5186, 6365, 5186, 6478, 6407, 5186, 5866, 5833, 7058, 5186, 5185, 5835, 5186, 5186, 5834, 5186, 5186,
    5832, 6724, 5186, 6407, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186,
    5186, 5186, 5714, 6549, 7187, 7431, 7461, 7428, 5186, 5826, 6549, 5830, 4660, 4683, 5186, 5186, 5186, 5186, 4694, 5186, 6725, 5186, 5186, 5186, 4899, 5186,
    5186, 5186, 5671, 5186, 5186, 5186, 5673, 5186, 5186, 5672, 5186, 5186, 5670, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186,
    5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5714, 5440, 7187, 5441, 5335, 5186, 6391, 7439, 7443, 7447, 4660, 4683,
    5186, 5186, 5186, 5186, 4694, 5186, 6725, 5186, 5186, 5186, 4899, 5186, 5186, 5186, 5671, 5186, 5186, 5186, 5673, 5186, 5186, 5672, 5186, 5186, 5670, 5186,
    5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186,
    5714, 5186, 7455, 5342, 7186, 6006, 6017, 5340, 6012, 6396, 4660, 4683, 5186, 5186, 5186, 5186, 4694, 5186, 6725, 5186, 5186, 5186, 4899, 5186, 5186, 5186,
    5671, 5186, 5186, 5186, 5673, 5186, 5186, 5672, 5186, 5186, 5670, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186,
    5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5714, 5186, 7187, 5186, 7186, 5186, 6423, 5186, 6324, 7469, 4660, 4683, 5186, 5186,
    5186, 5329, 4694, 5186, 6725, 5186, 5186, 5186, 4899, 5186, 5186, 5186, 5671, 5186, 5186, 5186, 5673, 5186, 5186, 5672, 5186, 5186, 5670, 5186, 5186, 5186,
    5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 4639, 5186,
    4352, 4364, 4366, 4374, 4356, 4381, 4415, 4423, 4660, 4672, 5186, 6896, 4469, 4477, 4489, 5185, 6725, 7115, 7113, 5186, 4508, 6407, 5186, 5186, 5833, 6408,
    6895, 5186, 5835, 7065, 5186, 5834, 4937, 5186, 5832, 6724, 5186, 6407, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186,
    5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 5186, 0, 3587, 3587, 3604, 3587, 3587, 3587, 3587, 3587, 3604, 0, 0, 3587, 3587, 0, 0, 3587, 3587,
    3587, 3587, 3604, 3587, 0, 3587, 3587, 3604, 3587, 3587, 3604, 3587, 0, 0, 3697, 3587, 3587, 120, 0, 0, 2690, 0, 3204, 6835, 87, 0, 0, 2828, 3341, 6926,
    6927, 8464, 0, 0, 3587, 0, 5, 0, 0, 0, 92, 84, 84, 84, 2561, 0, 3697, 3706, 3587, 3587, 3587, 3707, 3708, 3707, 3707, 0, 3708, 3587, 3587, 3587, 2561, 0, 0,
    0, 0, 0, 0, 0, 2561, 3074, 0, 0, 0, 87, 87, 87, 0, 0, 3587, 0, 5, 87, 0, 0, 90, 82, 82, 0, 0, 0, 307, 0, 0, 0, 0, 228, 0, 0, 0, 3697, 0, 0, 0, 165, 0, 0,
    120, 0, 3706, 3707, 3708, 0, 0, 0, 0, 157, 6747, 6747, 0, 0, 2561, 2561, 3074, 3074, 6739, 87, 0, 0, 6747, 0, 0, 6747, 6747, 0, 0, 0, 0, 238, 2561, 3074, 0,
    6739, 0, 6747, 0, 0, 0, 260, 0, 0, 0, 112, 0, 0, 0, 0, 0, 0, 0, 372, 3707, 3707, 0, 3708, 3587, 3587, 3587, 2690, 3204, 0, 6835, 0, 6837, 0, 0, 0, 0, 0, 0,
    0, 290, 3204, 0, 0, 0, 87, 87, 87, 0, 0, 6747, 0, 0, 6822, 6747, 0, 0, 6747, 0, 160, 6747, 6747, 0, 0, 6747, 0, 161, 6747, 6747, 0, 0, 6747, 0, 162, 6747,
    6747, 0, 0, 6747, 0, 163, 6747, 6823, 0, 0, 6747, 0, 164, 6747, 6747, 0, 0, 6747, 0, 12288, 6747, 6747, 0, 0, 6747, 6739, 6739, 0, 0, 0, 370, 0, 0, 28160,
    0, 251, 0, 0, 0, 0, 0, 0, 0, 368, 6837, 8412, 0, 0, 0, 0, 0, 0, 171, 0, 2561, 3074, 3587, 0, 5, 87, 0, 0, 92, 0, 0, 92, 92, 0, 0, 0, 0, 0, 354, 0, 0, 3074,
    0, 0, 6739, 87, 87, 87, 0, 0, 6749, 6739, 6739, 0, 0, 0, 6747, 0, 0, 0, 0, 261, 0, 0, 1625, 0, 0, 6747, 0, 0, 0, 0, 262, 0, 0, 0, 2561, 2561, 3074, 3074, 0,
    87, 0, 0, 6750, 6739, 6739, 0, 0, 0, 32768, 0, 0, 0, 0, 8298, 8439, 0, 0, 0, 333, 0, 8298, 0, 0, 0, 0, 0, 153, 0, 3074, 0, 0, 0, 87, 13312, 0, 0, 13312, 0,
    13312, 0, 0, 106, 0, 0, 0, 0, 0, 80, 81, 84, 92, 145, 0, 0, 13312, 13312, 13312, 0, 0, 0, 13312, 0, 0, 13312, 2561, 0, 13312, 13312, 0, 0, 0, 0, 13312,
    13312, 0, 13312, 13312, 13312, 13312, 0, 3074, 0, 0, 0, 0, 0, 0, 211, 0, 106, 106, 0, 0, 106, 0, 114, 106, 106, 106, 106, 114, 106, 106, 0, 114, 106, 106,
    106, 2561, 0, 0, 0, 0, 87, 0, 13824, 13824, 0, 0, 0, 0, 13824, 13824, 0, 13824, 13824, 13824, 13824, 0, 13824, 13824, 13824, 0, 0, 0, 13824, 0, 0, 13824,
    2561, 13824, 0, 0, 13824, 0, 13824, 0, 0, 116, 0, 116, 0, 0, 0, 316, 0, 2561, 3074, 6739, 6739, 6747, 6747, 0, 0, 0, 0, 263, 264, 0, 14336, 0, 0, 0, 0, 0,
    0, 0, 9728, 0, 14336, 0, 0, 14336, 14336, 14336, 14336, 0, 14336, 14336, 0, 14336, 14336, 14336, 0, 0, 14336, 14336, 14336, 2561, 3074, 0, 0, 0, 0, 0, 0, 0,
    212, 0, 7168, 39936, 0, 0, 0, 0, 0, 0, 0, 12288, 27136, 0, 0, 0, 0, 0, 0, 0, 14336, 0, 14848, 0, 0, 0, 0, 0, 14848, 0, 0, 0, 0, 0, 0, 229, 0, 0, 304, 0,
    14848, 0, 0, 0, 0, 0, 2561, 0, 0, 0, 0, 0, 15360, 15360, 0, 0, 15360, 0, 0, 15360, 15360, 15360, 0, 0, 3074, 0, 0, 6739, 78471, 136, 78471, 0, 0, 7168,
    6747, 7168, 7168, 0, 0, 125, 6747, 6739, 6739, 6739, 2691, 1625, 0, 0, 6747, 0, 0, 18432, 0, 0, 7797, 0, 0, 0, 0, 7797, 0, 0, 0, 2691, 0, 2561, 2561, 3074,
    3074, 0, 78471, 0, 0, 9728, 0, 0, 0, 9728, 9728, 9728, 0, 0, 0, 0, 162, 6747, 6747, 0, 9728, 9728, 0, 9728, 0, 0, 0, 2561, 0, 3074, 6739, 0, 0, 2561, 3074,
    0, 0, 10752, 87, 0, 0, 127, 6747, 6739, 6739, 6739, 2561, 0, 1625, 0, 10752, 0, 0, 0, 0, 10752, 10752, 10752, 10752, 0, 10752, 0, 0, 0, 2561, 2561, 0, 0, 0,
    87, 0, 2561, 3074, 0, 82, 0, 87, 0, 0, 143, 0, 0, 0, 0, 0, 7168, 7168, 0, 0, 1625, 82, 0, 0, 0, 0, 0, 92, 92, 0, 90, 82, 1625, 82, 82, 82, 0, 0, 160, 0, 0,
    0, 0, 0, 13824, 0, 0, 13824, 0, 82, 0, 82, 82, 0, 82, 0, 0, 161, 0, 158, 6747, 6747, 0, 258, 0, 0, 0, 0, 265, 82, 82, 17011, 82, 82, 82, 0, 17011, 3074, 0,
    6739, 6739, 87, 87, 87, 0, 0, 10240, 0, 0, 0, 0, 0, 311, 0, 0, 1625, 0, 6747, 6747, 6747, 6747, 0, 0, 0, 0, 0, 0, 0, 0, 95, 0, 305, 0, 0, 0, 0, 0, 0, 289,
    0, 0, 357, 0, 0, 0, 0, 0, 0, 303, 0, 373, 0, 0, 0, 0, 0, 0, 0, 31744, 17408, 17408, 0, 0, 17408, 0, 116, 17408, 17408, 17408, 17408, 116, 17408, 17408, 0,
    116, 17408, 17408, 17408, 2561, 3074, 0, 0, 0, 85, 0, 0, 126, 6747, 6739, 6739, 6739, 2561, 95, 18015, 0, 95, 95, 95, 95, 0, 95, 95, 95, 95, 2561, 3074, 0,
    0, 6739, 0, 86, 86, 15872, 0, 2561, 2561, 3074, 3074, 0, 143872, 143872, 3205, 0, 6739, 6790, 87, 87, 87, 0, 0, 10752, 10752, 0, 0, 0, 0, 0, 0, 0, 19456,
    1625, 0, 6747, 6793, 6747, 6747, 0, 0, 259, 0, 0, 0, 0, 163, 6747, 6747, 0, 0, 8858, 7797, 7835, 7797, 6747, 6747, 0, 0, 11264, 0, 0, 0, 0, 0, 1625, 0,
    40960, 0, 0, 0, 41472, 0, 0, 0, 0, 0, 41472, 0, 2561, 2737, 3074, 3250, 6836, 87, 0, 0, 15360, 88, 0, 0, 0, 0, 159, 6747, 6747, 0, 6838, 6747, 6747, 0, 0,
    0, 0, 0, 210, 0, 0, 8382, 0, 0, 0, 0, 0, 194, 0, 0, 16384, 10752, 0, 16384, 0, 0, 128, 6747, 6739, 6739, 6739, 2561, 0, 8903, 7835, 0, 0, 0, 0, 0, 230, 0,
    0, 2773, 3286, 6739, 6871, 6747, 6872, 6747, 6747, 6840, 185, 0, 0, 0, 0, 334, 8298, 0, 0, 8985, 0, 0, 0, 0, 0, 0, 0, 37376, 8704, 0, 0, 0, 0, 0, 0, 0,
    40960, 0, 6747, 8510, 0, 0, 0, 320, 0, 0, 164, 0, 0, 0, 0, 0, 39258, 0, 0, 0, 2048, 8382, 0, 0, 0, 0, 0, 0, 0, 312, 0, 6747, 8510, 0, 0, 0, 0, 0, 0, 355, 0,
    8382, 0, 0, 0, 0, 0, 195, 0, 227, 0, 0, 0, 0, 8961, 0, 6747, 8510, 0, 0, 227, 0, 0, 0, 339, 0, 0, 0, 0, 277, 0, 0, 0, 6747, 8510, 0, 0, 0, 255, 0, 0, 196,
    0, 228, 0, 0, 0, 383, 0, 0, 0, 386, 6747, 8510, 25088, 0, 0, 0, 0, 0, 310, 0, 0, 0, 1625, 0, 0, 0, 18944, 0, 0, 207, 0, 0, 0, 0, 0, 12288, 0, 0, 0, 0, 0,
    18944, 0, 1625, 0, 0, 18944, 0, 0, 218, 0, 0, 8298, 0, 0, 0, 150, 0, 0, 19055, 18944, 0, 19055, 19055, 19055, 19055, 0, 0, 19055, 0, 0, 19055, 19055, 19055,
    0, 0, 19055, 19055, 19055, 2561, 3074, 0, 0, 0, 86, 0, 0, 162, 0, 200, 0, 0, 0, 8298, 8298, 248, 0, 0, 0, 1625, 0, 0, 0, 0, 19456, 0, 0, 0, 2561, 0, 19968,
    0, 0, 19968, 0, 0, 0, 352, 0, 0, 0, 0, 12288, 6747, 6747, 0, 4096, 0, 0, 0, 0, 0, 0, 0, 3074, 0, 0, 0, 0, 10240, 10240, 0, 0, 0, 0, 0, 2561, 3074, 0, 0, 0,
    0, 20480, 20480, 0, 20480, 20480, 0, 0, 20601, 20480, 20480, 0, 20601, 20480, 20601, 20480, 0, 0, 20480, 0, 20480, 0, 0, 0, 20480, 20480, 0, 20480, 20480,
    0, 20480, 20609, 20609, 20609, 2561, 3074, 0, 0, 0, 87, 0, 0, 92, 84, 84, 0, 0, 0, 376, 0, 0, 0, 0, 18944, 0, 0, 0, 0, 0, 2561, 3074, 0, 6739, 0, 87, 0, 0,
    241, 0, 2803, 3316, 6901, 6902, 0, 1625, 6739, 0, 0, 0, 0, 0, 328, 0, 0, 0, 6739, 6739, 0, 6739, 6739, 6739, 6739, 0, 6739, 6739, 0, 6747, 6739, 1625, 6739,
    6739, 6739, 0, 0, 253, 0, 0, 0, 8961, 0, 6739, 6739, 6747, 6739, 6739, 6739, 0, 6747, 6747, 0, 235, 236, 0, 0, 293, 2561, 3074, 6739, 6747, 8298, 0, 0, 0,
    0, 229, 0, 0, 0, 0, 3205, 6739, 6739, 6790, 87, 87, 87, 0, 0, 40448, 0, 40448, 40448, 0, 0, 0, 0, 0, 2561, 3074, 6739, 6747, 8298, 0, 1625, 6747, 6747,
    6793, 6747, 6747, 0, 0, 306, 0, 308, 0, 0, 0, 6774, 6739, 6739, 6739, 2691, 0, 8858, 6747, 0, 0, 6747, 6747, 0, 0, 0, 0, 0, 255, 0, 0, 8961, 0, 0, 8903, 0,
    0, 0, 0, 0, 0, 7797, 0, 1625, 6747, 6747, 6747, 6747, 6747, 0, 0, 0, 0, 189, 24064, 24064, 0, 0, 24064, 0, 0, 24064, 24064, 24064, 24064, 0, 24064, 24064,
    0, 0, 24064, 24064, 24064, 2561, 3074, 0, 0, 7168, 7168, 7168, 0, 0, 0, 0, 0, 11776, 0, 0, 0, 80, 81, 0, 84, 0, 87, 0, 0, 326, 0, 0, 0, 0, 0, 6747, 6859, 0,
    0, 1625, 84, 0, 0, 0, 0, 0, 348, 0, 0, 84, 0, 84, 84, 0, 84, 0, 0, 351, 0, 0, 0, 0, 0, 13312, 0, 0, 13312, 0, 84, 84, 92, 84, 84, 84, 0, 92, 145, 0, 0, 0,
    0, 0, 0, 10240, 0, 3074, 84, 84, 6739, 87, 87, 87, 0, 0, 41472, 0, 41472, 41472, 41472, 41472, 0, 0, 41472, 41472, 0, 0, 41472, 0, 41472, 0, 0, 1625, 92,
    92, 6747, 92, 92, 0, 0, 358, 0, 0, 0, 0, 0, 317, 2561, 3074, 6739, 80, 81, 84, 84, 92, 92, 92, 92, 0, 0, 0, 0, 0, 0, 0, 8935, 0, 196, 0, 0, 0, 0, 0, 0, 0,
    8961, 0, 0, 1625, 0, 0, 0, 0, 0, 24576, 0, 0, 24576, 0, 0, 0, 2854, 3367, 6952, 6953, 8490, 6749, 6739, 1625, 6739, 6739, 6739, 0, 0, 363, 0, 0, 0, 0, 0,
    347, 0, 0, 0, 6739, 0, 6739, 6739, 0, 6739, 107, 107, 6739, 6739, 6774, 6739, 6739, 6739, 0, 6774, 6838, 6747, 6747, 0, 186, 0, 0, 0, 6747, 6739, 6739,
    6739, 2561, 232, 6747, 6747, 0, 0, 0, 0, 0, 366, 0, 0, 239, 0, 0, 0, 2803, 3316, 6901, 6902, 0, 22308, 0, 2854, 3367, 6952, 6953, 8490, 6747, 8510, 0, 0, 0,
    0, 0, 321, 97, 6739, 6739, 0, 6739, 6739, 6739, 6739, 0, 6739, 6739, 0, 6775, 6739, 8985, 0, 283, 0, 0, 0, 0, 0, 378, 0, 0, 8704, 0, 0, 0, 0, 309, 0, 0,
    375, 0, 0, 0, 0, 380, 6747, 8510, 0, 319, 0, 0, 0, 0, 169, 0, 0, 172, 0, 8858, 6747, 0, 156, 6747, 6747, 0, 84, 84, 0, 84, 84, 84, 84, 0, 84, 84, 0, 92, 84,
    1625, 84, 84, 84, 0, 0, 345, 0, 0, 0, 0, 0, 145, 0, 0, 173, 2561, 2737, 3074, 3250, 6836, 87, 0, 101, 0, 0, 101, 0, 0, 0, 145, 145, 0, 0, 0, 208, 0, 0, 0,
    0, 242, 2561, 3074, 6739, 6747, 0, 8903, 156, 0, 0, 0, 0, 0, 2690, 3204, 6835, 6837, 8412, 0, 0, 12288, 0, 0, 156, 6747, 6747, 0, 102, 15360, 0, 102, 0, 0,
    0, 301, 0, 302, 0, 0, 322, 0, 0, 0, 0, 0, 0, 0, 11264, 0, 356, 0, 0, 0, 0, 0, 0, 0, 11776, 0, 0, 8858, 6747, 0, 157, 6747, 6747, 0, 103, 0, 0, 103, 0, 0, 0,
    3074, 3074, 0, 87, 0, 8382, 0, 26624, 0, 0, 0, 0, 0, 6747, 6747, 0, 0, 8903, 157, 0, 0, 0, 0, 0, 6747, 6747, 204, 0, 8858, 6747, 0, 158, 6747, 6747, 0, 104,
    40960, 0, 41064, 0, 0, 0, 41472, 0, 41472, 41472, 2561, 0, 8903, 158, 0, 0, 0, 0, 0, 8298, 0, 0, 0, 223, 0, 225, 0, 0, 0, 8935, 0, 105, 0, 0, 105, 0, 0, 0,
    1625, 0, 15360, 0, 0, 0, 286, 0, 0, 0, 0, 164, 6747, 6747, 0, 6747, 23552, 0, 0, 0, 0, 0, 0, 14848, 0, 0, 0, 0, 8985, 0, 0, 0, 287, 288, 0, 0, 382, 0, 0, 0,
    385, 0, 0, 315, 0, 0, 0, 2561, 3074, 6739, 6739, 6747, 6747, 6747, 6747, 0, 0, 187, 0, 0, 0, 337, 338, 0, 0, 0, 0, 0, 8298, 0, 255, 0, 344, 0, 0, 0, 0, 0,
    0, 26112, 0, 32256, 0, 0, 0, 0, 0, 367, 0, 145, 0, 0, 0, 0, 151, 0, 80, 80, 81, 81, 84, 87, 0, 82, 82, 0, 82, 82, 82, 82, 0, 82, 82, 0, 17011, 82, 0, 387,
    0, 0, 0, 0, 0, 0, 40448, 0, 98, 6739, 6739, 0, 6739, 6739, 6739, 6739, 107, 6739, 6739, 107, 6774, 6739, 0, 8858, 6747, 0, 159, 6747, 6747, 0, 195, 0, 227,
    0, 0, 279, 0, 0, 35840, 0, 0, 0, 0, 0, 8298, 0, 33792, 6838, 6747, 6747, 0, 0, 0, 188, 0, 195, 0, 227, 0, 0, 8935, 0, 0, 24064, 0, 0, 0, 0, 0, 341, 0, 343,
    0, 8903, 159, 0, 0, 0, 0, 0, 8298, 25935, 0, 299, 0, 0, 0, 0, 0, 0, 0, 8413, 0, 0, 8704, 0, 0, 0, 0, 0, 0, 313, 0, 350, 0, 0, 0, 0, 0, 0, 10752, 16384,
    16384, 0, 6747, 6747, 234, 0, 0, 0, 0, 209, 0, 0, 0, 314, 0, 0, 0, 0, 2561, 3074, 6739, 6739, 6747, 6747, 6840, 6747, 0, 332, 0, 0, 0, 8298, 0, 0, 0, 0, 0,
    0, 196, 174, 2561, 2561, 3074, 3074, 6739, 87, 0, 206, 0, 0, 0, 0, 0, 0, 8412, 0, 0, 0, 266, 0, 2561, 3074, 6739, 6747, 8298, 0, 0, 0, 0, 0, 0, 0, 280,
    27648, 0, 0, 8298, 8298, 0, 0, 0, 0, 0, 152, 0, 197, 0, 0, 0, 0, 256, 0, 0, 99, 6739, 6739, 0, 6739, 6739, 6739, 6739, 108, 6739, 6739, 108, 6747, 6739,
    141, 0, 0, 0, 0, 0, 0, 0, 327, 0, 329, 0, 323, 0, 0, 0, 0, 0, 0, 0, 340, 0, 342, 0, 0, 8298, 146, 0, 0, 0, 0, 0, 353, 0, 0, 0, 175, 2561, 2561, 3074, 3074,
    6739, 87, 0, 217, 0, 0, 0, 8298, 222, 0, 224, 0, 226, 0, 0, 8935, 0, 0, 17408, 0, 0, 0, 0, 0, 170, 0, 0, 198, 0, 161, 12288, 0, 12288, 0, 0, 0, 6747, 6747,
    0, 0, 0, 237, 0, 12288, 0, 0, 201, 161, 6747, 6747, 0, 240, 0, 0, 2561, 3074, 6739, 6747, 8298, 274, 0, 35328, 0, 0, 0, 0, 0, 0, 365, 0, 0, 0, 6739, 0,
    6739, 6739, 0, 6739, 108, 108, 0, 8298, 147, 0, 149, 0, 152, 0, 0, 0, 0, 0, 0, 0, 112, 176, 2561, 2561, 3074, 3074, 6739, 87, 0, 252, 0, 254, 0, 0, 8961, 0,
    0, 21504, 0, 0, 2561, 3074, 6739, 6739, 6739, 87, 87, 87, 0, 36864, 0, 0, 0, 0, 0, 0, 0, 371, 0, 0, 0, 336, 0, 0, 0, 0, 0, 0, 0, 377, 0, 0, 0, 349, 0, 0, 0,
    0, 0, 0, 0, 2803, 3316, 6901, 6902, 0, 374, 0, 0, 0, 0, 379, 0, 267, 2828, 3341, 6926, 6927, 8464, 0, 142, 0, 144, 0, 0, 0, 0, 219, 8298, 0, 0, 6739, 0,
    6739, 6739, 0, 6739, 109, 109, 0, 8298, 0, 148, 0, 0, 0, 0, 5632, 6144, 5120, 4608, 0, 300, 0, 0, 0, 0, 0, 0, 9216, 0, 0, 0, 0, 0, 0, 362, 0, 364, 0, 0, 0,
    0, 15360, 15360, 15360, 2561, 381, 0, 0, 0, 0, 0, 0, 0, 6775, 6739, 6739, 6739, 2561, 168, 0, 0, 0, 0, 0, 0, 0, 8298, 8298, 0, 0, 0, 0, 0, 0, 197, 0, 0, 0,
    0, 0, 168, 2561, 2561, 3074, 3074, 6739, 87, 0, 275, 0, 276, 0, 278, 0, 0, 163, 0, 0, 0, 12288, 0, 6747, 6747, 0, 36352, 0, 0, 0, 0, 0, 0, 0, 8298, 8439, 0,
    0, 195, 227, 0, 0, 0, 0, 165, 0, 0, 0, 0, 0, 100, 6739, 6739, 0, 6739, 6739, 6739, 6739, 109, 6739, 6739, 109, 6747, 6739, 1625, 6747, 6747, 6747, 6747,
    6795, 0, 140, 0, 6889, 6747, 0, 0, 0, 0, 0, 8298, 8439, 0, 0, 250, 291, 0, 0, 2561, 3074, 6739, 6747, 8298, 273, 324, 0, 0, 0, 0, 0, 0, 0, 8298, 8439, 0,
    249, 0, 0, 38400, 0, 0, 384, 39424, 0, 0, 1625, 0, 0, 0, 0, 0, 0, 29184, 0, 30208, 0, 0, 0, 0, 0, 15360, 0, 0, 0, 0, 160, 6747, 6747, 0, 0, 0, 0, 0, 19456,
    0, 0, 0, 0, 0, 0, 361, 0, 6739, 0, 6739, 6739, 0, 6739, 110, 110, 6739, 6739, 110, 6739, 6739, 110, 6747, 6739, 0, 6739, 6739, 0, 6739, 0, 0, 285, 0, 0, 0,
    0, 0, 31232, 0, 8298, 0, 0, 34304, 0, 0, 0, 1625, 6747, 6747, 6747, 6794, 6747, 0, 0, 1625, 0, 0, 0, 95, 0, 18015, 0, 0, 0, 95, 95, 0, 0, 95, 0, 95, 0, 0,
    6747, 6839, 6747, 0, 0, 0, 0, 0, 17011, 82, 82, 82, 2561, 8298, 0, 0, 33280, 0, 0, 0, 0, 19456, 0, 19456, 0, 0, 0, 12288, 0, 0, 0, 6858, 6747, 0, 282, 284,
    0, 0, 0, 0, 0, 359, 29032, 0, 0, 205, 0, 0, 0, 0, 0, 0, 0, 23040, 0, 0, 0, 0, 197, 0, 229, 0, 0, 30720, 34816, 8298, 8298, 0, 0, 0, 0, 193, 0, 0, 0, 325, 0,
    0, 0, 0, 0, 330, 38219, 0, 20992, 0, 0, 8298, 0, 0, 0, 192, 0, 0, 0, 6747, 6739, 6739, 6739, 2691, 30065, 0, 0, 0, 0, 22528, 0, 0, 1625, 0, 0, 0, 10752, 0,
    0, 10752, 0, 6750, 6739, 1625, 6739, 6739, 6739, 0, 96, 6739, 6739, 6775, 6739, 6739, 6739, 0, 6775, 8298, 191, 0, 0, 0, 0, 0, 0, 40448, 0, 0, 0, 0, 0, 0,
    0, 40960, 40960, 0, 0, 40960, 0, 0, 40960, 40960, 40960, 0, 0, 40960, 40960, 40960, 2561, 41472, 1625, 0, 0, 0, 0, 0, 0, 1625, 0, 0, 40448, 40448, 0, 11264,
    11264, 0, 0, 0, 0, 0, 2561, 3074, 0, 7168, 0, 0
  "/>

  <!--~
   ! The DFA-state to expected-token-set mapping.
  -->
  <xsl:variable name="p:EXPECTED" as="xs:integer+" select="
    291, 313, 323, 383, 666, 336, 338, 334, 430, 342, 346, 436, 433, 350, 360, 354, 357, 364, 368, 372, 392, 416, 379, 381, 383, 396, 475, 442, 403, 406, 410,
    383, 646, 414, 380, 383, 476, 328, 420, 423, 423, 303, 383, 383, 391, 427, 383, 440, 329, 300, 303, 383, 383, 446, 526, 441, 456, 300, 382, 383, 389, 448,
    329, 330, 604, 383, 388, 447, 328, 330, 604, 383, 383, 390, 449, 330, 383, 383, 383, 453, 387, 383, 383, 384, 383, 383, 383, 383, 383, 383, 383, 383, 383,
    383, 383, 383, 383, 383, 383, 388, 464, 383, 469, 388, 508, 383, 375, 576, 309, 482, 486, 490, 494, 500, 496, 503, 506, 383, 383, 383, 612, 616, 383, 512,
    383, 383, 522, 586, 531, 383, 383, 562, 616, 535, 383, 383, 383, 383, 544, 548, 554, 383, 383, 615, 538, 383, 383, 544, 548, 554, 562, 561, 539, 383, 540,
    546, 550, 556, 537, 383, 383, 547, 549, 555, 557, 585, 383, 566, 383, 399, 383, 571, 586, 567, 383, 580, 584, 459, 326, 465, 297, 460, 383, 590, 460, 383,
    594, 383, 598, 318, 318, 318, 319, 316, 383, 383, 383, 602, 383, 518, 383, 603, 527, 609, 626, 628, 623, 620, 632, 636, 640, 655, 659, 643, 383, 383, 383,
    524, 386, 383, 472, 383, 383, 525, 383, 663, 383, 383, 524, 386, 306, 383, 383, 383, 383, 525, 663, 383, 383, 523, 385, 574, 383, 383, 525, 663, 383, 383,
    387, 516, 383, 383, 478, 383, 383, 514, 383, 383, 670, 675, 383, 383, 383, 383, 477, 651, 383, 383, 383, 383, 389, 650, 383, 383, 383, 648, 674, 383, 388,
    679, 383, 388, 683, 388, 683, 605, 685, 685, 294, 383, 383, 16, 32, 64, 4096, 0, 0, 4096, 262144, 0, 4194304, 8, 65536, 8388608, 12288, 12288, 0, 1, 2, 128,
    128, 40, 136, 1048576, 16777216, 33554432, 67108864, 67108864, 0, 0, 16777216, 67108864, 16777216, 134217728, 268435456, 536870912, 1073741824, 0, 0, 0,
    4194304, 4194304, 4194304, 8, 4160, 100663360, 268435520, 64, 64, 64, 12288, 536875008, 536875072, 4160, 1048640, 100663360, 0, 100667456, 100667456,
    1048640, 4032, 101716032, -2147483648, -2013265920, 675319872, -2013265856, 109539328, 675319808, 370151496, 109539392, 675319872, 675319808, -2013265920,
    370151496, 675319872, 675319872, 142377024, 379023424, 142377024, 410812480, 0, 110587968, 675319872, 675319872, 775983168, 16, 8, 0, 404750336, 4, 12288,
    12288, 12288, 0, 0, 0, 0, 8, 0, 0, 0, 16, 32, 4096, 4096, 4096, 1024, 2048, 512, 256, 512, 2048, 4096, 1048648, 65536, 8548352, 8536064, 12288, 12288,
    262144, 0, 262208, 3932224, 1310784, 32, 4096, 16777216, 16777216, 16777216, 1073741824, 8, 65536, 8536064, 8388608, 8388608, 8388608, 8388608, 12288,
    12288, 12288, 12288, 100667392, 100663364, 100667456, 4032, 536907840, 100667456, 100667456, 101716032, 100667456, 0, 32768, 0, 0, 4194304, 8, 16, 32, 4096,
    12288, 32768, 0, 0, 0, 32768, 0, 4194304, 4194304, 4194304, 4194304, 25165824, 100663296, 536870912, 1073741824, 32, 0, 0, 0, 2048, 16, 32, 32768, 0, 1, 6,
    128, 32768, 0, 0, 0, 112, 7936, 32832, 16402, 168, 32832, 168, 983040, 983040, 16530, 16538, 983040, 172, 16530, 983040, 1048577, 24730, 16538, 1048577,
    16538, 188, 1048577, 24730, 16538, -406847488, 1048745, 32666, 32666, 0, 0, 8, 16, 0, 983040, 0, 0, 128, 0, 0, 0, 16384, 65536, 1048576, 0, 0, 8192, 0, 0,
    0, 32768, 16384, -536870912, 0, 0, 16128, 458752, 524288, 0, 0, 458752, 0, 0, 0, 1048576, 1048576, 0, 8192, 130023424, -536870912, 0, 0, 256, 512, 3072,
    512, 3072, 4096, 0, 0, 0, 65536, 134217728, 0, 0, 0, 2097152, 130023424, 536870912, 1073741824, -2147483648, 0, 0, 65536, 393216, 0, 2, 128, 0, 24, 8, 0,
    256, 2048, 4096, 0, 393216, 0, 0, 0, 130023424, 0, 2048, 4096, 4194304, 2048, 4194304, 16777216, 100663296, 2048, 4194304, 16777216, 67108864, 16384, 32768,
    65536, 0, 0, 0, 1024, 16384, 8192, 8, 0, 8, 0, 2097152, 134217728, 268435456, 0, 0, 135, 135, 32768, 32768, 65536, 32768, 65536, 16384, 65536, 65536, 65536,
    0, 16519, 65536, 49152, 16519, 8192, 32768, 98304, 65536, 8192, 32768, 98304, 98304, 0, 0, 0, 16, 16, 32, 64, 256, 1536, 6144, 0, 16384, 8192, 49152, 49152,
    8048, 73728, 32768, 98304, 112, 7936, 0, 0, 68, 4160, 1048640, 0, 112, 256, 1536, 1024, 6144, 0, 0, 0, 32, 256, 1024, 4096, 32, 1024, 4096, 0, 0, 1024
  "/>

  <!--~
   ! The token-string table.
  -->
  <xsl:variable name="p:TOKEN" as="xs:string+" select="
    '(0)',
    'END',
    'BARE_URL_CHARS',
    'important',
    'STRING_CONTENT1',
    'STRING_CONTENT2',
    'S',
    &quot;'~='&quot;,
    &quot;'|='&quot;,
    &quot;'^='&quot;,
    &quot;'$='&quot;,
    &quot;'*='&quot;,
    'IDENT',
    'FUNCTION',
    'NUMBER',
    'HASH',
    'HEX',
    'PERCENTAGE',
    'PLUS',
    'GREATER',
    'COMMA',
    'TILDE',
    'NOT',
    'DIMENSION',
    'CommentContents',
    &quot;'&quot;&quot;'&quot;,
    &quot;''''&quot;,
    &quot;'('&quot;,
    &quot;')'&quot;,
    &quot;'*'&quot;,
    &quot;'*/'&quot;,
    &quot;','&quot;,
    &quot;'-'&quot;,
    &quot;'.'&quot;,
    &quot;'/'&quot;,
    &quot;'/*'&quot;,
    &quot;':'&quot;,
    &quot;';'&quot;,
    &quot;'='&quot;,
    &quot;'@'&quot;,
    &quot;'@charset'&quot;,
    &quot;'@import'&quot;,
    &quot;'@media'&quot;,
    &quot;'@media print'&quot;,
    &quot;'@namespace'&quot;,
    &quot;'@page'&quot;,
    &quot;'['&quot;,
    &quot;']'&quot;,
    &quot;'amzn-kf8'&quot;,
    &quot;'amzn-mobi'&quot;,
    &quot;'amzn-mobi7'&quot;,
    &quot;'and'&quot;,
    &quot;'attr('&quot;,
    &quot;'blank'&quot;,
    &quot;'bottom-center'&quot;,
    &quot;'bottom-left'&quot;,
    &quot;'bottom-left-corner'&quot;,
    &quot;'bottom-right'&quot;,
    &quot;'bottom-right-corner'&quot;,
    &quot;'first'&quot;,
    &quot;'left'&quot;,
    &quot;'left-bottom'&quot;,
    &quot;'left-middle'&quot;,
    &quot;'left-top'&quot;,
    &quot;'not'&quot;,
    &quot;'only'&quot;,
    &quot;'or'&quot;,
    &quot;'right'&quot;,
    &quot;'right-bottom'&quot;,
    &quot;'right-middle'&quot;,
    &quot;'right-top'&quot;,
    &quot;'screen'&quot;,
    &quot;'top-center'&quot;,
    &quot;'top-left'&quot;,
    &quot;'top-left-corner'&quot;,
    &quot;'top-right'&quot;,
    &quot;'top-right-corner'&quot;,
    &quot;'url('&quot;,
    &quot;'{'&quot;,
    &quot;'|'&quot;,
    &quot;'}'&quot;
  "/>

  <!--~
   ! Match next token in input string, starting at given index, using
   ! the DFA entry state for the set of tokens that are expected in
   ! the current context.
   !
   ! @param $input the input string.
   ! @param $begin the index where to start in input string.
   ! @param $token-set the expected token set id.
   ! @return a sequence of three: the token code of the result token,
   ! with input string begin and end positions. If there is no valid
   ! token, return the negative id of the DFA state that failed, along
   ! with begin and end positions of the longest viable prefix.
  -->
  <xsl:function name="p:match" as="xs:integer+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="begin" as="xs:integer"/>
    <xsl:param name="token-set" as="xs:integer"/>

    <xsl:variable name="result" select="$p:INITIAL[1 + $token-set]"/>
    <xsl:sequence select="p:transition($input, $begin, $begin, $begin, $result, $result mod 512, 0)"/>
  </xsl:function>

  <!--~
   ! The DFA state transition function. If we are in a valid DFA state, save
   ! it's result annotation, consume one input codepoint, calculate the next
   ! state, and use tail recursion to do the same again. Otherwise, return
   ! any valid result or a negative DFA state id in case of an error.
   !
   ! @param $input the input string.
   ! @param $begin the begin index of the current token in the input string.
   ! @param $current the index of the current position in the input string.
   ! @param $end the end index of the result in the input string.
   ! @param $result the result code.
   ! @param $current-state the current DFA state.
   ! @param $previous-state the  previous DFA state.
   ! @return a sequence of three: the token code of the result token,
   ! with input string begin and end positions. If there is no valid
   ! token, return the negative id of the DFA state that failed, along
   ! with begin and end positions of the longest viable prefix.
  -->
  <xsl:function name="p:transition">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="begin" as="xs:integer"/>
    <xsl:param name="current" as="xs:integer"/>
    <xsl:param name="end" as="xs:integer"/>
    <xsl:param name="result" as="xs:integer"/>
    <xsl:param name="current-state" as="xs:integer"/>
    <xsl:param name="previous-state" as="xs:integer"/>

    <xsl:choose>
      <xsl:when test="$current-state eq 0">
        <xsl:variable name="result" select="$result idiv 512"/>
        <xsl:variable name="end" select="$end - $result idiv 128"/>
        <xsl:variable name="end" select="if ($end gt string-length($input)) then string-length($input) + 1 else $end"/>
        <xsl:sequence select="
          if ($result ne 0) then
          (
            $result mod 128 - 1,
            $begin,
            $end
          )
          else
          (
            - $previous-state,
            $begin,
            $current - 1
          )
        "/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="c0" select="(string-to-codepoints(substring($input, $current, 1)), 0)[1]"/>
        <xsl:variable name="c1" as="xs:integer">
          <xsl:choose>
            <xsl:when test="$c0 &lt; 128">
              <xsl:sequence select="$p:MAP0[1 + $c0]"/>
            </xsl:when>
            <xsl:when test="$c0 &lt; 55296">
              <xsl:variable name="c1" select="$c0 idiv 32"/>
              <xsl:variable name="c2" select="$c1 idiv 32"/>
              <xsl:sequence select="$p:MAP1[1 + $c0 mod 32 + $p:MAP1[1 + $c1 mod 32 + $p:MAP1[1 + $c2]]]"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="p:map2($c0, 1, 2)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="current" select="$current + 1"/>
        <xsl:variable name="i0" select="512 * $c1 + $current-state - 1"/>
        <xsl:variable name="i1" select="$i0 idiv 8"/>
        <xsl:variable name="next-state" select="$p:TRANSITION[$i0 mod 8 + $p:TRANSITION[$i1 + 1] + 1]"/>
        <xsl:sequence select="
          if ($next-state &gt; 511) then
            p:transition($input, $begin, $current, $current, $next-state, $next-state mod 512, $current-state)
          else
            p:transition($input, $begin, $current, $end, $result, $next-state, $current-state)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Recursively translate one 32-bit chunk of an expected token bitset
   ! to the corresponding sequence of token strings.
   !
   ! @param $result the result of previous recursion levels.
   ! @param $chunk the 32-bit chunk of the expected token bitset.
   ! @param $base-token-code the token code of bit 0 in the current chunk.
   ! @return the set of token strings.
  -->
  <xsl:function name="p:token">
    <xsl:param name="result" as="xs:string*"/>
    <xsl:param name="chunk" as="xs:integer"/>
    <xsl:param name="base-token-code" as="xs:integer"/>

    <xsl:sequence select="
      if ($chunk = 0) then
        $result
      else
        p:token
        (
          ($result, if ($chunk mod 2 != 0) then $p:TOKEN[$base-token-code] else ()),
          if ($chunk &lt; 0) then $chunk idiv 2 + 2147483648 else $chunk idiv 2,
          $base-token-code + 1
        )
    "/>
  </xsl:function>

  <!--~
   ! Calculate expected token set for a given DFA state as a sequence
   ! of strings.
   !
   ! @param $state the DFA state.
   ! @return the set of token strings
  -->
  <xsl:function name="p:expected-token-set" as="xs:string*">
    <xsl:param name="state" as="xs:integer"/>

    <xsl:if test="$state > 0">
      <xsl:for-each select="0 to 2">
        <xsl:variable name="i0" select=". * 387 + $state - 1"/>
        <xsl:variable name="i1" select="$i0 idiv 4"/>
        <xsl:sequence select="p:token((), $p:EXPECTED[$i0 mod 4 + $p:EXPECTED[$i1 + 1] + 1], . * 32 + 1)"/>
      </xsl:for-each>
    </xsl:if>
  </xsl:function>

  <!--~
   ! Classify codepoint by doing a tail recursive binary search for a
   ! matching codepoint range entry in MAP2, the codepoint to charclass
   ! map for codepoints above the surrogate block.
   !
   ! @param $c the codepoint.
   ! @param $lo the binary search lower bound map index.
   ! @param $hi the binary search upper bound map index.
   ! @return the character class.
  -->
  <xsl:function name="p:map2" as="xs:integer">
    <xsl:param name="c" as="xs:integer"/>
    <xsl:param name="lo" as="xs:integer"/>
    <xsl:param name="hi" as="xs:integer"/>

    <xsl:variable name="m" select="($hi + $lo) idiv 2"/>
    <xsl:choose>
      <xsl:when test="$lo &gt; $hi">
        <xsl:sequence select="0"/>
      </xsl:when>
      <xsl:when test="$p:MAP2[$m] &gt; $c">
        <xsl:sequence select="p:map2($c, $lo, $m - 1)"/>
      </xsl:when>
      <xsl:when test="$p:MAP2[2 + $m] &lt; $c">
        <xsl:sequence select="p:map2($c, $m + 1, $hi)"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:sequence select="$p:MAP2[4 + $m]"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse arearule.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-arearule" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(39, $input, $state)"/>             <!-- '@' -->
    <xsl:variable name="state" select="p:lookahead1(74, $input, $state)"/>          <!-- 'bottom-center' | 'bottom-left' | 'bottom-left-corner' |
                                                                                         'bottom-right' | 'bottom-right-corner' | 'left-bottom' |
                                                                                         'left-middle' | 'left-top' | 'right-bottom' | 'right-middle' |
                                                                                         'right-top' | 'top-center' | 'top-left' | 'top-left-corner' |
                                                                                         'top-right' | 'top-right-corner' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 55">                                        <!-- 'bottom-left' -->
          <xsl:variable name="state" select="p:consume(55, $input, $state)"/>       <!-- 'bottom-left' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 54">                                        <!-- 'bottom-center' -->
          <xsl:variable name="state" select="p:consume(54, $input, $state)"/>       <!-- 'bottom-center' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 57">                                        <!-- 'bottom-right' -->
          <xsl:variable name="state" select="p:consume(57, $input, $state)"/>       <!-- 'bottom-right' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 73">                                        <!-- 'top-left' -->
          <xsl:variable name="state" select="p:consume(73, $input, $state)"/>       <!-- 'top-left' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 72">                                        <!-- 'top-center' -->
          <xsl:variable name="state" select="p:consume(72, $input, $state)"/>       <!-- 'top-center' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 75">                                        <!-- 'top-right' -->
          <xsl:variable name="state" select="p:consume(75, $input, $state)"/>       <!-- 'top-right' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 63">                                        <!-- 'left-top' -->
          <xsl:variable name="state" select="p:consume(63, $input, $state)"/>       <!-- 'left-top' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 62">                                        <!-- 'left-middle' -->
          <xsl:variable name="state" select="p:consume(62, $input, $state)"/>       <!-- 'left-middle' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 61">                                        <!-- 'left-bottom' -->
          <xsl:variable name="state" select="p:consume(61, $input, $state)"/>       <!-- 'left-bottom' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 70">                                        <!-- 'right-top' -->
          <xsl:variable name="state" select="p:consume(70, $input, $state)"/>       <!-- 'right-top' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 69">                                        <!-- 'right-middle' -->
          <xsl:variable name="state" select="p:consume(69, $input, $state)"/>       <!-- 'right-middle' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 68">                                        <!-- 'right-bottom' -->
          <xsl:variable name="state" select="p:consume(68, $input, $state)"/>       <!-- 'right-bottom' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 56">                                        <!-- 'bottom-left-corner' -->
          <xsl:variable name="state" select="p:consume(56, $input, $state)"/>       <!-- 'bottom-left-corner' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 58">                                        <!-- 'bottom-right-corner' -->
          <xsl:variable name="state" select="p:consume(58, $input, $state)"/>       <!-- 'bottom-right-corner' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 74">                                        <!-- 'top-left-corner' -->
          <xsl:variable name="state" select="p:consume(74, $input, $state)"/>       <!-- 'top-left-corner' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(76, $input, $state)"/>       <!-- 'top-right-corner' -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'arearule', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing arearule.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-arearule" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="p:consumeT(39, $input, $state)"/>            <!-- '@' -->
    <xsl:variable name="state" select="p:lookahead1(74, $input, $state)"/>          <!-- 'bottom-center' | 'bottom-left' | 'bottom-left-corner' |
                                                                                         'bottom-right' | 'bottom-right-corner' | 'left-bottom' |
                                                                                         'left-middle' | 'left-top' | 'right-bottom' | 'right-middle' |
                                                                                         'right-top' | 'top-center' | 'top-left' | 'top-left-corner' |
                                                                                         'top-right' | 'top-right-corner' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 55">                                        <!-- 'bottom-left' -->
          <xsl:variable name="state" select="p:consumeT(55, $input, $state)"/>      <!-- 'bottom-left' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 54">                                        <!-- 'bottom-center' -->
          <xsl:variable name="state" select="p:consumeT(54, $input, $state)"/>      <!-- 'bottom-center' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 57">                                        <!-- 'bottom-right' -->
          <xsl:variable name="state" select="p:consumeT(57, $input, $state)"/>      <!-- 'bottom-right' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 73">                                        <!-- 'top-left' -->
          <xsl:variable name="state" select="p:consumeT(73, $input, $state)"/>      <!-- 'top-left' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 72">                                        <!-- 'top-center' -->
          <xsl:variable name="state" select="p:consumeT(72, $input, $state)"/>      <!-- 'top-center' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 75">                                        <!-- 'top-right' -->
          <xsl:variable name="state" select="p:consumeT(75, $input, $state)"/>      <!-- 'top-right' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 63">                                        <!-- 'left-top' -->
          <xsl:variable name="state" select="p:consumeT(63, $input, $state)"/>      <!-- 'left-top' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 62">                                        <!-- 'left-middle' -->
          <xsl:variable name="state" select="p:consumeT(62, $input, $state)"/>      <!-- 'left-middle' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 61">                                        <!-- 'left-bottom' -->
          <xsl:variable name="state" select="p:consumeT(61, $input, $state)"/>      <!-- 'left-bottom' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 70">                                        <!-- 'right-top' -->
          <xsl:variable name="state" select="p:consumeT(70, $input, $state)"/>      <!-- 'right-top' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 69">                                        <!-- 'right-middle' -->
          <xsl:variable name="state" select="p:consumeT(69, $input, $state)"/>      <!-- 'right-middle' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 68">                                        <!-- 'right-bottom' -->
          <xsl:variable name="state" select="p:consumeT(68, $input, $state)"/>      <!-- 'right-bottom' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 56">                                        <!-- 'bottom-left-corner' -->
          <xsl:variable name="state" select="p:consumeT(56, $input, $state)"/>      <!-- 'bottom-left-corner' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 58">                                        <!-- 'bottom-right-corner' -->
          <xsl:variable name="state" select="p:consumeT(58, $input, $state)"/>      <!-- 'bottom-right-corner' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 74">                                        <!-- 'top-left-corner' -->
          <xsl:variable name="state" select="p:consumeT(74, $input, $state)"/>      <!-- 'top-left-corner' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consumeT(76, $input, $state)"/>      <!-- 'top-right-corner' -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production areaquery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-areaquery-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(44, $input, $state)"/>      <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 774">                            <!-- S S -->
                    <xsl:variable name="state" select="p:lookahead3(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 1542">                           <!-- S IDENT -->
                    <xsl:variable name="state" select="p:lookahead3(21, $input, $state)"/> <!-- S | ':' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 3206">                           <!-- S '"' -->
                    <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 3334">                           <!-- S "'" -->
                    <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 10246">                          <!-- S '}' -->
                    <xsl:variable name="state" select="p:lookahead3(51, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '@' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] != 12                                       (: IDENT :)
                        and $state[$p:lk] != 25                                       (: '&quot;' :)
                        and $state[$p:lk] != 26                                       (: &quot;'&quot; :)
                        and $state[$p:lk] != 35                                       (: '/*' :)
                        and $state[$p:lk] != 80                                       (: '}' :)
                        and $state[$p:lk] != 4486                                     (: S '/*' :)
                        and $state[$p:lk] != 574214">                               <!-- S S '/*' -->
              <xsl:variable name="state" select="p:memoized($state, 16)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($backtrack, $state, 16, $backtrack[$p:e0], -1, -1)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 16, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] != -1
                      and $state[$p:lk] != 4486                                       (: S '/*' :)
                      and $state[$p:lk] != 574214">                                 <!-- S S '/*' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-areaquery-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 1st loop of production areaquery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-areaquery-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(44, $input, $state)"/>      <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 774">                            <!-- S S -->
                    <xsl:variable name="state" select="p:lookahead3(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 1542">                           <!-- S IDENT -->
                    <xsl:variable name="state" select="p:lookahead3(21, $input, $state)"/> <!-- S | ':' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 3206">                           <!-- S '"' -->
                    <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 3334">                           <!-- S "'" -->
                    <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 10246">                          <!-- S '}' -->
                    <xsl:variable name="state" select="p:lookahead3(51, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '@' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] != 12                                       (: IDENT :)
                        and $state[$p:lk] != 25                                       (: '&quot;' :)
                        and $state[$p:lk] != 26                                       (: &quot;'&quot; :)
                        and $state[$p:lk] != 35                                       (: '/*' :)
                        and $state[$p:lk] != 80                                       (: '}' :)
                        and $state[$p:lk] != 4486                                     (: S '/*' :)
                        and $state[$p:lk] != 574214">                               <!-- S S '/*' -->
              <xsl:variable name="state" select="p:memoized($state, 16)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($state, $state, 16, $backtrack[$p:e0], -1, -3)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 16, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = -3">
            <xsl:sequence select="p:try-areaquery-1($input, $state)"/>
          </xsl:when>
          <xsl:when test="$state[$p:lk] != -1
                      and $state[$p:lk] != 4486                                       (: S '/*' :)
                      and $state[$p:lk] != 574214">                                 <!-- S S '/*' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/>     <!-- S -->
            <xsl:sequence select="p:try-areaquery-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 3rd loop of production areaquery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-areaquery-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(35, $input, $state)"/>      <!-- S | IDENT | '"' | "'" -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-areaquery-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 3rd loop of production areaquery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-areaquery-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(35, $input, $state)"/>      <!-- S | IDENT | '"' | "'" -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/>     <!-- S -->
            <xsl:sequence select="p:try-areaquery-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 4th loop of production areaquery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-areaquery-4">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(47, $input, $state)"/>      <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(47, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] eq 37">                                   <!-- ';' -->
              <xsl:variable name="state" select="p:lookahead2(47, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 805">                            <!-- ';' S -->
                    <xsl:variable name="state" select="p:lookahead3(47, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 4517">                           <!-- ';' '/*' -->
                    <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 10277">                          <!-- ';' '}' -->
                    <xsl:variable name="state" select="p:lookahead3(51, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '@' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] = 99109                                     (: ';' S S :)
                         or $state[$p:lk] = 108581                                    (: ';' '}' S :)
                         or $state[$p:lk] = 206885                                    (: ';' '}' IDENT :)
                         or $state[$p:lk] = 397733                                    (: ';' '/*' CommentContents :)
                         or $state[$p:lk] = 419877                                    (: ';' '}' '&quot;' :)
                         or $state[$p:lk] = 436261                                    (: ';' '}' &quot;'&quot; :)
                         or $state[$p:lk] = 574245                                    (: ';' S '/*' :)
                         or $state[$p:lk] = 583717                                    (: ';' '}' '/*' :)
                         or $state[$p:lk] = 616485                                    (: ';' '}' ';' :)
                         or $state[$p:lk] = 649253                                    (: ';' '}' '@' :)
                         or $state[$p:lk] = 1311525                                   (: ';' S '}' :)
                         or $state[$p:lk] = 1320997">                               <!-- ';' '}' '}' -->
              <xsl:variable name="state" select="p:memoized($state, 18)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 6">                           <!-- S -->
                        <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" select="p:lookahead1(13, $input, $state)"/> <!-- ';' -->
                  <xsl:variable name="state" select="p:consumeT(37, $input, $state)"/> <!-- ';' -->
                  <xsl:variable name="state" select="p:lookahead1(47, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:l1] eq 6">                          <!-- S -->
                        <xsl:variable name="state" select="p:lookahead2(47, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 1542">                 <!-- S IDENT -->
                              <xsl:variable name="state" select="p:lookahead3(21, $input, $state)"/> <!-- S | ':' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 3206">                 <!-- S '"' -->
                              <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 3334">                 <!-- S "'" -->
                              <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 4486">                 <!-- S '/*' -->
                              <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 10246">                <!-- S '}' -->
                              <xsl:variable name="state" select="p:lookahead3(51, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '@' | '}' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] = (774,                     (: S S :)
                                                             4742)">                <!-- S ';' -->
                              <xsl:variable name="state" select="p:lookahead3(47, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] != 12                             (: IDENT :)
                                  and $state[$p:lk] != 25                             (: '&quot;' :)
                                  and $state[$p:lk] != 26                             (: &quot;'&quot; :)
                                  and $state[$p:lk] != 35                             (: '/*' :)
                                  and $state[$p:lk] != 37                             (: ';' :)
                                  and $state[$p:lk] != 80                             (: '}' :)
                                  and $state[$p:lk] != 574214                         (: S S '/*' :)
                                  and $state[$p:lk] != 606982">                     <!-- S S ';' -->
                        <xsl:variable name="state" select="p:memoized($state, 19)"/>
                        <xsl:choose>
                          <xsl:when test="$state[$p:lk] != 0">
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:variable name="backtrack" select="$state"/>
                            <xsl:variable name="state" select="p:strip-result($state)"/>
                            <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                            <xsl:choose>
                              <xsl:when test="not($state[$p:error])">
                                <xsl:sequence select="p:memoize($backtrack, $state, 19, $backtrack[$p:e0], -1, -1)"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:sequence select="p:memoize($backtrack, $state, 19, $backtrack[$p:e0], -2, -2)"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] = -1
                                   or $state[$p:lk] = 574214                          (: S S '/*' :)
                                   or $state[$p:lk] = 606982">                      <!-- S S ';' -->
                        <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" select="p:lookahead1(47, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:l1] eq 12">                         <!-- IDENT -->
                        <xsl:variable name="state" select="p:lookahead2(21, $input, $state)"/> <!-- S | ':' -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 780">                  <!-- IDENT S -->
                              <xsl:variable name="state" select="p:lookahead3(12, $input, $state)"/> <!-- ':' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 4620">                 <!-- IDENT ':' -->
                              <xsl:variable name="state" select="p:lookahead3(66, $input, $state)"/> <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE |
                                                                                                          PLUS | DIMENSION | '"' | "'" | '-' | 'attr(' |
                                                                                                          'url(' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] eq 25">                         <!-- '"' -->
                        <xsl:variable name="state" select="p:lookahead2(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 537">                  <!-- '"' STRING_CONTENT1 -->
                              <xsl:variable name="state" select="p:lookahead3(6, $input, $state)"/> <!-- '"' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] eq 26">                         <!-- "'" -->
                        <xsl:variable name="state" select="p:lookahead2(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 666">                  <!-- "'" STRING_CONTENT2 -->
                              <xsl:variable name="state" select="p:lookahead3(7, $input, $state)"/> <!-- "'" -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] != 6                              (: S :)
                                  and $state[$p:lk] != 35                             (: '/*' :)
                                  and $state[$p:lk] != 37                             (: ';' :)
                                  and $state[$p:lk] != 80">                         <!-- '}' -->
                        <xsl:variable name="state" select="p:memoized($state, 20)"/>
                        <xsl:choose>
                          <xsl:when test="$state[$p:lk] != 0">
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:variable name="backtrack" select="$state"/>
                            <xsl:variable name="state" select="p:strip-result($state)"/>
                            <xsl:variable name="state" select="
                              if ($state[$p:error]) then
                                $state
                              else
                                p:try-declaration($input, $state)
                            "/>
                            <xsl:choose>
                              <xsl:when test="not($state[$p:error])">
                                <xsl:sequence select="p:memoize($backtrack, $state, 20, $backtrack[$p:e0], -1, -1)"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:sequence select="p:memoize($backtrack, $state, 20, $backtrack[$p:e0], -2, -2)"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] = -1">
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-declaration($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($backtrack, $state, 18, $backtrack[$p:e0], -1, -1)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 18, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] != -1
                      and $state[$p:lk] != 1573                                       (: ';' IDENT :)
                      and $state[$p:lk] != 3237                                       (: ';' '&quot;' :)
                      and $state[$p:lk] != 3365                                       (: ';' &quot;'&quot; :)
                      and $state[$p:lk] != 4742                                       (: S ';' :)
                      and $state[$p:lk] != 4773                                       (: ';' ';' :)
                      and $state[$p:lk] != 197413                                     (: ';' S IDENT :)
                      and $state[$p:lk] != 410405                                     (: ';' S '&quot;' :)
                      and $state[$p:lk] != 426789                                     (: ';' S &quot;'&quot; :)
                      and $state[$p:lk] != 607013">                                 <!-- ';' S ';' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 6">                                 <!-- S -->
                  <xsl:variable name="state" select="p:consume(6, $input, $state)"/> <!-- S -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="p:lookahead1(13, $input, $state)"/>  <!-- ';' -->
            <xsl:variable name="state" select="p:consume(37, $input, $state)"/>     <!-- ';' -->
            <xsl:variable name="state" select="p:lookahead1(47, $input, $state)"/>  <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:l1] eq 6">                                <!-- S -->
                  <xsl:variable name="state" select="p:lookahead2(47, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 1542">                       <!-- S IDENT -->
                        <xsl:variable name="state" select="p:lookahead3(21, $input, $state)"/> <!-- S | ':' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 3206">                       <!-- S '"' -->
                        <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 3334">                       <!-- S "'" -->
                        <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 4486">                       <!-- S '/*' -->
                        <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 10246">                      <!-- S '}' -->
                        <xsl:variable name="state" select="p:lookahead3(51, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '@' | '}' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] = (774,                           (: S S :)
                                                       4742)">                      <!-- S ';' -->
                        <xsl:variable name="state" select="p:lookahead3(47, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] != 12                                   (: IDENT :)
                            and $state[$p:lk] != 25                                   (: '&quot;' :)
                            and $state[$p:lk] != 26                                   (: &quot;'&quot; :)
                            and $state[$p:lk] != 35                                   (: '/*' :)
                            and $state[$p:lk] != 37                                   (: ';' :)
                            and $state[$p:lk] != 80                                   (: '}' :)
                            and $state[$p:lk] != 574214                               (: S S '/*' :)
                            and $state[$p:lk] != 606982">                           <!-- S S ';' -->
                  <xsl:variable name="state" select="p:memoized($state, 19)"/>
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] != 0">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:variable name="backtrack" select="$state"/>
                      <xsl:variable name="state" select="p:strip-result($state)"/>
                      <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                      <xsl:choose>
                        <xsl:when test="not($state[$p:error])">
                          <xsl:sequence select="p:memoize($backtrack, $state, 19, $backtrack[$p:e0], -1, -1)"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:sequence select="p:memoize($backtrack, $state, 19, $backtrack[$p:e0], -2, -2)"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] = -1
                             or $state[$p:lk] = 574214                                (: S S '/*' :)
                             or $state[$p:lk] = 606982">                            <!-- S S ';' -->
                  <xsl:variable name="state" select="p:consume(6, $input, $state)"/> <!-- S -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="p:lookahead1(47, $input, $state)"/>  <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:l1] eq 12">                               <!-- IDENT -->
                  <xsl:variable name="state" select="p:lookahead2(21, $input, $state)"/> <!-- S | ':' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 780">                        <!-- IDENT S -->
                        <xsl:variable name="state" select="p:lookahead3(12, $input, $state)"/> <!-- ':' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 4620">                       <!-- IDENT ':' -->
                        <xsl:variable name="state" select="p:lookahead3(66, $input, $state)"/> <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS |
                                                                                                    DIMENSION | '"' | "'" | '-' | 'attr(' | 'url(' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] eq 25">                               <!-- '"' -->
                  <xsl:variable name="state" select="p:lookahead2(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 537">                        <!-- '"' STRING_CONTENT1 -->
                        <xsl:variable name="state" select="p:lookahead3(6, $input, $state)"/> <!-- '"' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] eq 26">                               <!-- "'" -->
                  <xsl:variable name="state" select="p:lookahead2(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 666">                        <!-- "'" STRING_CONTENT2 -->
                        <xsl:variable name="state" select="p:lookahead3(7, $input, $state)"/> <!-- "'" -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] != 6                                    (: S :)
                            and $state[$p:lk] != 35                                   (: '/*' :)
                            and $state[$p:lk] != 37                                   (: ';' :)
                            and $state[$p:lk] != 80">                               <!-- '}' -->
                  <xsl:variable name="state" select="p:memoized($state, 20)"/>
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] != 0">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:variable name="backtrack" select="$state"/>
                      <xsl:variable name="state" select="p:strip-result($state)"/>
                      <xsl:variable name="state" select="
                        if ($state[$p:error]) then
                          $state
                        else
                          p:try-declaration($input, $state)
                      "/>
                      <xsl:choose>
                        <xsl:when test="not($state[$p:error])">
                          <xsl:sequence select="p:memoize($backtrack, $state, 20, $backtrack[$p:e0], -1, -1)"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:sequence select="p:memoize($backtrack, $state, 20, $backtrack[$p:e0], -2, -2)"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] = -1">
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-declaration($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:parse-areaquery-4($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 4th loop of production areaquery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-areaquery-4">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(47, $input, $state)"/>      <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(47, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] eq 37">                                   <!-- ';' -->
              <xsl:variable name="state" select="p:lookahead2(47, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 805">                            <!-- ';' S -->
                    <xsl:variable name="state" select="p:lookahead3(47, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 4517">                           <!-- ';' '/*' -->
                    <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 10277">                          <!-- ';' '}' -->
                    <xsl:variable name="state" select="p:lookahead3(51, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '@' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] = 99109                                     (: ';' S S :)
                         or $state[$p:lk] = 108581                                    (: ';' '}' S :)
                         or $state[$p:lk] = 206885                                    (: ';' '}' IDENT :)
                         or $state[$p:lk] = 397733                                    (: ';' '/*' CommentContents :)
                         or $state[$p:lk] = 419877                                    (: ';' '}' '&quot;' :)
                         or $state[$p:lk] = 436261                                    (: ';' '}' &quot;'&quot; :)
                         or $state[$p:lk] = 574245                                    (: ';' S '/*' :)
                         or $state[$p:lk] = 583717                                    (: ';' '}' '/*' :)
                         or $state[$p:lk] = 616485                                    (: ';' '}' ';' :)
                         or $state[$p:lk] = 649253                                    (: ';' '}' '@' :)
                         or $state[$p:lk] = 1311525                                   (: ';' S '}' :)
                         or $state[$p:lk] = 1320997">                               <!-- ';' '}' '}' -->
              <xsl:variable name="state" select="p:memoized($state, 18)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 6">                           <!-- S -->
                        <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" select="p:lookahead1(13, $input, $state)"/> <!-- ';' -->
                  <xsl:variable name="state" select="p:consumeT(37, $input, $state)"/> <!-- ';' -->
                  <xsl:variable name="state" select="p:lookahead1(47, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:l1] eq 6">                          <!-- S -->
                        <xsl:variable name="state" select="p:lookahead2(47, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 1542">                 <!-- S IDENT -->
                              <xsl:variable name="state" select="p:lookahead3(21, $input, $state)"/> <!-- S | ':' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 3206">                 <!-- S '"' -->
                              <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 3334">                 <!-- S "'" -->
                              <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 4486">                 <!-- S '/*' -->
                              <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 10246">                <!-- S '}' -->
                              <xsl:variable name="state" select="p:lookahead3(51, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '@' | '}' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] = (774,                     (: S S :)
                                                             4742)">                <!-- S ';' -->
                              <xsl:variable name="state" select="p:lookahead3(47, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] != 12                             (: IDENT :)
                                  and $state[$p:lk] != 25                             (: '&quot;' :)
                                  and $state[$p:lk] != 26                             (: &quot;'&quot; :)
                                  and $state[$p:lk] != 35                             (: '/*' :)
                                  and $state[$p:lk] != 37                             (: ';' :)
                                  and $state[$p:lk] != 80                             (: '}' :)
                                  and $state[$p:lk] != 574214                         (: S S '/*' :)
                                  and $state[$p:lk] != 606982">                     <!-- S S ';' -->
                        <xsl:variable name="state" select="p:memoized($state, 19)"/>
                        <xsl:choose>
                          <xsl:when test="$state[$p:lk] != 0">
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:variable name="backtrack" select="$state"/>
                            <xsl:variable name="state" select="p:strip-result($state)"/>
                            <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                            <xsl:choose>
                              <xsl:when test="not($state[$p:error])">
                                <xsl:sequence select="p:memoize($backtrack, $state, 19, $backtrack[$p:e0], -1, -1)"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:sequence select="p:memoize($backtrack, $state, 19, $backtrack[$p:e0], -2, -2)"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] = -1
                                   or $state[$p:lk] = 574214                          (: S S '/*' :)
                                   or $state[$p:lk] = 606982">                      <!-- S S ';' -->
                        <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" select="p:lookahead1(47, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:l1] eq 12">                         <!-- IDENT -->
                        <xsl:variable name="state" select="p:lookahead2(21, $input, $state)"/> <!-- S | ':' -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 780">                  <!-- IDENT S -->
                              <xsl:variable name="state" select="p:lookahead3(12, $input, $state)"/> <!-- ':' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 4620">                 <!-- IDENT ':' -->
                              <xsl:variable name="state" select="p:lookahead3(66, $input, $state)"/> <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE |
                                                                                                          PLUS | DIMENSION | '"' | "'" | '-' | 'attr(' |
                                                                                                          'url(' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] eq 25">                         <!-- '"' -->
                        <xsl:variable name="state" select="p:lookahead2(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 537">                  <!-- '"' STRING_CONTENT1 -->
                              <xsl:variable name="state" select="p:lookahead3(6, $input, $state)"/> <!-- '"' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] eq 26">                         <!-- "'" -->
                        <xsl:variable name="state" select="p:lookahead2(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 666">                  <!-- "'" STRING_CONTENT2 -->
                              <xsl:variable name="state" select="p:lookahead3(7, $input, $state)"/> <!-- "'" -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] != 6                              (: S :)
                                  and $state[$p:lk] != 35                             (: '/*' :)
                                  and $state[$p:lk] != 37                             (: ';' :)
                                  and $state[$p:lk] != 80">                         <!-- '}' -->
                        <xsl:variable name="state" select="p:memoized($state, 20)"/>
                        <xsl:choose>
                          <xsl:when test="$state[$p:lk] != 0">
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:variable name="backtrack" select="$state"/>
                            <xsl:variable name="state" select="p:strip-result($state)"/>
                            <xsl:variable name="state" select="
                              if ($state[$p:error]) then
                                $state
                              else
                                p:try-declaration($input, $state)
                            "/>
                            <xsl:choose>
                              <xsl:when test="not($state[$p:error])">
                                <xsl:sequence select="p:memoize($backtrack, $state, 20, $backtrack[$p:e0], -1, -1)"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:sequence select="p:memoize($backtrack, $state, 20, $backtrack[$p:e0], -2, -2)"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] = -1">
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-declaration($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($state, $state, 18, $backtrack[$p:e0], -1, -3)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 18, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = -3">
            <xsl:sequence select="p:try-areaquery-4($input, $state)"/>
          </xsl:when>
          <xsl:when test="$state[$p:lk] != -1
                      and $state[$p:lk] != 1573                                       (: ';' IDENT :)
                      and $state[$p:lk] != 3237                                       (: ';' '&quot;' :)
                      and $state[$p:lk] != 3365                                       (: ';' &quot;'&quot; :)
                      and $state[$p:lk] != 4742                                       (: S ';' :)
                      and $state[$p:lk] != 4773                                       (: ';' ';' :)
                      and $state[$p:lk] != 197413                                     (: ';' S IDENT :)
                      and $state[$p:lk] != 410405                                     (: ';' S '&quot;' :)
                      and $state[$p:lk] != 426789                                     (: ';' S &quot;'&quot; :)
                      and $state[$p:lk] != 607013">                                 <!-- ';' S ';' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 6">                                 <!-- S -->
                  <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="p:lookahead1(13, $input, $state)"/>  <!-- ';' -->
            <xsl:variable name="state" select="p:consumeT(37, $input, $state)"/>    <!-- ';' -->
            <xsl:variable name="state" select="p:lookahead1(47, $input, $state)"/>  <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:l1] eq 6">                                <!-- S -->
                  <xsl:variable name="state" select="p:lookahead2(47, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 1542">                       <!-- S IDENT -->
                        <xsl:variable name="state" select="p:lookahead3(21, $input, $state)"/> <!-- S | ':' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 3206">                       <!-- S '"' -->
                        <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 3334">                       <!-- S "'" -->
                        <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 4486">                       <!-- S '/*' -->
                        <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 10246">                      <!-- S '}' -->
                        <xsl:variable name="state" select="p:lookahead3(51, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '@' | '}' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] = (774,                           (: S S :)
                                                       4742)">                      <!-- S ';' -->
                        <xsl:variable name="state" select="p:lookahead3(47, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] != 12                                   (: IDENT :)
                            and $state[$p:lk] != 25                                   (: '&quot;' :)
                            and $state[$p:lk] != 26                                   (: &quot;'&quot; :)
                            and $state[$p:lk] != 35                                   (: '/*' :)
                            and $state[$p:lk] != 37                                   (: ';' :)
                            and $state[$p:lk] != 80                                   (: '}' :)
                            and $state[$p:lk] != 574214                               (: S S '/*' :)
                            and $state[$p:lk] != 606982">                           <!-- S S ';' -->
                  <xsl:variable name="state" select="p:memoized($state, 19)"/>
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] != 0">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:variable name="backtrack" select="$state"/>
                      <xsl:variable name="state" select="p:strip-result($state)"/>
                      <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                      <xsl:choose>
                        <xsl:when test="not($state[$p:error])">
                          <xsl:sequence select="p:memoize($backtrack, $state, 19, $backtrack[$p:e0], -1, -1)"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:sequence select="p:memoize($backtrack, $state, 19, $backtrack[$p:e0], -2, -2)"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] = -1
                             or $state[$p:lk] = 574214                                (: S S '/*' :)
                             or $state[$p:lk] = 606982">                            <!-- S S ';' -->
                  <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="p:lookahead1(47, $input, $state)"/>  <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:l1] eq 12">                               <!-- IDENT -->
                  <xsl:variable name="state" select="p:lookahead2(21, $input, $state)"/> <!-- S | ':' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 780">                        <!-- IDENT S -->
                        <xsl:variable name="state" select="p:lookahead3(12, $input, $state)"/> <!-- ':' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 4620">                       <!-- IDENT ':' -->
                        <xsl:variable name="state" select="p:lookahead3(66, $input, $state)"/> <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS |
                                                                                                    DIMENSION | '"' | "'" | '-' | 'attr(' | 'url(' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] eq 25">                               <!-- '"' -->
                  <xsl:variable name="state" select="p:lookahead2(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 537">                        <!-- '"' STRING_CONTENT1 -->
                        <xsl:variable name="state" select="p:lookahead3(6, $input, $state)"/> <!-- '"' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] eq 26">                               <!-- "'" -->
                  <xsl:variable name="state" select="p:lookahead2(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 666">                        <!-- "'" STRING_CONTENT2 -->
                        <xsl:variable name="state" select="p:lookahead3(7, $input, $state)"/> <!-- "'" -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] != 6                                    (: S :)
                            and $state[$p:lk] != 35                                   (: '/*' :)
                            and $state[$p:lk] != 37                                   (: ';' :)
                            and $state[$p:lk] != 80">                               <!-- '}' -->
                  <xsl:variable name="state" select="p:memoized($state, 20)"/>
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] != 0">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:variable name="backtrack" select="$state"/>
                      <xsl:variable name="state" select="p:strip-result($state)"/>
                      <xsl:variable name="state" select="
                        if ($state[$p:error]) then
                          $state
                        else
                          p:try-declaration($input, $state)
                      "/>
                      <xsl:choose>
                        <xsl:when test="not($state[$p:error])">
                          <xsl:sequence select="p:memoize($backtrack, $state, 20, $backtrack[$p:e0], -1, -1)"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:sequence select="p:memoize($backtrack, $state, 20, $backtrack[$p:e0], -2, -2)"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] = -1">
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:try-declaration($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:try-areaquery-4($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 2nd loop of production areaquery (zero or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-areaquery-2">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:variable name="state" select="p:lookahead1(44, $input, $state)"/>        <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
      <xsl:variable name="state" as="item()+">
        <xsl:choose>
          <xsl:when test="$state[$p:l1] eq 6">                                      <!-- S -->
            <xsl:variable name="state" select="p:lookahead2(42, $input, $state)"/>  <!-- S | IDENT | '"' | "'" | '}' -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:lk] eq 774">                              <!-- S S -->
                  <xsl:variable name="state" select="p:lookahead3(42, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '}' -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] eq 35">                                     <!-- '/*' -->
            <xsl:variable name="state" select="p:lookahead2(5, $input, $state)"/>   <!-- CommentContents -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:lk] eq 3107">                             <!-- '/*' CommentContents -->
                  <xsl:variable name="state" select="p:lookahead3(11, $input, $state)"/> <!-- '*/' -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:variable name="state" as="item()+">
        <xsl:choose>
          <xsl:when test="$state[$p:error]">
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:lk] = 99078                                       (: S S S :)
                       or $state[$p:lk] = 494627">                                  <!-- '/*' CommentContents '*/' -->
            <xsl:variable name="state" select="p:memoized($state, 17)"/>
            <xsl:choose>
              <xsl:when test="$state[$p:lk] != 0">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="backtrack" select="$state"/>
                <xsl:variable name="state" select="p:strip-result($state)"/>
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:error]">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:l1] = 35">                            <!-- '/*' -->
                      <xsl:variable name="state" select="
                        if ($state[$p:error]) then
                          $state
                        else
                          p:try-COMMENT($input, $state)
                      "/>
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:variable name="state" select="p:try-areaquery-3($input, $state)"/>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:try-declaration($input, $state)
                "/>
                <xsl:variable name="state" select="p:try-areaquery-4($input, $state)"/>
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:error]">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:l1] = 37">                            <!-- ';' -->
                      <xsl:variable name="state" select="p:consumeT(37, $input, $state)"/> <!-- ';' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:variable name="state" select="p:lookahead1(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:l1] eq 6">                            <!-- S -->
                      <xsl:variable name="state" select="p:lookahead2(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
                      <xsl:variable name="state" as="item()+">
                        <xsl:choose>
                          <xsl:when test="$state[$p:lk] eq 774">                    <!-- S S -->
                            <xsl:variable name="state" select="p:lookahead3(42, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '}' -->
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:when test="$state[$p:lk] eq 1542">                   <!-- S IDENT -->
                            <xsl:variable name="state" select="p:lookahead3(21, $input, $state)"/> <!-- S | ':' -->
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:when test="$state[$p:lk] eq 3206">                   <!-- S '"' -->
                            <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:when test="$state[$p:lk] eq 3334">                   <!-- S "'" -->
                            <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:when test="$state[$p:lk] eq 10246">                  <!-- S '}' -->
                            <xsl:variable name="state" select="p:lookahead3(51, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '@' | '}' -->
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:sequence select="$state"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:variable>
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:error]">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] != 12                               (: IDENT :)
                                and $state[$p:lk] != 25                               (: '&quot;' :)
                                and $state[$p:lk] != 26                               (: &quot;'&quot; :)
                                and $state[$p:lk] != 35                               (: '/*' :)
                                and $state[$p:lk] != 80                               (: '}' :)
                                and $state[$p:lk] != 4486">                         <!-- S '/*' -->
                      <xsl:variable name="state" select="p:memoized($state, 21)"/>
                      <xsl:choose>
                        <xsl:when test="$state[$p:lk] != 0">
                          <xsl:sequence select="$state"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:variable name="backtrack" select="$state"/>
                          <xsl:variable name="state" select="p:strip-result($state)"/>
                          <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                          <xsl:choose>
                            <xsl:when test="not($state[$p:error])">
                              <xsl:sequence select="p:memoize($backtrack, $state, 21, $backtrack[$p:e0], -1, -1)"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="p:memoize($backtrack, $state, 21, $backtrack[$p:e0], -2, -2)"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:error]">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] = -1
                                 or $state[$p:lk] = 4486">                          <!-- S '/*' -->
                      <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:choose>
                  <xsl:when test="not($state[$p:error])">
                    <xsl:sequence select="p:memoize($backtrack, $state, 17, $backtrack[$p:e0], -1, -1)"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="p:memoize($backtrack, $state, 17, $backtrack[$p:e0], -2, -2)"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="$state"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:choose>
        <xsl:when test="$state[$p:lk] = -2
                     or $state[$p:lk] = 80                                            (: '}' :)
                     or $state[$p:lk] = 10246                                         (: S '}' :)
                     or $state[$p:lk] = 1311494">                                   <!-- S S '}' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 35">                                  <!-- '/*' -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-COMMENT($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-areaquery-3($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-declaration($input, $state)
          "/>
          <xsl:variable name="state" select="p:parse-areaquery-4($input, $state)"/>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 37">                                  <!-- ';' -->
                <xsl:variable name="state" select="p:consume(37, $input, $state)"/> <!-- ';' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:lookahead1(44, $input, $state)"/>    <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:l1] eq 6">                                  <!-- S -->
                <xsl:variable name="state" select="p:lookahead2(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] eq 774">                          <!-- S S -->
                      <xsl:variable name="state" select="p:lookahead3(42, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '}' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] eq 1542">                         <!-- S IDENT -->
                      <xsl:variable name="state" select="p:lookahead3(21, $input, $state)"/> <!-- S | ':' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] eq 3206">                         <!-- S '"' -->
                      <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] eq 3334">                         <!-- S "'" -->
                      <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] eq 10246">                        <!-- S '}' -->
                      <xsl:variable name="state" select="p:lookahead3(51, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '@' | '}' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] != 12                                     (: IDENT :)
                          and $state[$p:lk] != 25                                     (: '&quot;' :)
                          and $state[$p:lk] != 26                                     (: &quot;'&quot; :)
                          and $state[$p:lk] != 35                                     (: '/*' :)
                          and $state[$p:lk] != 80                                     (: '}' :)
                          and $state[$p:lk] != 4486">                               <!-- S '/*' -->
                <xsl:variable name="state" select="p:memoized($state, 21)"/>
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] != 0">
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:variable name="backtrack" select="$state"/>
                    <xsl:variable name="state" select="p:strip-result($state)"/>
                    <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                    <xsl:choose>
                      <xsl:when test="not($state[$p:error])">
                        <xsl:sequence select="p:memoize($backtrack, $state, 21, $backtrack[$p:e0], -1, -1)"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="p:memoize($backtrack, $state, 21, $backtrack[$p:e0], -2, -2)"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] = -1
                           or $state[$p:lk] = 4486">                                <!-- S '/*' -->
                <xsl:variable name="state" select="p:consume(6, $input, $state)"/>  <!-- S -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="p:parse-areaquery-2($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Try parsing the 2nd loop of production areaquery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-areaquery-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(44, $input, $state)"/>      <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(42, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '}' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 774">                            <!-- S S -->
                    <xsl:variable name="state" select="p:lookahead3(42, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] eq 35">                                   <!-- '/*' -->
              <xsl:variable name="state" select="p:lookahead2(5, $input, $state)"/> <!-- CommentContents -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 3107">                           <!-- '/*' CommentContents -->
                    <xsl:variable name="state" select="p:lookahead3(11, $input, $state)"/> <!-- '*/' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] = 99078                                     (: S S S :)
                         or $state[$p:lk] = 494627">                                <!-- '/*' CommentContents '*/' -->
              <xsl:variable name="state" select="p:memoized($state, 17)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 35">                          <!-- '/*' -->
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-COMMENT($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" select="p:try-areaquery-3($input, $state)"/>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:try-declaration($input, $state)
                  "/>
                  <xsl:variable name="state" select="p:try-areaquery-4($input, $state)"/>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 37">                          <!-- ';' -->
                        <xsl:variable name="state" select="p:consumeT(37, $input, $state)"/> <!-- ';' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" select="p:lookahead1(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:l1] eq 6">                          <!-- S -->
                        <xsl:variable name="state" select="p:lookahead2(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 774">                  <!-- S S -->
                              <xsl:variable name="state" select="p:lookahead3(42, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '}' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 1542">                 <!-- S IDENT -->
                              <xsl:variable name="state" select="p:lookahead3(21, $input, $state)"/> <!-- S | ':' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 3206">                 <!-- S '"' -->
                              <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 3334">                 <!-- S "'" -->
                              <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 10246">                <!-- S '}' -->
                              <xsl:variable name="state" select="p:lookahead3(51, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '@' | '}' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] != 12                             (: IDENT :)
                                  and $state[$p:lk] != 25                             (: '&quot;' :)
                                  and $state[$p:lk] != 26                             (: &quot;'&quot; :)
                                  and $state[$p:lk] != 35                             (: '/*' :)
                                  and $state[$p:lk] != 80                             (: '}' :)
                                  and $state[$p:lk] != 4486">                       <!-- S '/*' -->
                        <xsl:variable name="state" select="p:memoized($state, 21)"/>
                        <xsl:choose>
                          <xsl:when test="$state[$p:lk] != 0">
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:variable name="backtrack" select="$state"/>
                            <xsl:variable name="state" select="p:strip-result($state)"/>
                            <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                            <xsl:choose>
                              <xsl:when test="not($state[$p:error])">
                                <xsl:sequence select="p:memoize($backtrack, $state, 21, $backtrack[$p:e0], -1, -1)"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:sequence select="p:memoize($backtrack, $state, 21, $backtrack[$p:e0], -2, -2)"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] = -1
                                   or $state[$p:lk] = 4486">                        <!-- S '/*' -->
                        <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($state, $state, 17, $backtrack[$p:e0], -1, -3)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 17, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = -3">
            <xsl:sequence select="p:try-areaquery-2($input, $state)"/>
          </xsl:when>
          <xsl:when test="$state[$p:lk] = -2
                       or $state[$p:lk] = 80                                          (: '}' :)
                       or $state[$p:lk] = 10246                                       (: S '}' :)
                       or $state[$p:lk] = 1311494">                                 <!-- S S '}' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 35">                                <!-- '/*' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:try-COMMENT($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="p:try-areaquery-3($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:try-declaration($input, $state)
            "/>
            <xsl:variable name="state" select="p:try-areaquery-4($input, $state)"/>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 37">                                <!-- ';' -->
                  <xsl:variable name="state" select="p:consumeT(37, $input, $state)"/> <!-- ';' -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="p:lookahead1(44, $input, $state)"/>  <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:l1] eq 6">                                <!-- S -->
                  <xsl:variable name="state" select="p:lookahead2(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 774">                        <!-- S S -->
                        <xsl:variable name="state" select="p:lookahead3(42, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '}' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 1542">                       <!-- S IDENT -->
                        <xsl:variable name="state" select="p:lookahead3(21, $input, $state)"/> <!-- S | ':' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 3206">                       <!-- S '"' -->
                        <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 3334">                       <!-- S "'" -->
                        <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 10246">                      <!-- S '}' -->
                        <xsl:variable name="state" select="p:lookahead3(51, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '@' | '}' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] != 12                                   (: IDENT :)
                            and $state[$p:lk] != 25                                   (: '&quot;' :)
                            and $state[$p:lk] != 26                                   (: &quot;'&quot; :)
                            and $state[$p:lk] != 35                                   (: '/*' :)
                            and $state[$p:lk] != 80                                   (: '}' :)
                            and $state[$p:lk] != 4486">                             <!-- S '/*' -->
                  <xsl:variable name="state" select="p:memoized($state, 21)"/>
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] != 0">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:variable name="backtrack" select="$state"/>
                      <xsl:variable name="state" select="p:strip-result($state)"/>
                      <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                      <xsl:choose>
                        <xsl:when test="not($state[$p:error])">
                          <xsl:sequence select="p:memoize($backtrack, $state, 21, $backtrack[$p:e0], -1, -1)"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:sequence select="p:memoize($backtrack, $state, 21, $backtrack[$p:e0], -2, -2)"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] = -1
                             or $state[$p:lk] = 4486">                              <!-- S '/*' -->
                  <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:try-areaquery-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 5th loop of production areaquery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-areaquery-5">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(31, $input, $state)"/>      <!-- S | '/*' | '}' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 35">                                     <!-- '/*' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-COMMENT($input, $state)
            "/>
            <xsl:sequence select="p:parse-areaquery-5($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 5th loop of production areaquery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-areaquery-5">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(31, $input, $state)"/>      <!-- S | '/*' | '}' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 35">                                     <!-- '/*' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:try-COMMENT($input, $state)
            "/>
            <xsl:sequence select="p:try-areaquery-5($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 6th loop of production areaquery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-areaquery-6">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(25, $input, $state)"/>      <!-- S | '}' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-areaquery-6($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 6th loop of production areaquery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-areaquery-6">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(25, $input, $state)"/>      <!-- S | '}' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/>     <!-- S -->
            <xsl:sequence select="p:try-areaquery-6($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse areaquery.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-areaquery" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-arearule($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1(24, $input, $state)"/>          <!-- S | '{' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 6">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(6, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(14, $input, $state)"/>          <!-- '{' -->
    <xsl:variable name="state" select="p:consume(78, $input, $state)"/>             <!-- '{' -->
    <xsl:variable name="state" select="p:parse-areaquery-1($input, $state)"/>
    <xsl:variable name="state" select="p:parse-areaquery-2($input, $state)"/>
    <xsl:variable name="state" select="p:parse-areaquery-5($input, $state)"/>
    <xsl:variable name="state" select="p:parse-areaquery-6($input, $state)"/>
    <xsl:variable name="state" select="p:consume(80, $input, $state)"/>             <!-- '}' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'areaquery', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing areaquery.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-areaquery" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:try-arearule($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1(24, $input, $state)"/>          <!-- S | '{' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 6">                                         <!-- S -->
          <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/>       <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(14, $input, $state)"/>          <!-- '{' -->
    <xsl:variable name="state" select="p:consumeT(78, $input, $state)"/>            <!-- '{' -->
    <xsl:variable name="state" select="p:try-areaquery-1($input, $state)"/>
    <xsl:variable name="state" select="p:try-areaquery-2($input, $state)"/>
    <xsl:variable name="state" select="p:try-areaquery-5($input, $state)"/>
    <xsl:variable name="state" select="p:try-areaquery-6($input, $state)"/>
    <xsl:variable name="state" select="p:consumeT(80, $input, $state)"/>            <!-- '}' -->
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse page_declaration.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-page_declaration" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 39">                                        <!-- '@' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-areaquery($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-declaration($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'page_declaration', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing page_declaration.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-page_declaration" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 39">                                        <!-- '@' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-areaquery($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-declaration($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse pagearea.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-pagearea" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:lookahead1(12, $input, $state)"/>          <!-- ':' -->
    <xsl:variable name="state" select="p:consume(36, $input, $state)"/>             <!-- ':' -->
    <xsl:variable name="state" select="p:lookahead1(40, $input, $state)"/>          <!-- 'blank' | 'first' | 'left' | 'right' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 60">                                        <!-- 'left' -->
          <xsl:variable name="state" select="p:consume(60, $input, $state)"/>       <!-- 'left' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 67">                                        <!-- 'right' -->
          <xsl:variable name="state" select="p:consume(67, $input, $state)"/>       <!-- 'right' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 59">                                        <!-- 'first' -->
          <xsl:variable name="state" select="p:consume(59, $input, $state)"/>       <!-- 'first' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(53, $input, $state)"/>       <!-- 'blank' -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'pagearea', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production page_select (one or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-page_select-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="
          if ($state[$p:error]) then
            $state
          else
            p:parse-pagearea($input, $state)
        "/>
        <xsl:variable name="state" select="p:lookahead1(43, $input, $state)"/>      <!-- S | COMMA | '/*' | ':' | '{' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 36">                                     <!-- ':' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="p:parse-page_select-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse page_select.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-page_select" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] eq 12">                                       <!-- IDENT -->
          <xsl:variable name="state" select="p:lookahead2(43, $input, $state)"/>    <!-- S | COMMA | '/*' | ':' | '{' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 36                                            (: ':' :)
                     or $state[$p:lk] = 4620">                                      <!-- IDENT ':' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 12">                                  <!-- IDENT -->
                <xsl:variable name="state" select="p:consume(12, $input, $state)"/> <!-- IDENT -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-page_select-1($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(12, $input, $state)"/>       <!-- IDENT -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'page_select', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production page_select_group (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-page_select_group-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(28, $input, $state)"/>      <!-- S | IDENT | ':' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-page_select_group-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 1st loop of production page_select_group (zero or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-page_select_group-1">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:variable name="state" select="p:lookahead1(38, $input, $state)"/>        <!-- S | COMMA | '/*' | '{' -->
      <xsl:choose>
        <xsl:when test="$state[$p:l1] != 20                                           (: COMMA :)
                    and $state[$p:l1] != 35">                                       <!-- '/*' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 35">                                  <!-- '/*' -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-COMMENT($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:lookahead1(4, $input, $state)"/>     <!-- COMMA -->
          <xsl:variable name="state" select="p:consume(20, $input, $state)"/>       <!-- COMMA -->
          <xsl:variable name="state" select="p:parse-page_select_group-2($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-page_select($input, $state)
          "/>
          <xsl:sequence select="p:parse-page_select_group-1($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Parse page_select_group.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-page_select_group" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-page_select($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-page_select_group-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'page_select_group', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse pagerule.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-pagerule" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(45, $input, $state)"/>             <!-- '@page' -->
    <xsl:variable name="state" select="p:lookahead1(37, $input, $state)"/>          <!-- S | IDENT | ':' | '{' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] eq 6">                                        <!-- S -->
          <xsl:variable name="state" select="p:lookahead2(37, $input, $state)"/>    <!-- S | IDENT | ':' | '{' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:lk] eq 9990">                               <!-- S '{' -->
                <xsl:variable name="state" select="p:lookahead3(48, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | '@' | '}' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] != 12                                           (: IDENT :)
                    and $state[$p:lk] != 36                                           (: ':' :)
                    and $state[$p:lk] != 78                                           (: '{' :)
                    and $state[$p:lk] != 774                                          (: S S :)
                    and $state[$p:lk] != 1542                                         (: S IDENT :)
                    and $state[$p:lk] != 4614">                                     <!-- S ':' -->
          <xsl:variable name="state" select="p:memoized($state, 23)"/>
          <xsl:choose>
            <xsl:when test="$state[$p:lk] != 0">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:variable name="backtrack" select="$state"/>
              <xsl:variable name="state" select="p:strip-result($state)"/>
              <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/>   <!-- S -->
              <xsl:choose>
                <xsl:when test="not($state[$p:error])">
                  <xsl:sequence select="p:memoize($backtrack, $state, 23, $backtrack[$p:e0], -1, -1)"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="p:memoize($backtrack, $state, 23, $backtrack[$p:e0], -2, -2)"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = -1
                     or $state[$p:lk] = 774                                           (: S S :)
                     or $state[$p:lk] = 1542                                          (: S IDENT :)
                     or $state[$p:lk] = 4614">                                      <!-- S ':' -->
          <xsl:variable name="state" select="p:consume(6, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(37, $input, $state)"/>          <!-- S | IDENT | ':' | '{' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 12                                            (: IDENT :)
                     or $state[$p:l1] = 36">                                        <!-- ':' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-page_select_group($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'pagerule', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production pagequery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-pagequery-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(48, $input, $state)"/>      <!-- S | IDENT | '"' | "'" | '/*' | '@' | '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(48, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | '@' | '}' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 774">                            <!-- S S -->
                    <xsl:variable name="state" select="p:lookahead3(48, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | '@' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 1542">                           <!-- S IDENT -->
                    <xsl:variable name="state" select="p:lookahead3(21, $input, $state)"/> <!-- S | ':' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 3206">                           <!-- S '"' -->
                    <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 3334">                           <!-- S "'" -->
                    <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 4998">                           <!-- S '@' -->
                    <xsl:variable name="state" select="p:lookahead3(74, $input, $state)"/> <!-- 'bottom-center' | 'bottom-left' | 'bottom-left-corner' |
                                                                                                'bottom-right' | 'bottom-right-corner' | 'left-bottom' |
                                                                                                'left-middle' | 'left-top' | 'right-bottom' | 'right-middle' |
                                                                                                'right-top' | 'top-center' | 'top-left' | 'top-left-corner' |
                                                                                                'top-right' | 'top-right-corner' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 10246">                          <!-- S '}' -->
                    <xsl:variable name="state" select="p:lookahead3(78, $input, $state)"/> <!-- END | S | IDENT | HASH | NOT | '"' | "'" | '(' | '*' | '.' |
                                                                                                '/*' | ':' | '@' | '@charset' | '@import' | '@media' |
                                                                                                '@media print' | '@namespace' | '@page' | '[' | '|' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] != 12                                       (: IDENT :)
                        and $state[$p:lk] != 25                                       (: '&quot;' :)
                        and $state[$p:lk] != 26                                       (: &quot;'&quot; :)
                        and $state[$p:lk] != 35                                       (: '/*' :)
                        and $state[$p:lk] != 39                                       (: '@' :)
                        and $state[$p:lk] != 80                                       (: '}' :)
                        and $state[$p:lk] != 4486                                     (: S '/*' :)
                        and $state[$p:lk] != 419846                                   (: S '}' '&quot;' :)
                        and $state[$p:lk] != 436230                                   (: S '}' &quot;'&quot; :)
                        and $state[$p:lk] != 574214">                               <!-- S S '/*' -->
              <xsl:variable name="state" select="p:memoized($state, 10)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($backtrack, $state, 10, $backtrack[$p:e0], -1, -1)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 10, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] != -1
                      and $state[$p:lk] != 4486                                       (: S '/*' :)
                      and $state[$p:lk] != 574214">                                 <!-- S S '/*' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-pagequery-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 3rd loop of production pagequery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-pagequery-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(41, $input, $state)"/>      <!-- S | IDENT | '"' | "'" | '@' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-pagequery-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 3rd loop of production pagequery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-pagequery-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(41, $input, $state)"/>      <!-- S | IDENT | '"' | "'" | '@' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/>     <!-- S -->
            <xsl:sequence select="p:try-pagequery-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 4th loop of production pagequery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-pagequery-4">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(51, $input, $state)"/>      <!-- S | IDENT | '"' | "'" | '/*' | ';' | '@' | '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(51, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '@' | '}' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] eq 37">                                   <!-- ';' -->
              <xsl:variable name="state" select="p:lookahead2(51, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '@' | '}' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 805">                            <!-- ';' S -->
                    <xsl:variable name="state" select="p:lookahead3(51, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '@' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 4517">                           <!-- ';' '/*' -->
                    <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 10277">                          <!-- ';' '}' -->
                    <xsl:variable name="state" select="p:lookahead3(77, $input, $state)"/> <!-- END | S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' |
                                                                                                '@' | '@charset' | '@import' | '@media' | '@media print' |
                                                                                                '@namespace' | '@page' | '[' | '|' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] = 26661                                     (: ';' '}' END :)
                         or $state[$p:lk] = 99109                                     (: ';' S S :)
                         or $state[$p:lk] = 108581                                    (: ';' '}' S :)
                         or $state[$p:lk] = 206885                                    (: ';' '}' IDENT :)
                         or $state[$p:lk] = 256037                                    (: ';' '}' HASH :)
                         or $state[$p:lk] = 370725                                    (: ';' '}' NOT :)
                         or $state[$p:lk] = 397733                                    (: ';' '/*' CommentContents :)
                         or $state[$p:lk] = 452645                                    (: ';' '}' '(' :)
                         or $state[$p:lk] = 485413                                    (: ';' '}' '*' :)
                         or $state[$p:lk] = 550949                                    (: ';' '}' '.' :)
                         or $state[$p:lk] = 574245                                    (: ';' S '/*' :)
                         or $state[$p:lk] = 583717                                    (: ';' '}' '/*' :)
                         or $state[$p:lk] = 600101                                    (: ';' '}' ':' :)
                         or $state[$p:lk] = 649253                                    (: ';' '}' '@' :)
                         or $state[$p:lk] = 665637                                    (: ';' '}' '@charset' :)
                         or $state[$p:lk] = 682021                                    (: ';' '}' '@import' :)
                         or $state[$p:lk] = 698405                                    (: ';' '}' '@media' :)
                         or $state[$p:lk] = 714789                                    (: ';' '}' '@media print' :)
                         or $state[$p:lk] = 731173                                    (: ';' '}' '@namespace' :)
                         or $state[$p:lk] = 747557                                    (: ';' '}' '@page' :)
                         or $state[$p:lk] = 763941                                    (: ';' '}' '[' :)
                         or $state[$p:lk] = 1304613                                   (: ';' '}' '|' :)
                         or $state[$p:lk] = 1311525                                   (: ';' S '}' :)
                         or $state[$p:lk] = 1320997">                               <!-- ';' '}' '}' -->
              <xsl:variable name="state" select="p:memoized($state, 12)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 6">                           <!-- S -->
                        <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" select="p:lookahead1(13, $input, $state)"/> <!-- ';' -->
                  <xsl:variable name="state" select="p:consumeT(37, $input, $state)"/> <!-- ';' -->
                  <xsl:variable name="state" select="p:lookahead1(51, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '@' | '}' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:l1] eq 6">                          <!-- S -->
                        <xsl:variable name="state" select="p:lookahead2(51, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '@' | '}' -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 1542">                 <!-- S IDENT -->
                              <xsl:variable name="state" select="p:lookahead3(21, $input, $state)"/> <!-- S | ':' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 3206">                 <!-- S '"' -->
                              <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 3334">                 <!-- S "'" -->
                              <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 4486">                 <!-- S '/*' -->
                              <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 4998">                 <!-- S '@' -->
                              <xsl:variable name="state" select="p:lookahead3(74, $input, $state)"/> <!-- 'bottom-center' | 'bottom-left' |
                                                                                                          'bottom-left-corner' | 'bottom-right' |
                                                                                                          'bottom-right-corner' | 'left-bottom' |
                                                                                                          'left-middle' | 'left-top' | 'right-bottom' |
                                                                                                          'right-middle' | 'right-top' | 'top-center' |
                                                                                                          'top-left' | 'top-left-corner' | 'top-right' |
                                                                                                          'top-right-corner' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 10246">                <!-- S '}' -->
                              <xsl:variable name="state" select="p:lookahead3(77, $input, $state)"/> <!-- END | S | IDENT | HASH | NOT | '(' | '*' | '.' |
                                                                                                          '/*' | ':' | '@' | '@charset' | '@import' | '@media' |
                                                                                                          '@media print' | '@namespace' | '@page' | '[' | '|' |
                                                                                                          '}' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] = (774,                     (: S S :)
                                                             4742)">                <!-- S ';' -->
                              <xsl:variable name="state" select="p:lookahead3(51, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '@' | '}' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] != 12                             (: IDENT :)
                                  and $state[$p:lk] != 25                             (: '&quot;' :)
                                  and $state[$p:lk] != 26                             (: &quot;'&quot; :)
                                  and $state[$p:lk] != 35                             (: '/*' :)
                                  and $state[$p:lk] != 37                             (: ';' :)
                                  and $state[$p:lk] != 39                             (: '@' :)
                                  and $state[$p:lk] != 80                             (: '}' :)
                                  and $state[$p:lk] != 574214                         (: S S '/*' :)
                                  and $state[$p:lk] != 606982">                     <!-- S S ';' -->
                        <xsl:variable name="state" select="p:memoized($state, 13)"/>
                        <xsl:choose>
                          <xsl:when test="$state[$p:lk] != 0">
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:variable name="backtrack" select="$state"/>
                            <xsl:variable name="state" select="p:strip-result($state)"/>
                            <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                            <xsl:choose>
                              <xsl:when test="not($state[$p:error])">
                                <xsl:sequence select="p:memoize($backtrack, $state, 13, $backtrack[$p:e0], -1, -1)"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:sequence select="p:memoize($backtrack, $state, 13, $backtrack[$p:e0], -2, -2)"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] = -1
                                   or $state[$p:lk] = 574214                          (: S S '/*' :)
                                   or $state[$p:lk] = 606982">                      <!-- S S ';' -->
                        <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" select="p:lookahead1(51, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '@' | '}' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:l1] eq 12">                         <!-- IDENT -->
                        <xsl:variable name="state" select="p:lookahead2(21, $input, $state)"/> <!-- S | ':' -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 780">                  <!-- IDENT S -->
                              <xsl:variable name="state" select="p:lookahead3(12, $input, $state)"/> <!-- ':' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 4620">                 <!-- IDENT ':' -->
                              <xsl:variable name="state" select="p:lookahead3(66, $input, $state)"/> <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE |
                                                                                                          PLUS | DIMENSION | '"' | "'" | '-' | 'attr(' |
                                                                                                          'url(' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] eq 25">                         <!-- '"' -->
                        <xsl:variable name="state" select="p:lookahead2(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 537">                  <!-- '"' STRING_CONTENT1 -->
                              <xsl:variable name="state" select="p:lookahead3(6, $input, $state)"/> <!-- '"' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] eq 26">                         <!-- "'" -->
                        <xsl:variable name="state" select="p:lookahead2(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 666">                  <!-- "'" STRING_CONTENT2 -->
                              <xsl:variable name="state" select="p:lookahead3(7, $input, $state)"/> <!-- "'" -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] eq 39">                         <!-- '@' -->
                        <xsl:variable name="state" select="p:lookahead2(74, $input, $state)"/> <!-- 'bottom-center' | 'bottom-left' | 'bottom-left-corner' |
                                                                                                    'bottom-right' | 'bottom-right-corner' | 'left-bottom' |
                                                                                                    'left-middle' | 'left-top' | 'right-bottom' |
                                                                                                    'right-middle' | 'right-top' | 'top-center' | 'top-left' |
                                                                                                    'top-left-corner' | 'top-right' | 'top-right-corner' -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] = (6951,                    (: '@' 'bottom-center' :)
                                                             7079,                    (: '@' 'bottom-left' :)
                                                             7207,                    (: '@' 'bottom-left-corner' :)
                                                             7335,                    (: '@' 'bottom-right' :)
                                                             7463,                    (: '@' 'bottom-right-corner' :)
                                                             7847,                    (: '@' 'left-bottom' :)
                                                             7975,                    (: '@' 'left-middle' :)
                                                             8103,                    (: '@' 'left-top' :)
                                                             8743,                    (: '@' 'right-bottom' :)
                                                             8871,                    (: '@' 'right-middle' :)
                                                             8999,                    (: '@' 'right-top' :)
                                                             9255,                    (: '@' 'top-center' :)
                                                             9383,                    (: '@' 'top-left' :)
                                                             9511,                    (: '@' 'top-left-corner' :)
                                                             9639,                    (: '@' 'top-right' :)
                                                             9767)">                <!-- '@' 'top-right-corner' -->
                              <xsl:variable name="state" select="p:lookahead3(24, $input, $state)"/> <!-- S | '{' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] != 6                              (: S :)
                                  and $state[$p:lk] != 35                             (: '/*' :)
                                  and $state[$p:lk] != 37                             (: ';' :)
                                  and $state[$p:lk] != 80">                         <!-- '}' -->
                        <xsl:variable name="state" select="p:memoized($state, 14)"/>
                        <xsl:choose>
                          <xsl:when test="$state[$p:lk] != 0">
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:variable name="backtrack" select="$state"/>
                            <xsl:variable name="state" select="p:strip-result($state)"/>
                            <xsl:variable name="state" select="
                              if ($state[$p:error]) then
                                $state
                              else
                                p:try-page_declaration($input, $state)
                            "/>
                            <xsl:choose>
                              <xsl:when test="not($state[$p:error])">
                                <xsl:sequence select="p:memoize($backtrack, $state, 14, $backtrack[$p:e0], -1, -1)"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:sequence select="p:memoize($backtrack, $state, 14, $backtrack[$p:e0], -2, -2)"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] = -1">
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-page_declaration($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($backtrack, $state, 12, $backtrack[$p:e0], -1, -1)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 12, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] != -1
                      and $state[$p:lk] != 1573                                       (: ';' IDENT :)
                      and $state[$p:lk] != 3237                                       (: ';' '&quot;' :)
                      and $state[$p:lk] != 3365                                       (: ';' &quot;'&quot; :)
                      and $state[$p:lk] != 4742                                       (: S ';' :)
                      and $state[$p:lk] != 4773                                       (: ';' ';' :)
                      and $state[$p:lk] != 5029                                       (: ';' '@' :)
                      and $state[$p:lk] != 197413                                     (: ';' S IDENT :)
                      and $state[$p:lk] != 410405                                     (: ';' S '&quot;' :)
                      and $state[$p:lk] != 426789                                     (: ';' S &quot;'&quot; :)
                      and $state[$p:lk] != 607013                                     (: ';' S ';' :)
                      and $state[$p:lk] != 639781">                                 <!-- ';' S '@' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 6">                                 <!-- S -->
                  <xsl:variable name="state" select="p:consume(6, $input, $state)"/> <!-- S -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="p:lookahead1(13, $input, $state)"/>  <!-- ';' -->
            <xsl:variable name="state" select="p:consume(37, $input, $state)"/>     <!-- ';' -->
            <xsl:variable name="state" select="p:lookahead1(51, $input, $state)"/>  <!-- S | IDENT | '"' | "'" | '/*' | ';' | '@' | '}' -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:l1] eq 6">                                <!-- S -->
                  <xsl:variable name="state" select="p:lookahead2(51, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '@' | '}' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 1542">                       <!-- S IDENT -->
                        <xsl:variable name="state" select="p:lookahead3(21, $input, $state)"/> <!-- S | ':' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 3206">                       <!-- S '"' -->
                        <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 3334">                       <!-- S "'" -->
                        <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 4486">                       <!-- S '/*' -->
                        <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 4998">                       <!-- S '@' -->
                        <xsl:variable name="state" select="p:lookahead3(74, $input, $state)"/> <!-- 'bottom-center' | 'bottom-left' | 'bottom-left-corner' |
                                                                                                    'bottom-right' | 'bottom-right-corner' | 'left-bottom' |
                                                                                                    'left-middle' | 'left-top' | 'right-bottom' |
                                                                                                    'right-middle' | 'right-top' | 'top-center' | 'top-left' |
                                                                                                    'top-left-corner' | 'top-right' | 'top-right-corner' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 10246">                      <!-- S '}' -->
                        <xsl:variable name="state" select="p:lookahead3(77, $input, $state)"/> <!-- END | S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' |
                                                                                                    ':' | '@' | '@charset' | '@import' | '@media' |
                                                                                                    '@media print' | '@namespace' | '@page' | '[' | '|' |
                                                                                                    '}' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] = (774,                           (: S S :)
                                                       4742)">                      <!-- S ';' -->
                        <xsl:variable name="state" select="p:lookahead3(51, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '@' | '}' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] != 12                                   (: IDENT :)
                            and $state[$p:lk] != 25                                   (: '&quot;' :)
                            and $state[$p:lk] != 26                                   (: &quot;'&quot; :)
                            and $state[$p:lk] != 35                                   (: '/*' :)
                            and $state[$p:lk] != 37                                   (: ';' :)
                            and $state[$p:lk] != 39                                   (: '@' :)
                            and $state[$p:lk] != 80                                   (: '}' :)
                            and $state[$p:lk] != 574214                               (: S S '/*' :)
                            and $state[$p:lk] != 606982">                           <!-- S S ';' -->
                  <xsl:variable name="state" select="p:memoized($state, 13)"/>
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] != 0">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:variable name="backtrack" select="$state"/>
                      <xsl:variable name="state" select="p:strip-result($state)"/>
                      <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                      <xsl:choose>
                        <xsl:when test="not($state[$p:error])">
                          <xsl:sequence select="p:memoize($backtrack, $state, 13, $backtrack[$p:e0], -1, -1)"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:sequence select="p:memoize($backtrack, $state, 13, $backtrack[$p:e0], -2, -2)"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] = -1
                             or $state[$p:lk] = 574214                                (: S S '/*' :)
                             or $state[$p:lk] = 606982">                            <!-- S S ';' -->
                  <xsl:variable name="state" select="p:consume(6, $input, $state)"/> <!-- S -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="p:lookahead1(51, $input, $state)"/>  <!-- S | IDENT | '"' | "'" | '/*' | ';' | '@' | '}' -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:l1] eq 12">                               <!-- IDENT -->
                  <xsl:variable name="state" select="p:lookahead2(21, $input, $state)"/> <!-- S | ':' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 780">                        <!-- IDENT S -->
                        <xsl:variable name="state" select="p:lookahead3(12, $input, $state)"/> <!-- ':' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 4620">                       <!-- IDENT ':' -->
                        <xsl:variable name="state" select="p:lookahead3(66, $input, $state)"/> <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS |
                                                                                                    DIMENSION | '"' | "'" | '-' | 'attr(' | 'url(' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] eq 25">                               <!-- '"' -->
                  <xsl:variable name="state" select="p:lookahead2(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 537">                        <!-- '"' STRING_CONTENT1 -->
                        <xsl:variable name="state" select="p:lookahead3(6, $input, $state)"/> <!-- '"' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] eq 26">                               <!-- "'" -->
                  <xsl:variable name="state" select="p:lookahead2(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 666">                        <!-- "'" STRING_CONTENT2 -->
                        <xsl:variable name="state" select="p:lookahead3(7, $input, $state)"/> <!-- "'" -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] eq 39">                               <!-- '@' -->
                  <xsl:variable name="state" select="p:lookahead2(74, $input, $state)"/> <!-- 'bottom-center' | 'bottom-left' | 'bottom-left-corner' |
                                                                                              'bottom-right' | 'bottom-right-corner' | 'left-bottom' |
                                                                                              'left-middle' | 'left-top' | 'right-bottom' | 'right-middle' |
                                                                                              'right-top' | 'top-center' | 'top-left' | 'top-left-corner' |
                                                                                              'top-right' | 'top-right-corner' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] = (6951,                          (: '@' 'bottom-center' :)
                                                       7079,                          (: '@' 'bottom-left' :)
                                                       7207,                          (: '@' 'bottom-left-corner' :)
                                                       7335,                          (: '@' 'bottom-right' :)
                                                       7463,                          (: '@' 'bottom-right-corner' :)
                                                       7847,                          (: '@' 'left-bottom' :)
                                                       7975,                          (: '@' 'left-middle' :)
                                                       8103,                          (: '@' 'left-top' :)
                                                       8743,                          (: '@' 'right-bottom' :)
                                                       8871,                          (: '@' 'right-middle' :)
                                                       8999,                          (: '@' 'right-top' :)
                                                       9255,                          (: '@' 'top-center' :)
                                                       9383,                          (: '@' 'top-left' :)
                                                       9511,                          (: '@' 'top-left-corner' :)
                                                       9639,                          (: '@' 'top-right' :)
                                                       9767)">                      <!-- '@' 'top-right-corner' -->
                        <xsl:variable name="state" select="p:lookahead3(24, $input, $state)"/> <!-- S | '{' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] != 6                                    (: S :)
                            and $state[$p:lk] != 35                                   (: '/*' :)
                            and $state[$p:lk] != 37                                   (: ';' :)
                            and $state[$p:lk] != 80">                               <!-- '}' -->
                  <xsl:variable name="state" select="p:memoized($state, 14)"/>
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] != 0">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:variable name="backtrack" select="$state"/>
                      <xsl:variable name="state" select="p:strip-result($state)"/>
                      <xsl:variable name="state" select="
                        if ($state[$p:error]) then
                          $state
                        else
                          p:try-page_declaration($input, $state)
                      "/>
                      <xsl:choose>
                        <xsl:when test="not($state[$p:error])">
                          <xsl:sequence select="p:memoize($backtrack, $state, 14, $backtrack[$p:e0], -1, -1)"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:sequence select="p:memoize($backtrack, $state, 14, $backtrack[$p:e0], -2, -2)"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] = -1">
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-page_declaration($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:parse-pagequery-4($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 4th loop of production pagequery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-pagequery-4">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(51, $input, $state)"/>      <!-- S | IDENT | '"' | "'" | '/*' | ';' | '@' | '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(51, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '@' | '}' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] eq 37">                                   <!-- ';' -->
              <xsl:variable name="state" select="p:lookahead2(51, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '@' | '}' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 805">                            <!-- ';' S -->
                    <xsl:variable name="state" select="p:lookahead3(51, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '@' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 4517">                           <!-- ';' '/*' -->
                    <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 10277">                          <!-- ';' '}' -->
                    <xsl:variable name="state" select="p:lookahead3(77, $input, $state)"/> <!-- END | S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' |
                                                                                                '@' | '@charset' | '@import' | '@media' | '@media print' |
                                                                                                '@namespace' | '@page' | '[' | '|' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] = 26661                                     (: ';' '}' END :)
                         or $state[$p:lk] = 99109                                     (: ';' S S :)
                         or $state[$p:lk] = 108581                                    (: ';' '}' S :)
                         or $state[$p:lk] = 206885                                    (: ';' '}' IDENT :)
                         or $state[$p:lk] = 256037                                    (: ';' '}' HASH :)
                         or $state[$p:lk] = 370725                                    (: ';' '}' NOT :)
                         or $state[$p:lk] = 397733                                    (: ';' '/*' CommentContents :)
                         or $state[$p:lk] = 452645                                    (: ';' '}' '(' :)
                         or $state[$p:lk] = 485413                                    (: ';' '}' '*' :)
                         or $state[$p:lk] = 550949                                    (: ';' '}' '.' :)
                         or $state[$p:lk] = 574245                                    (: ';' S '/*' :)
                         or $state[$p:lk] = 583717                                    (: ';' '}' '/*' :)
                         or $state[$p:lk] = 600101                                    (: ';' '}' ':' :)
                         or $state[$p:lk] = 649253                                    (: ';' '}' '@' :)
                         or $state[$p:lk] = 665637                                    (: ';' '}' '@charset' :)
                         or $state[$p:lk] = 682021                                    (: ';' '}' '@import' :)
                         or $state[$p:lk] = 698405                                    (: ';' '}' '@media' :)
                         or $state[$p:lk] = 714789                                    (: ';' '}' '@media print' :)
                         or $state[$p:lk] = 731173                                    (: ';' '}' '@namespace' :)
                         or $state[$p:lk] = 747557                                    (: ';' '}' '@page' :)
                         or $state[$p:lk] = 763941                                    (: ';' '}' '[' :)
                         or $state[$p:lk] = 1304613                                   (: ';' '}' '|' :)
                         or $state[$p:lk] = 1311525                                   (: ';' S '}' :)
                         or $state[$p:lk] = 1320997">                               <!-- ';' '}' '}' -->
              <xsl:variable name="state" select="p:memoized($state, 12)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 6">                           <!-- S -->
                        <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" select="p:lookahead1(13, $input, $state)"/> <!-- ';' -->
                  <xsl:variable name="state" select="p:consumeT(37, $input, $state)"/> <!-- ';' -->
                  <xsl:variable name="state" select="p:lookahead1(51, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '@' | '}' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:l1] eq 6">                          <!-- S -->
                        <xsl:variable name="state" select="p:lookahead2(51, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '@' | '}' -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 1542">                 <!-- S IDENT -->
                              <xsl:variable name="state" select="p:lookahead3(21, $input, $state)"/> <!-- S | ':' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 3206">                 <!-- S '"' -->
                              <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 3334">                 <!-- S "'" -->
                              <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 4486">                 <!-- S '/*' -->
                              <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 4998">                 <!-- S '@' -->
                              <xsl:variable name="state" select="p:lookahead3(74, $input, $state)"/> <!-- 'bottom-center' | 'bottom-left' |
                                                                                                          'bottom-left-corner' | 'bottom-right' |
                                                                                                          'bottom-right-corner' | 'left-bottom' |
                                                                                                          'left-middle' | 'left-top' | 'right-bottom' |
                                                                                                          'right-middle' | 'right-top' | 'top-center' |
                                                                                                          'top-left' | 'top-left-corner' | 'top-right' |
                                                                                                          'top-right-corner' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 10246">                <!-- S '}' -->
                              <xsl:variable name="state" select="p:lookahead3(77, $input, $state)"/> <!-- END | S | IDENT | HASH | NOT | '(' | '*' | '.' |
                                                                                                          '/*' | ':' | '@' | '@charset' | '@import' | '@media' |
                                                                                                          '@media print' | '@namespace' | '@page' | '[' | '|' |
                                                                                                          '}' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] = (774,                     (: S S :)
                                                             4742)">                <!-- S ';' -->
                              <xsl:variable name="state" select="p:lookahead3(51, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '@' | '}' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] != 12                             (: IDENT :)
                                  and $state[$p:lk] != 25                             (: '&quot;' :)
                                  and $state[$p:lk] != 26                             (: &quot;'&quot; :)
                                  and $state[$p:lk] != 35                             (: '/*' :)
                                  and $state[$p:lk] != 37                             (: ';' :)
                                  and $state[$p:lk] != 39                             (: '@' :)
                                  and $state[$p:lk] != 80                             (: '}' :)
                                  and $state[$p:lk] != 574214                         (: S S '/*' :)
                                  and $state[$p:lk] != 606982">                     <!-- S S ';' -->
                        <xsl:variable name="state" select="p:memoized($state, 13)"/>
                        <xsl:choose>
                          <xsl:when test="$state[$p:lk] != 0">
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:variable name="backtrack" select="$state"/>
                            <xsl:variable name="state" select="p:strip-result($state)"/>
                            <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                            <xsl:choose>
                              <xsl:when test="not($state[$p:error])">
                                <xsl:sequence select="p:memoize($backtrack, $state, 13, $backtrack[$p:e0], -1, -1)"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:sequence select="p:memoize($backtrack, $state, 13, $backtrack[$p:e0], -2, -2)"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] = -1
                                   or $state[$p:lk] = 574214                          (: S S '/*' :)
                                   or $state[$p:lk] = 606982">                      <!-- S S ';' -->
                        <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" select="p:lookahead1(51, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '@' | '}' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:l1] eq 12">                         <!-- IDENT -->
                        <xsl:variable name="state" select="p:lookahead2(21, $input, $state)"/> <!-- S | ':' -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 780">                  <!-- IDENT S -->
                              <xsl:variable name="state" select="p:lookahead3(12, $input, $state)"/> <!-- ':' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 4620">                 <!-- IDENT ':' -->
                              <xsl:variable name="state" select="p:lookahead3(66, $input, $state)"/> <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE |
                                                                                                          PLUS | DIMENSION | '"' | "'" | '-' | 'attr(' |
                                                                                                          'url(' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] eq 25">                         <!-- '"' -->
                        <xsl:variable name="state" select="p:lookahead2(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 537">                  <!-- '"' STRING_CONTENT1 -->
                              <xsl:variable name="state" select="p:lookahead3(6, $input, $state)"/> <!-- '"' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] eq 26">                         <!-- "'" -->
                        <xsl:variable name="state" select="p:lookahead2(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 666">                  <!-- "'" STRING_CONTENT2 -->
                              <xsl:variable name="state" select="p:lookahead3(7, $input, $state)"/> <!-- "'" -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] eq 39">                         <!-- '@' -->
                        <xsl:variable name="state" select="p:lookahead2(74, $input, $state)"/> <!-- 'bottom-center' | 'bottom-left' | 'bottom-left-corner' |
                                                                                                    'bottom-right' | 'bottom-right-corner' | 'left-bottom' |
                                                                                                    'left-middle' | 'left-top' | 'right-bottom' |
                                                                                                    'right-middle' | 'right-top' | 'top-center' | 'top-left' |
                                                                                                    'top-left-corner' | 'top-right' | 'top-right-corner' -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] = (6951,                    (: '@' 'bottom-center' :)
                                                             7079,                    (: '@' 'bottom-left' :)
                                                             7207,                    (: '@' 'bottom-left-corner' :)
                                                             7335,                    (: '@' 'bottom-right' :)
                                                             7463,                    (: '@' 'bottom-right-corner' :)
                                                             7847,                    (: '@' 'left-bottom' :)
                                                             7975,                    (: '@' 'left-middle' :)
                                                             8103,                    (: '@' 'left-top' :)
                                                             8743,                    (: '@' 'right-bottom' :)
                                                             8871,                    (: '@' 'right-middle' :)
                                                             8999,                    (: '@' 'right-top' :)
                                                             9255,                    (: '@' 'top-center' :)
                                                             9383,                    (: '@' 'top-left' :)
                                                             9511,                    (: '@' 'top-left-corner' :)
                                                             9639,                    (: '@' 'top-right' :)
                                                             9767)">                <!-- '@' 'top-right-corner' -->
                              <xsl:variable name="state" select="p:lookahead3(24, $input, $state)"/> <!-- S | '{' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] != 6                              (: S :)
                                  and $state[$p:lk] != 35                             (: '/*' :)
                                  and $state[$p:lk] != 37                             (: ';' :)
                                  and $state[$p:lk] != 80">                         <!-- '}' -->
                        <xsl:variable name="state" select="p:memoized($state, 14)"/>
                        <xsl:choose>
                          <xsl:when test="$state[$p:lk] != 0">
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:variable name="backtrack" select="$state"/>
                            <xsl:variable name="state" select="p:strip-result($state)"/>
                            <xsl:variable name="state" select="
                              if ($state[$p:error]) then
                                $state
                              else
                                p:try-page_declaration($input, $state)
                            "/>
                            <xsl:choose>
                              <xsl:when test="not($state[$p:error])">
                                <xsl:sequence select="p:memoize($backtrack, $state, 14, $backtrack[$p:e0], -1, -1)"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:sequence select="p:memoize($backtrack, $state, 14, $backtrack[$p:e0], -2, -2)"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] = -1">
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-page_declaration($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($state, $state, 12, $backtrack[$p:e0], -1, -3)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 12, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = -3">
            <xsl:sequence select="p:try-pagequery-4($input, $state)"/>
          </xsl:when>
          <xsl:when test="$state[$p:lk] != -1
                      and $state[$p:lk] != 1573                                       (: ';' IDENT :)
                      and $state[$p:lk] != 3237                                       (: ';' '&quot;' :)
                      and $state[$p:lk] != 3365                                       (: ';' &quot;'&quot; :)
                      and $state[$p:lk] != 4742                                       (: S ';' :)
                      and $state[$p:lk] != 4773                                       (: ';' ';' :)
                      and $state[$p:lk] != 5029                                       (: ';' '@' :)
                      and $state[$p:lk] != 197413                                     (: ';' S IDENT :)
                      and $state[$p:lk] != 410405                                     (: ';' S '&quot;' :)
                      and $state[$p:lk] != 426789                                     (: ';' S &quot;'&quot; :)
                      and $state[$p:lk] != 607013                                     (: ';' S ';' :)
                      and $state[$p:lk] != 639781">                                 <!-- ';' S '@' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 6">                                 <!-- S -->
                  <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="p:lookahead1(13, $input, $state)"/>  <!-- ';' -->
            <xsl:variable name="state" select="p:consumeT(37, $input, $state)"/>    <!-- ';' -->
            <xsl:variable name="state" select="p:lookahead1(51, $input, $state)"/>  <!-- S | IDENT | '"' | "'" | '/*' | ';' | '@' | '}' -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:l1] eq 6">                                <!-- S -->
                  <xsl:variable name="state" select="p:lookahead2(51, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '@' | '}' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 1542">                       <!-- S IDENT -->
                        <xsl:variable name="state" select="p:lookahead3(21, $input, $state)"/> <!-- S | ':' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 3206">                       <!-- S '"' -->
                        <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 3334">                       <!-- S "'" -->
                        <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 4486">                       <!-- S '/*' -->
                        <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 4998">                       <!-- S '@' -->
                        <xsl:variable name="state" select="p:lookahead3(74, $input, $state)"/> <!-- 'bottom-center' | 'bottom-left' | 'bottom-left-corner' |
                                                                                                    'bottom-right' | 'bottom-right-corner' | 'left-bottom' |
                                                                                                    'left-middle' | 'left-top' | 'right-bottom' |
                                                                                                    'right-middle' | 'right-top' | 'top-center' | 'top-left' |
                                                                                                    'top-left-corner' | 'top-right' | 'top-right-corner' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 10246">                      <!-- S '}' -->
                        <xsl:variable name="state" select="p:lookahead3(77, $input, $state)"/> <!-- END | S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' |
                                                                                                    ':' | '@' | '@charset' | '@import' | '@media' |
                                                                                                    '@media print' | '@namespace' | '@page' | '[' | '|' |
                                                                                                    '}' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] = (774,                           (: S S :)
                                                       4742)">                      <!-- S ';' -->
                        <xsl:variable name="state" select="p:lookahead3(51, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '@' | '}' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] != 12                                   (: IDENT :)
                            and $state[$p:lk] != 25                                   (: '&quot;' :)
                            and $state[$p:lk] != 26                                   (: &quot;'&quot; :)
                            and $state[$p:lk] != 35                                   (: '/*' :)
                            and $state[$p:lk] != 37                                   (: ';' :)
                            and $state[$p:lk] != 39                                   (: '@' :)
                            and $state[$p:lk] != 80                                   (: '}' :)
                            and $state[$p:lk] != 574214                               (: S S '/*' :)
                            and $state[$p:lk] != 606982">                           <!-- S S ';' -->
                  <xsl:variable name="state" select="p:memoized($state, 13)"/>
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] != 0">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:variable name="backtrack" select="$state"/>
                      <xsl:variable name="state" select="p:strip-result($state)"/>
                      <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                      <xsl:choose>
                        <xsl:when test="not($state[$p:error])">
                          <xsl:sequence select="p:memoize($backtrack, $state, 13, $backtrack[$p:e0], -1, -1)"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:sequence select="p:memoize($backtrack, $state, 13, $backtrack[$p:e0], -2, -2)"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] = -1
                             or $state[$p:lk] = 574214                                (: S S '/*' :)
                             or $state[$p:lk] = 606982">                            <!-- S S ';' -->
                  <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="p:lookahead1(51, $input, $state)"/>  <!-- S | IDENT | '"' | "'" | '/*' | ';' | '@' | '}' -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:l1] eq 12">                               <!-- IDENT -->
                  <xsl:variable name="state" select="p:lookahead2(21, $input, $state)"/> <!-- S | ':' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 780">                        <!-- IDENT S -->
                        <xsl:variable name="state" select="p:lookahead3(12, $input, $state)"/> <!-- ':' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 4620">                       <!-- IDENT ':' -->
                        <xsl:variable name="state" select="p:lookahead3(66, $input, $state)"/> <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS |
                                                                                                    DIMENSION | '"' | "'" | '-' | 'attr(' | 'url(' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] eq 25">                               <!-- '"' -->
                  <xsl:variable name="state" select="p:lookahead2(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 537">                        <!-- '"' STRING_CONTENT1 -->
                        <xsl:variable name="state" select="p:lookahead3(6, $input, $state)"/> <!-- '"' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] eq 26">                               <!-- "'" -->
                  <xsl:variable name="state" select="p:lookahead2(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 666">                        <!-- "'" STRING_CONTENT2 -->
                        <xsl:variable name="state" select="p:lookahead3(7, $input, $state)"/> <!-- "'" -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] eq 39">                               <!-- '@' -->
                  <xsl:variable name="state" select="p:lookahead2(74, $input, $state)"/> <!-- 'bottom-center' | 'bottom-left' | 'bottom-left-corner' |
                                                                                              'bottom-right' | 'bottom-right-corner' | 'left-bottom' |
                                                                                              'left-middle' | 'left-top' | 'right-bottom' | 'right-middle' |
                                                                                              'right-top' | 'top-center' | 'top-left' | 'top-left-corner' |
                                                                                              'top-right' | 'top-right-corner' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] = (6951,                          (: '@' 'bottom-center' :)
                                                       7079,                          (: '@' 'bottom-left' :)
                                                       7207,                          (: '@' 'bottom-left-corner' :)
                                                       7335,                          (: '@' 'bottom-right' :)
                                                       7463,                          (: '@' 'bottom-right-corner' :)
                                                       7847,                          (: '@' 'left-bottom' :)
                                                       7975,                          (: '@' 'left-middle' :)
                                                       8103,                          (: '@' 'left-top' :)
                                                       8743,                          (: '@' 'right-bottom' :)
                                                       8871,                          (: '@' 'right-middle' :)
                                                       8999,                          (: '@' 'right-top' :)
                                                       9255,                          (: '@' 'top-center' :)
                                                       9383,                          (: '@' 'top-left' :)
                                                       9511,                          (: '@' 'top-left-corner' :)
                                                       9639,                          (: '@' 'top-right' :)
                                                       9767)">                      <!-- '@' 'top-right-corner' -->
                        <xsl:variable name="state" select="p:lookahead3(24, $input, $state)"/> <!-- S | '{' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] != 6                                    (: S :)
                            and $state[$p:lk] != 35                                   (: '/*' :)
                            and $state[$p:lk] != 37                                   (: ';' :)
                            and $state[$p:lk] != 80">                               <!-- '}' -->
                  <xsl:variable name="state" select="p:memoized($state, 14)"/>
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] != 0">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:variable name="backtrack" select="$state"/>
                      <xsl:variable name="state" select="p:strip-result($state)"/>
                      <xsl:variable name="state" select="
                        if ($state[$p:error]) then
                          $state
                        else
                          p:try-page_declaration($input, $state)
                      "/>
                      <xsl:choose>
                        <xsl:when test="not($state[$p:error])">
                          <xsl:sequence select="p:memoize($backtrack, $state, 14, $backtrack[$p:e0], -1, -1)"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:sequence select="p:memoize($backtrack, $state, 14, $backtrack[$p:e0], -2, -2)"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] = -1">
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:try-page_declaration($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:try-pagequery-4($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 2nd loop of production pagequery (zero or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-pagequery-2">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:variable name="state" select="p:lookahead1(48, $input, $state)"/>        <!-- S | IDENT | '"' | "'" | '/*' | '@' | '}' -->
      <xsl:variable name="state" as="item()+">
        <xsl:choose>
          <xsl:when test="$state[$p:l1] eq 6">                                      <!-- S -->
            <xsl:variable name="state" select="p:lookahead2(45, $input, $state)"/>  <!-- S | IDENT | '"' | "'" | '@' | '}' -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:lk] eq 774">                              <!-- S S -->
                  <xsl:variable name="state" select="p:lookahead3(45, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '@' | '}' -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] eq 35">                                     <!-- '/*' -->
            <xsl:variable name="state" select="p:lookahead2(5, $input, $state)"/>   <!-- CommentContents -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:lk] eq 3107">                             <!-- '/*' CommentContents -->
                  <xsl:variable name="state" select="p:lookahead3(11, $input, $state)"/> <!-- '*/' -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:variable name="state" as="item()+">
        <xsl:choose>
          <xsl:when test="$state[$p:error]">
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:lk] = 99078                                       (: S S S :)
                       or $state[$p:lk] = 494627">                                  <!-- '/*' CommentContents '*/' -->
            <xsl:variable name="state" select="p:memoized($state, 11)"/>
            <xsl:choose>
              <xsl:when test="$state[$p:lk] != 0">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="backtrack" select="$state"/>
                <xsl:variable name="state" select="p:strip-result($state)"/>
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:error]">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:l1] = 35">                            <!-- '/*' -->
                      <xsl:variable name="state" select="
                        if ($state[$p:error]) then
                          $state
                        else
                          p:try-COMMENT($input, $state)
                      "/>
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:variable name="state" select="p:try-pagequery-3($input, $state)"/>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:try-page_declaration($input, $state)
                "/>
                <xsl:variable name="state" select="p:try-pagequery-4($input, $state)"/>
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:error]">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:l1] = 37">                            <!-- ';' -->
                      <xsl:variable name="state" select="p:consumeT(37, $input, $state)"/> <!-- ';' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:variable name="state" select="p:lookahead1(48, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | '@' | '}' -->
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:l1] eq 6">                            <!-- S -->
                      <xsl:variable name="state" select="p:lookahead2(48, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | '@' | '}' -->
                      <xsl:variable name="state" as="item()+">
                        <xsl:choose>
                          <xsl:when test="$state[$p:lk] eq 774">                    <!-- S S -->
                            <xsl:variable name="state" select="p:lookahead3(45, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '@' | '}' -->
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:when test="$state[$p:lk] eq 1542">                   <!-- S IDENT -->
                            <xsl:variable name="state" select="p:lookahead3(21, $input, $state)"/> <!-- S | ':' -->
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:when test="$state[$p:lk] eq 3206">                   <!-- S '"' -->
                            <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:when test="$state[$p:lk] eq 3334">                   <!-- S "'" -->
                            <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:when test="$state[$p:lk] eq 4998">                   <!-- S '@' -->
                            <xsl:variable name="state" select="p:lookahead3(74, $input, $state)"/> <!-- 'bottom-center' | 'bottom-left' | 'bottom-left-corner' |
                                                                                                        'bottom-right' | 'bottom-right-corner' | 'left-bottom' |
                                                                                                        'left-middle' | 'left-top' | 'right-bottom' |
                                                                                                        'right-middle' | 'right-top' | 'top-center' |
                                                                                                        'top-left' | 'top-left-corner' | 'top-right' |
                                                                                                        'top-right-corner' -->
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:when test="$state[$p:lk] eq 10246">                  <!-- S '}' -->
                            <xsl:variable name="state" select="p:lookahead3(77, $input, $state)"/> <!-- END | S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' |
                                                                                                        ':' | '@' | '@charset' | '@import' | '@media' |
                                                                                                        '@media print' | '@namespace' | '@page' | '[' | '|' |
                                                                                                        '}' -->
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:sequence select="$state"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:variable>
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:error]">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] != 12                               (: IDENT :)
                                and $state[$p:lk] != 25                               (: '&quot;' :)
                                and $state[$p:lk] != 26                               (: &quot;'&quot; :)
                                and $state[$p:lk] != 35                               (: '/*' :)
                                and $state[$p:lk] != 39                               (: '@' :)
                                and $state[$p:lk] != 80                               (: '}' :)
                                and $state[$p:lk] != 4486">                         <!-- S '/*' -->
                      <xsl:variable name="state" select="p:memoized($state, 15)"/>
                      <xsl:choose>
                        <xsl:when test="$state[$p:lk] != 0">
                          <xsl:sequence select="$state"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:variable name="backtrack" select="$state"/>
                          <xsl:variable name="state" select="p:strip-result($state)"/>
                          <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                          <xsl:choose>
                            <xsl:when test="not($state[$p:error])">
                              <xsl:sequence select="p:memoize($backtrack, $state, 15, $backtrack[$p:e0], -1, -1)"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="p:memoize($backtrack, $state, 15, $backtrack[$p:e0], -2, -2)"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:error]">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] = -1
                                 or $state[$p:lk] = 4486">                          <!-- S '/*' -->
                      <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:choose>
                  <xsl:when test="not($state[$p:error])">
                    <xsl:sequence select="p:memoize($backtrack, $state, 11, $backtrack[$p:e0], -1, -1)"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="p:memoize($backtrack, $state, 11, $backtrack[$p:e0], -2, -2)"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="$state"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:choose>
        <xsl:when test="$state[$p:lk] = -2
                     or $state[$p:lk] = 80                                            (: '}' :)
                     or $state[$p:lk] = 10246                                         (: S '}' :)
                     or $state[$p:lk] = 1311494">                                   <!-- S S '}' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 35">                                  <!-- '/*' -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-COMMENT($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-pagequery-3($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-page_declaration($input, $state)
          "/>
          <xsl:variable name="state" select="p:parse-pagequery-4($input, $state)"/>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 37">                                  <!-- ';' -->
                <xsl:variable name="state" select="p:consume(37, $input, $state)"/> <!-- ';' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:lookahead1(48, $input, $state)"/>    <!-- S | IDENT | '"' | "'" | '/*' | '@' | '}' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:l1] eq 6">                                  <!-- S -->
                <xsl:variable name="state" select="p:lookahead2(48, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | '@' | '}' -->
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] eq 774">                          <!-- S S -->
                      <xsl:variable name="state" select="p:lookahead3(45, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '@' | '}' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] eq 1542">                         <!-- S IDENT -->
                      <xsl:variable name="state" select="p:lookahead3(21, $input, $state)"/> <!-- S | ':' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] eq 3206">                         <!-- S '"' -->
                      <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] eq 3334">                         <!-- S "'" -->
                      <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] eq 4998">                         <!-- S '@' -->
                      <xsl:variable name="state" select="p:lookahead3(74, $input, $state)"/> <!-- 'bottom-center' | 'bottom-left' | 'bottom-left-corner' |
                                                                                                  'bottom-right' | 'bottom-right-corner' | 'left-bottom' |
                                                                                                  'left-middle' | 'left-top' | 'right-bottom' | 'right-middle' |
                                                                                                  'right-top' | 'top-center' | 'top-left' | 'top-left-corner' |
                                                                                                  'top-right' | 'top-right-corner' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] eq 10246">                        <!-- S '}' -->
                      <xsl:variable name="state" select="p:lookahead3(77, $input, $state)"/> <!-- END | S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' |
                                                                                                  '@' | '@charset' | '@import' | '@media' | '@media print' |
                                                                                                  '@namespace' | '@page' | '[' | '|' | '}' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] != 12                                     (: IDENT :)
                          and $state[$p:lk] != 25                                     (: '&quot;' :)
                          and $state[$p:lk] != 26                                     (: &quot;'&quot; :)
                          and $state[$p:lk] != 35                                     (: '/*' :)
                          and $state[$p:lk] != 39                                     (: '@' :)
                          and $state[$p:lk] != 80                                     (: '}' :)
                          and $state[$p:lk] != 4486">                               <!-- S '/*' -->
                <xsl:variable name="state" select="p:memoized($state, 15)"/>
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] != 0">
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:variable name="backtrack" select="$state"/>
                    <xsl:variable name="state" select="p:strip-result($state)"/>
                    <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                    <xsl:choose>
                      <xsl:when test="not($state[$p:error])">
                        <xsl:sequence select="p:memoize($backtrack, $state, 15, $backtrack[$p:e0], -1, -1)"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="p:memoize($backtrack, $state, 15, $backtrack[$p:e0], -2, -2)"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] = -1
                           or $state[$p:lk] = 4486">                                <!-- S '/*' -->
                <xsl:variable name="state" select="p:consume(6, $input, $state)"/>  <!-- S -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="p:parse-pagequery-2($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Parse the 5th loop of production pagequery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-pagequery-5">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(31, $input, $state)"/>      <!-- S | '/*' | '}' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 35">                                     <!-- '/*' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-COMMENT($input, $state)
            "/>
            <xsl:sequence select="p:parse-pagequery-5($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 6th loop of production pagequery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-pagequery-6">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(25, $input, $state)"/>      <!-- S | '}' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-pagequery-6($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse pagequery.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-pagequery" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-pagerule($input, $state)
    "/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 6">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(6, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(14, $input, $state)"/>          <!-- '{' -->
    <xsl:variable name="state" select="p:consume(78, $input, $state)"/>             <!-- '{' -->
    <xsl:variable name="state" select="p:parse-pagequery-1($input, $state)"/>
    <xsl:variable name="state" select="p:parse-pagequery-2($input, $state)"/>
    <xsl:variable name="state" select="p:parse-pagequery-5($input, $state)"/>
    <xsl:variable name="state" select="p:parse-pagequery-6($input, $state)"/>
    <xsl:variable name="state" select="p:consume(80, $input, $state)"/>             <!-- '}' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'pagequery', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse printcssrule.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-printcssrule" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(43, $input, $state)"/>             <!-- '@media print' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'printcssrule', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production printcssquery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-printcssquery-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(67, $input, $state)"/>      <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' | '@' | '@page' |
                                                                                         '[' | '|' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 35">                                   <!-- '/*' -->
              <xsl:variable name="state" select="p:lookahead2(5, $input, $state)"/> <!-- CommentContents -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 3107">                           <!-- '/*' CommentContents -->
                    <xsl:variable name="state" select="p:lookahead3(11, $input, $state)"/> <!-- '*/' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] = 494627">                                <!-- '/*' CommentContents '*/' -->
              <xsl:variable name="state" select="p:memoized($state, 8)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:try-COMMENT($input, $state)
                  "/>
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($backtrack, $state, 8, $backtrack[$p:e0], -1, -1)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 8, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] != -1">
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-COMMENT($input, $state)
            "/>
            <xsl:sequence select="p:parse-printcssquery-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 3rd loop of production printcssquery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-printcssquery-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(69, $input, $state)"/>      <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' | '@' | '@page' |
                                                                                         '[' | '|' | '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(69, $input, $state)"/> <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' | '@' |
                                                                                          '@page' | '[' | '|' | '}' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 774">                            <!-- S S -->
                    <xsl:variable name="state" select="p:lookahead3(69, $input, $state)"/> <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' | '@' |
                                                                                                '@page' | '[' | '|' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 1926">                           <!-- S HASH -->
                    <xsl:variable name="state" select="p:lookahead3(70, $input, $state)"/> <!-- S | HASH | PLUS | GREATER | COMMA | TILDE | NOT | '(' | '.' |
                                                                                                '/*' | ':' | '@' | '[' | '{' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 2822">                           <!-- S NOT -->
                    <xsl:variable name="state" select="p:lookahead3(50, $input, $state)"/> <!-- S | IDENT | HASH | '*' | '.' | ':' | '[' | '|' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 3462">                           <!-- S '(' -->
                    <xsl:variable name="state" select="p:lookahead3(33, $input, $state)"/> <!-- IDENT | '"' | "'" -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 4486">                           <!-- S '/*' -->
                    <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 4614">                           <!-- S ':' -->
                    <xsl:variable name="state" select="p:lookahead3(32, $input, $state)"/> <!-- IDENT | FUNCTION | ':' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 5766">                           <!-- S '@page' -->
                    <xsl:variable name="state" select="p:lookahead3(37, $input, $state)"/> <!-- S | IDENT | ':' | '{' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 5894">                           <!-- S '[' -->
                    <xsl:variable name="state" select="p:lookahead3(36, $input, $state)"/> <!-- S | IDENT | '*' | '|' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 10118">                          <!-- S '|' -->
                    <xsl:variable name="state" select="p:lookahead3(27, $input, $state)"/> <!-- IDENT | '*' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 10246">                          <!-- S '}' -->
                    <xsl:variable name="state" select="p:lookahead3(76, $input, $state)"/> <!-- END | S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' |
                                                                                                '@' | '@charset' | '@import' | '@media' | '@media print' |
                                                                                                '@namespace' | '@page' | '[' | '|' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] = (1542,                              (: S IDENT :)
                                                   3718)">                          <!-- S '*' -->
                    <xsl:variable name="state" select="p:lookahead3(72, $input, $state)"/> <!-- S | HASH | PLUS | GREATER | COMMA | TILDE | NOT | '(' | '.' |
                                                                                                '/*' | ':' | '@' | '[' | '{' | '|' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] = (4230,                              (: S '.' :)
                                                   4998)">                          <!-- S '@' -->
                    <xsl:variable name="state" select="p:lookahead3(3, $input, $state)"/> <!-- IDENT -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] != 12                                       (: IDENT :)
                        and $state[$p:lk] != 15                                       (: HASH :)
                        and $state[$p:lk] != 22                                       (: NOT :)
                        and $state[$p:lk] != 27                                       (: '(' :)
                        and $state[$p:lk] != 29                                       (: '*' :)
                        and $state[$p:lk] != 33                                       (: '.' :)
                        and $state[$p:lk] != 35                                       (: '/*' :)
                        and $state[$p:lk] != 36                                       (: ':' :)
                        and $state[$p:lk] != 39                                       (: '@' :)
                        and $state[$p:lk] != 45                                       (: '@page' :)
                        and $state[$p:lk] != 46                                       (: '[' :)
                        and $state[$p:lk] != 79                                       (: '|' :)
                        and $state[$p:lk] != 80                                       (: '}' :)
                        and $state[$p:lk] != 99078                                    (: S S S :)
                        and $state[$p:lk] != 1311494">                              <!-- S S '}' -->
              <xsl:variable name="state" select="p:memoized($state, 9)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($backtrack, $state, 9, $backtrack[$p:e0], -1, -1)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 9, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] != -1
                      and $state[$p:lk] != 99078                                      (: S S S :)
                      and $state[$p:lk] != 1311494">                                <!-- S S '}' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-printcssquery-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 1st loop of production printcssquery (zero or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-printcssquery-1">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:variable name="state" select="p:lookahead1(69, $input, $state)"/>        <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' | '@' | '@page' |
                                                                                         '[' | '|' | '}' -->
      <xsl:variable name="state" as="item()+">
        <xsl:choose>
          <xsl:when test="$state[$p:l1] eq 6">                                      <!-- S -->
            <xsl:variable name="state" select="p:lookahead2(69, $input, $state)"/>  <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' | '@' | '@page' |
                                                                                         '[' | '|' | '}' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:choose>
        <xsl:when test="$state[$p:lk] = 80                                            (: '}' :)
                     or $state[$p:lk] = 10246">                                     <!-- S '}' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:l1] eq 6">                                  <!-- S -->
                <xsl:variable name="state" select="p:lookahead2(67, $input, $state)"/> <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' | '@' |
                                                                                            '@page' | '[' | '|' -->
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] eq 1926">                         <!-- S HASH -->
                      <xsl:variable name="state" select="p:lookahead3(70, $input, $state)"/> <!-- S | HASH | PLUS | GREATER | COMMA | TILDE | NOT | '(' | '.' |
                                                                                                  '/*' | ':' | '@' | '[' | '{' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] eq 2822">                         <!-- S NOT -->
                      <xsl:variable name="state" select="p:lookahead3(50, $input, $state)"/> <!-- S | IDENT | HASH | '*' | '.' | ':' | '[' | '|' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] eq 3462">                         <!-- S '(' -->
                      <xsl:variable name="state" select="p:lookahead3(33, $input, $state)"/> <!-- IDENT | '"' | "'" -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] eq 4486">                         <!-- S '/*' -->
                      <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] eq 4614">                         <!-- S ':' -->
                      <xsl:variable name="state" select="p:lookahead3(32, $input, $state)"/> <!-- IDENT | FUNCTION | ':' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] eq 5766">                         <!-- S '@page' -->
                      <xsl:variable name="state" select="p:lookahead3(37, $input, $state)"/> <!-- S | IDENT | ':' | '{' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] eq 5894">                         <!-- S '[' -->
                      <xsl:variable name="state" select="p:lookahead3(36, $input, $state)"/> <!-- S | IDENT | '*' | '|' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] eq 10118">                        <!-- S '|' -->
                      <xsl:variable name="state" select="p:lookahead3(27, $input, $state)"/> <!-- IDENT | '*' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] = (1542,                            (: S IDENT :)
                                                     3718)">                        <!-- S '*' -->
                      <xsl:variable name="state" select="p:lookahead3(72, $input, $state)"/> <!-- S | HASH | PLUS | GREATER | COMMA | TILDE | NOT | '(' | '.' |
                                                                                                  '/*' | ':' | '@' | '[' | '{' | '|' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] = (4230,                            (: S '.' :)
                                                     4998)">                        <!-- S '@' -->
                      <xsl:variable name="state" select="p:lookahead3(3, $input, $state)"/> <!-- IDENT -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] != 12                                     (: IDENT :)
                          and $state[$p:lk] != 15                                     (: HASH :)
                          and $state[$p:lk] != 22                                     (: NOT :)
                          and $state[$p:lk] != 27                                     (: '(' :)
                          and $state[$p:lk] != 29                                     (: '*' :)
                          and $state[$p:lk] != 33                                     (: '.' :)
                          and $state[$p:lk] != 35                                     (: '/*' :)
                          and $state[$p:lk] != 36                                     (: ':' :)
                          and $state[$p:lk] != 39                                     (: '@' :)
                          and $state[$p:lk] != 45                                     (: '@page' :)
                          and $state[$p:lk] != 46                                     (: '[' :)
                          and $state[$p:lk] != 79                                     (: '|' :)
                          and $state[$p:lk] != 774">                                <!-- S S -->
                <xsl:variable name="state" select="p:memoized($state, 7)"/>
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] != 0">
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:variable name="backtrack" select="$state"/>
                    <xsl:variable name="state" select="p:strip-result($state)"/>
                    <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                    <xsl:choose>
                      <xsl:when test="not($state[$p:error])">
                        <xsl:sequence select="p:memoize($backtrack, $state, 7, $backtrack[$p:e0], -1, -1)"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="p:memoize($backtrack, $state, 7, $backtrack[$p:e0], -2, -2)"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] = -1
                           or $state[$p:lk] = 774">                                 <!-- S S -->
                <xsl:variable name="state" select="p:consume(6, $input, $state)"/>  <!-- S -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-printcssquery-2($input, $state)"/>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 6">                                   <!-- S -->
                <xsl:variable name="state" select="p:consume(6, $input, $state)"/>  <!-- S -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:lookahead1(63, $input, $state)"/>    <!-- IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' | '@' | '@page' |
                                                                                         '[' | '|' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 45">                                  <!-- '@page' -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-pagequery($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 35">                                  <!-- '/*' -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-COMMENT($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-query_declaration($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-printcssquery-3($input, $state)"/>
          <xsl:sequence select="p:parse-printcssquery-1($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Parse printcssquery.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-printcssquery" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-printcssrule($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1(24, $input, $state)"/>          <!-- S | '{' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 6">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(6, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(14, $input, $state)"/>          <!-- '{' -->
    <xsl:variable name="state" select="p:consume(78, $input, $state)"/>             <!-- '{' -->
    <xsl:variable name="state" select="p:parse-printcssquery-1($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 6">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(6, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(16, $input, $state)"/>          <!-- '}' -->
    <xsl:variable name="state" select="p:consume(80, $input, $state)"/>             <!-- '}' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'printcssquery', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse query_declaration.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-query_declaration" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-rule($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'query_declaration', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse conditions.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-conditions" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:lookahead1(54, $input, $state)"/>          <!-- ',' | 'amzn-kf8' | 'amzn-mobi' | 'amzn-mobi7' | 'and' | 'not' |
                                                                                         'only' | 'or' | 'screen' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 51">                                        <!-- 'and' -->
          <xsl:variable name="state" select="p:consume(51, $input, $state)"/>       <!-- 'and' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 71">                                        <!-- 'screen' -->
          <xsl:variable name="state" select="p:consume(71, $input, $state)"/>       <!-- 'screen' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 66">                                        <!-- 'or' -->
          <xsl:variable name="state" select="p:consume(66, $input, $state)"/>       <!-- 'or' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 65">                                        <!-- 'only' -->
          <xsl:variable name="state" select="p:consume(65, $input, $state)"/>       <!-- 'only' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 64">                                        <!-- 'not' -->
          <xsl:variable name="state" select="p:consume(64, $input, $state)"/>       <!-- 'not' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 49">                                        <!-- 'amzn-mobi' -->
          <xsl:variable name="state" select="p:consume(49, $input, $state)"/>       <!-- 'amzn-mobi' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 48">                                        <!-- 'amzn-kf8' -->
          <xsl:variable name="state" select="p:consume(48, $input, $state)"/>       <!-- 'amzn-kf8' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 50">                                        <!-- 'amzn-mobi7' -->
          <xsl:variable name="state" select="p:consume(50, $input, $state)"/>       <!-- 'amzn-mobi7' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(31, $input, $state)"/>       <!-- ',' -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'conditions', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production mediarule (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-mediarule-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(61, $input, $state)"/>      <!-- S | '(' | ',' | 'amzn-kf8' | 'amzn-mobi' | 'amzn-mobi7' | 'and' |
                                                                                         'not' | 'only' | 'or' | 'screen' | '{' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(58, $input, $state)"/> <!-- '(' | ',' | 'amzn-kf8' | 'amzn-mobi' | 'amzn-mobi7' | 'and' | 'not' |
                                                                                          'only' | 'or' | 'screen' | '{' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = 78                                          (: '{' :)
                       or $state[$p:lk] = 9990">                                    <!-- S '{' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:l1] eq 6">                                <!-- S -->
                  <xsl:variable name="state" select="p:lookahead2(55, $input, $state)"/> <!-- '(' | ',' | 'amzn-kf8' | 'amzn-mobi' | 'amzn-mobi7' | 'and' |
                                                                                              'not' | 'only' | 'or' | 'screen' -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] = 27                                    (: '(' :)
                             or $state[$p:lk] = 3462">                              <!-- S '(' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 6">                           <!-- S -->
                        <xsl:variable name="state" select="p:consume(6, $input, $state)"/> <!-- S -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-mediaquery_selector($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 6">                           <!-- S -->
                        <xsl:variable name="state" select="p:consume(6, $input, $state)"/> <!-- S -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-conditions($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:parse-mediarule-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse mediarule.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-mediarule" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(42, $input, $state)"/>             <!-- '@media' -->
    <xsl:variable name="state" select="p:lookahead1(2, $input, $state)"/>           <!-- S -->
    <xsl:variable name="state" select="p:consume(6, $input, $state)"/>              <!-- S -->
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-conditions($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-mediarule-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'mediarule', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production mediaquery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-mediaquery-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(57, $input, $state)"/>      <!-- IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' | '@' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 35">                                     <!-- '/*' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-COMMENT($input, $state)
            "/>
            <xsl:sequence select="p:parse-mediaquery-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 1st loop of production mediaquery (zero or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-mediaquery-1">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:variable name="state" select="p:lookahead1(68, $input, $state)"/>        <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' | '@' | '[' |
                                                                                         '|' | '}' -->
      <xsl:variable name="state" as="item()+">
        <xsl:choose>
          <xsl:when test="$state[$p:l1] eq 6">                                      <!-- S -->
            <xsl:variable name="state" select="p:lookahead2(64, $input, $state)"/>  <!-- IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' | '@' | '[' | '|' |
                                                                                         '}' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:choose>
        <xsl:when test="$state[$p:lk] = 80                                            (: '}' :)
                     or $state[$p:lk] = 10246">                                     <!-- S '}' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 6">                                   <!-- S -->
                <xsl:variable name="state" select="p:consume(6, $input, $state)"/>  <!-- S -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-mediaquery-2($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-query_declaration($input, $state)
          "/>
          <xsl:sequence select="p:parse-mediaquery-1($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Parse mediaquery.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-mediaquery" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-mediarule($input, $state)
    "/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 6">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(6, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(14, $input, $state)"/>          <!-- '{' -->
    <xsl:variable name="state" select="p:consume(78, $input, $state)"/>             <!-- '{' -->
    <xsl:variable name="state" select="p:parse-mediaquery-1($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 6">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(6, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(16, $input, $state)"/>          <!-- '}' -->
    <xsl:variable name="state" select="p:consume(80, $input, $state)"/>             <!-- '}' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'mediaquery', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production import (one or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-import-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(2, $input, $state)"/>       <!-- S -->
        <xsl:variable name="state" select="p:consume(6, $input, $state)"/>          <!-- S -->
        <xsl:variable name="state" select="p:lookahead1(39, $input, $state)"/>      <!-- S | '"' | "'" | 'url(' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="p:parse-import-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production import (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-import-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(22, $input, $state)"/>      <!-- S | ';' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-import-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse import.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-import" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(41, $input, $state)"/>             <!-- '@import' -->
    <xsl:variable name="state" select="p:parse-import-1($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 77">                                        <!-- 'url(' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-URL($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-QUOTED_STRING($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:parse-import-2($input, $state)"/>
    <xsl:variable name="state" select="p:consume(37, $input, $state)"/>             <!-- ';' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'import', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production simple_atrule (one or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_atrule-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:consume(6, $input, $state)"/>          <!-- S -->
        <xsl:variable name="state" select="p:lookahead1(18, $input, $state)"/>      <!-- S | IDENT -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="p:parse-simple_atrule-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 1st loop of production simple_atrule (one or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-simple_atrule-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/>         <!-- S -->
        <xsl:variable name="state" select="p:lookahead1(18, $input, $state)"/>      <!-- S | IDENT -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="p:try-simple_atrule-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production simple_atrule (one or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_atrule-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(2, $input, $state)"/>       <!-- S -->
        <xsl:variable name="state" select="p:consume(6, $input, $state)"/>          <!-- S -->
        <xsl:variable name="state" select="p:lookahead1(29, $input, $state)"/>      <!-- S | '"' | "'" -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="p:parse-simple_atrule-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 3rd loop of production simple_atrule (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_atrule-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(22, $input, $state)"/>      <!-- S | ';' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-simple_atrule-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse simple_atrule.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_atrule" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 40">                                        <!-- '@charset' -->
          <xsl:variable name="state" select="p:consume(40, $input, $state)"/>       <!-- '@charset' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(44, $input, $state)"/>       <!-- '@namespace' -->
          <xsl:variable name="state" select="p:lookahead1(2, $input, $state)"/>     <!-- S -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:l1] eq 6">                                  <!-- S -->
                <xsl:variable name="state" select="p:lookahead2(35, $input, $state)"/> <!-- S | IDENT | '"' | "'" -->
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] eq 774">                          <!-- S S -->
                      <xsl:variable name="state" select="p:lookahead3(35, $input, $state)"/> <!-- S | IDENT | '"' | "'" -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] = 99078">                               <!-- S S S -->
                <xsl:variable name="state" select="p:memoized($state, 0)"/>
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] != 0">
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:variable name="backtrack" select="$state"/>
                    <xsl:variable name="state" select="p:strip-result($state)"/>
                    <xsl:variable name="state" select="p:try-simple_atrule-1($input, $state)"/>
                    <xsl:variable name="state" select="p:consumeT(12, $input, $state)"/> <!-- IDENT -->
                    <xsl:choose>
                      <xsl:when test="not($state[$p:error])">
                        <xsl:sequence select="p:memoize($backtrack, $state, 0, $backtrack[$p:e0], -1, -1)"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="p:memoize($backtrack, $state, 0, $backtrack[$p:e0], -2, -2)"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] = -1
                           or $state[$p:lk] = 1542                                    (: S IDENT :)
                           or $state[$p:lk] = 197382">                              <!-- S S IDENT -->
                <xsl:variable name="state" select="p:parse-simple_atrule-1($input, $state)"/>
                <xsl:variable name="state" select="p:consume(12, $input, $state)"/> <!-- IDENT -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:parse-simple_atrule-2($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-QUOTED_STRING($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-simple_atrule-3($input, $state)"/>
    <xsl:variable name="state" select="p:consume(37, $input, $state)"/>             <!-- ';' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'simple_atrule', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse COMMENT.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-COMMENT" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(35, $input, $state)"/>             <!-- '/*' -->
    <xsl:variable name="state" select="p:lookahead1(5, $input, $state)"/>           <!-- CommentContents -->
    <xsl:variable name="state" select="p:consume(24, $input, $state)"/>             <!-- CommentContents -->
    <xsl:variable name="state" select="p:lookahead1(11, $input, $state)"/>          <!-- '*/' -->
    <xsl:variable name="state" select="p:consume(30, $input, $state)"/>             <!-- '*/' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'COMMENT', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing COMMENT.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-COMMENT" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="p:consumeT(35, $input, $state)"/>            <!-- '/*' -->
    <xsl:variable name="state" select="p:lookahead1(5, $input, $state)"/>           <!-- CommentContents -->
    <xsl:variable name="state" select="p:consumeT(24, $input, $state)"/>            <!-- CommentContents -->
    <xsl:variable name="state" select="p:lookahead1(11, $input, $state)"/>          <!-- '*/' -->
    <xsl:variable name="state" select="p:consumeT(30, $input, $state)"/>            <!-- '*/' -->
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production combinator (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-combinator-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(56, $input, $state)"/>      <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | ':' | '@' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-combinator-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production combinator (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-combinator-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(56, $input, $state)"/>      <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | ':' | '@' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-combinator-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 3rd loop of production combinator (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-combinator-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(56, $input, $state)"/>      <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | ':' | '@' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-combinator-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 4th loop of production combinator (one or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-combinator-4">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:consume(6, $input, $state)"/>          <!-- S -->
        <xsl:variable name="state" select="p:lookahead1(56, $input, $state)"/>      <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | ':' | '@' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="p:parse-combinator-4($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse combinator.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-combinator" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 18">                                        <!-- PLUS -->
          <xsl:variable name="state" select="p:consume(18, $input, $state)"/>       <!-- PLUS -->
          <xsl:variable name="state" select="p:parse-combinator-1($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 19">                                        <!-- GREATER -->
          <xsl:variable name="state" select="p:consume(19, $input, $state)"/>       <!-- GREATER -->
          <xsl:variable name="state" select="p:parse-combinator-2($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 21">                                        <!-- TILDE -->
          <xsl:variable name="state" select="p:consume(21, $input, $state)"/>       <!-- TILDE -->
          <xsl:variable name="state" select="p:parse-combinator-3($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:parse-combinator-4($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'combinator', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse value.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-value" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:lookahead1(62, $input, $state)"/>          <!-- IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS | DIMENSION | '"' |
                                                                                         "'" | '-' | 'attr(' | 'url(' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 77">                                        <!-- 'url(' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-URL($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 52">                                        <!-- 'attr(' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-ATTR($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 18">                                        <!-- PLUS -->
          <xsl:variable name="state" select="p:consume(18, $input, $state)"/>       <!-- PLUS -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 16">                                        <!-- HEX -->
          <xsl:variable name="state" select="p:consume(16, $input, $state)"/>       <!-- HEX -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 17">                                        <!-- PERCENTAGE -->
          <xsl:variable name="state" select="p:consume(17, $input, $state)"/>       <!-- PERCENTAGE -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 32">                                        <!-- '-' -->
          <xsl:variable name="state" select="p:consume(32, $input, $state)"/>       <!-- '-' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 23">                                        <!-- DIMENSION -->
          <xsl:variable name="state" select="p:consume(23, $input, $state)"/>       <!-- DIMENSION -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 14">                                        <!-- NUMBER -->
          <xsl:variable name="state" select="p:consume(14, $input, $state)"/>       <!-- NUMBER -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 12">                                        <!-- IDENT -->
          <xsl:variable name="state" select="p:consume(12, $input, $state)"/>       <!-- IDENT -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 13">                                        <!-- FUNCTION -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-functional_pseudo($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-QUOTED_STRING($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'value', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing value.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-value" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="p:lookahead1(62, $input, $state)"/>          <!-- IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS | DIMENSION | '"' |
                                                                                         "'" | '-' | 'attr(' | 'url(' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 77">                                        <!-- 'url(' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-URL($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 52">                                        <!-- 'attr(' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-ATTR($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 18">                                        <!-- PLUS -->
          <xsl:variable name="state" select="p:consumeT(18, $input, $state)"/>      <!-- PLUS -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 16">                                        <!-- HEX -->
          <xsl:variable name="state" select="p:consumeT(16, $input, $state)"/>      <!-- HEX -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 17">                                        <!-- PERCENTAGE -->
          <xsl:variable name="state" select="p:consumeT(17, $input, $state)"/>      <!-- PERCENTAGE -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 32">                                        <!-- '-' -->
          <xsl:variable name="state" select="p:consumeT(32, $input, $state)"/>      <!-- '-' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 23">                                        <!-- DIMENSION -->
          <xsl:variable name="state" select="p:consumeT(23, $input, $state)"/>      <!-- DIMENSION -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 14">                                        <!-- NUMBER -->
          <xsl:variable name="state" select="p:consumeT(14, $input, $state)"/>      <!-- NUMBER -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 12">                                        <!-- IDENT -->
          <xsl:variable name="state" select="p:consumeT(12, $input, $state)"/>      <!-- IDENT -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 13">                                        <!-- FUNCTION -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-functional_pseudo($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-QUOTED_STRING($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production values (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-values-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(59, $input, $state)"/>      <!-- important | S | IDENT | COMMA | '"' | "'" | ')' | '/' | '/*' | ';' |
                                                                                         '@' | '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(75, $input, $state)"/> <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS | COMMA |
                                                                                          DIMENSION | '"' | "'" | '-' | '/*' | ';' | '@' | 'attr(' | 'url(' |
                                                                                          '}' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 1542">                           <!-- S IDENT -->
                    <xsl:variable name="state" select="p:lookahead3(65, $input, $state)"/> <!-- important | S | IDENT | COMMA | '"' | "'" | ')' | '/' | '/*' |
                                                                                                ':' | ';' | '@' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 3206">                           <!-- S '"' -->
                    <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 3334">                           <!-- S "'" -->
                    <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] = 68742                                     (: S '&quot;' STRING_CONTENT1 :)
                         or $state[$p:lk] = 85254                                     (: S &quot;'&quot; STRING_CONTENT2 :)
                         or $state[$p:lk] = 99846">                                 <!-- S IDENT S -->
              <xsl:variable name="state" select="p:memoized($state, 24)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 6">                           <!-- S -->
                        <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-value($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:variable name="state" select="p:consumeT(34, $input, $state)"/> <!-- '/' -->
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-value($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($backtrack, $state, 24, $backtrack[$p:e0], -1, -1)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 24, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = -2
                       or $state[$p:lk] = 3                                           (: important :)
                       or $state[$p:lk] = 12                                          (: IDENT :)
                       or $state[$p:lk] = 20                                          (: COMMA :)
                       or $state[$p:lk] = 25                                          (: '&quot;' :)
                       or $state[$p:lk] = 26                                          (: &quot;'&quot; :)
                       or $state[$p:lk] = 28                                          (: ')' :)
                       or $state[$p:lk] = 35                                          (: '/*' :)
                       or $state[$p:lk] = 37                                          (: ';' :)
                       or $state[$p:lk] = 39                                          (: '@' :)
                       or $state[$p:lk] = 80                                          (: '}' :)
                       or $state[$p:lk] = 774                                         (: S S :)
                       or $state[$p:lk] = 2566                                        (: S COMMA :)
                       or $state[$p:lk] = 4486                                        (: S '/*' :)
                       or $state[$p:lk] = 4742                                        (: S ';' :)
                       or $state[$p:lk] = 4998                                        (: S '@' :)
                       or $state[$p:lk] = 10246                                       (: S '}' :)
                       or $state[$p:lk] = 591366">                                  <!-- S IDENT ':' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 6">                                 <!-- S -->
                  <xsl:variable name="state" select="p:consume(6, $input, $state)"/> <!-- S -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-value($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" select="p:consume(34, $input, $state)"/> <!-- '/' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-value($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:parse-values-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 1st loop of production values (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-values-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(59, $input, $state)"/>      <!-- important | S | IDENT | COMMA | '"' | "'" | ')' | '/' | '/*' | ';' |
                                                                                         '@' | '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(75, $input, $state)"/> <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS | COMMA |
                                                                                          DIMENSION | '"' | "'" | '-' | '/*' | ';' | '@' | 'attr(' | 'url(' |
                                                                                          '}' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 1542">                           <!-- S IDENT -->
                    <xsl:variable name="state" select="p:lookahead3(65, $input, $state)"/> <!-- important | S | IDENT | COMMA | '"' | "'" | ')' | '/' | '/*' |
                                                                                                ':' | ';' | '@' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 3206">                           <!-- S '"' -->
                    <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 3334">                           <!-- S "'" -->
                    <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] = 68742                                     (: S '&quot;' STRING_CONTENT1 :)
                         or $state[$p:lk] = 85254                                     (: S &quot;'&quot; STRING_CONTENT2 :)
                         or $state[$p:lk] = 99846">                                 <!-- S IDENT S -->
              <xsl:variable name="state" select="p:memoized($state, 24)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 6">                           <!-- S -->
                        <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-value($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:variable name="state" select="p:consumeT(34, $input, $state)"/> <!-- '/' -->
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-value($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($state, $state, 24, $backtrack[$p:e0], -1, -3)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 24, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = -3">
            <xsl:sequence select="p:try-values-1($input, $state)"/>
          </xsl:when>
          <xsl:when test="$state[$p:lk] = -2
                       or $state[$p:lk] = 3                                           (: important :)
                       or $state[$p:lk] = 12                                          (: IDENT :)
                       or $state[$p:lk] = 20                                          (: COMMA :)
                       or $state[$p:lk] = 25                                          (: '&quot;' :)
                       or $state[$p:lk] = 26                                          (: &quot;'&quot; :)
                       or $state[$p:lk] = 28                                          (: ')' :)
                       or $state[$p:lk] = 35                                          (: '/*' :)
                       or $state[$p:lk] = 37                                          (: ';' :)
                       or $state[$p:lk] = 39                                          (: '@' :)
                       or $state[$p:lk] = 80                                          (: '}' :)
                       or $state[$p:lk] = 774                                         (: S S :)
                       or $state[$p:lk] = 2566                                        (: S COMMA :)
                       or $state[$p:lk] = 4486                                        (: S '/*' :)
                       or $state[$p:lk] = 4742                                        (: S ';' :)
                       or $state[$p:lk] = 4998                                        (: S '@' :)
                       or $state[$p:lk] = 10246                                       (: S '}' :)
                       or $state[$p:lk] = 591366">                                  <!-- S IDENT ':' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 6">                                 <!-- S -->
                  <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:try-value($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" select="p:consumeT(34, $input, $state)"/> <!-- '/' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:try-value($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:try-values-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 3rd loop of production values (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-values-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(19, $input, $state)"/>      <!-- S | COMMA -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-values-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 3rd loop of production values (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-values-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(19, $input, $state)"/>      <!-- S | COMMA -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/>     <!-- S -->
            <xsl:sequence select="p:try-values-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 4th loop of production values (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-values-4">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(66, $input, $state)"/>      <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS | DIMENSION |
                                                                                         '"' | "'" | '-' | 'attr(' | 'url(' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-values-4($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 4th loop of production values (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-values-4">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(66, $input, $state)"/>      <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS | DIMENSION |
                                                                                         '"' | "'" | '-' | 'attr(' | 'url(' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/>     <!-- S -->
            <xsl:sequence select="p:try-values-4($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 5th loop of production values (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-values-5">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(59, $input, $state)"/>      <!-- important | S | IDENT | COMMA | '"' | "'" | ')' | '/' | '/*' | ';' |
                                                                                         '@' | '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(75, $input, $state)"/> <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS | COMMA |
                                                                                          DIMENSION | '"' | "'" | '-' | '/*' | ';' | '@' | 'attr(' | 'url(' |
                                                                                          '}' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 1542">                           <!-- S IDENT -->
                    <xsl:variable name="state" select="p:lookahead3(65, $input, $state)"/> <!-- important | S | IDENT | COMMA | '"' | "'" | ')' | '/' | '/*' |
                                                                                                ':' | ';' | '@' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 3206">                           <!-- S '"' -->
                    <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 3334">                           <!-- S "'" -->
                    <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] = 68742                                     (: S '&quot;' STRING_CONTENT1 :)
                         or $state[$p:lk] = 85254                                     (: S &quot;'&quot; STRING_CONTENT2 :)
                         or $state[$p:lk] = 99846">                                 <!-- S IDENT S -->
              <xsl:variable name="state" select="p:memoized($state, 26)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 6">                           <!-- S -->
                        <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-value($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:variable name="state" select="p:consumeT(34, $input, $state)"/> <!-- '/' -->
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-value($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($backtrack, $state, 26, $backtrack[$p:e0], -1, -1)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 26, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = -2
                       or $state[$p:lk] = 3                                           (: important :)
                       or $state[$p:lk] = 12                                          (: IDENT :)
                       or $state[$p:lk] = 20                                          (: COMMA :)
                       or $state[$p:lk] = 25                                          (: '&quot;' :)
                       or $state[$p:lk] = 26                                          (: &quot;'&quot; :)
                       or $state[$p:lk] = 28                                          (: ')' :)
                       or $state[$p:lk] = 35                                          (: '/*' :)
                       or $state[$p:lk] = 37                                          (: ';' :)
                       or $state[$p:lk] = 39                                          (: '@' :)
                       or $state[$p:lk] = 80                                          (: '}' :)
                       or $state[$p:lk] = 774                                         (: S S :)
                       or $state[$p:lk] = 2566                                        (: S COMMA :)
                       or $state[$p:lk] = 4486                                        (: S '/*' :)
                       or $state[$p:lk] = 4742                                        (: S ';' :)
                       or $state[$p:lk] = 4998                                        (: S '@' :)
                       or $state[$p:lk] = 10246                                       (: S '}' :)
                       or $state[$p:lk] = 591366">                                  <!-- S IDENT ':' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 6">                                 <!-- S -->
                  <xsl:variable name="state" select="p:consume(6, $input, $state)"/> <!-- S -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-value($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" select="p:consume(34, $input, $state)"/> <!-- '/' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-value($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:parse-values-5($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 5th loop of production values (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-values-5">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(59, $input, $state)"/>      <!-- important | S | IDENT | COMMA | '"' | "'" | ')' | '/' | '/*' | ';' |
                                                                                         '@' | '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(75, $input, $state)"/> <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS | COMMA |
                                                                                          DIMENSION | '"' | "'" | '-' | '/*' | ';' | '@' | 'attr(' | 'url(' |
                                                                                          '}' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 1542">                           <!-- S IDENT -->
                    <xsl:variable name="state" select="p:lookahead3(65, $input, $state)"/> <!-- important | S | IDENT | COMMA | '"' | "'" | ')' | '/' | '/*' |
                                                                                                ':' | ';' | '@' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 3206">                           <!-- S '"' -->
                    <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 3334">                           <!-- S "'" -->
                    <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] = 68742                                     (: S '&quot;' STRING_CONTENT1 :)
                         or $state[$p:lk] = 85254                                     (: S &quot;'&quot; STRING_CONTENT2 :)
                         or $state[$p:lk] = 99846">                                 <!-- S IDENT S -->
              <xsl:variable name="state" select="p:memoized($state, 26)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 6">                           <!-- S -->
                        <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-value($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:variable name="state" select="p:consumeT(34, $input, $state)"/> <!-- '/' -->
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-value($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($state, $state, 26, $backtrack[$p:e0], -1, -3)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 26, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = -3">
            <xsl:sequence select="p:try-values-5($input, $state)"/>
          </xsl:when>
          <xsl:when test="$state[$p:lk] = -2
                       or $state[$p:lk] = 3                                           (: important :)
                       or $state[$p:lk] = 12                                          (: IDENT :)
                       or $state[$p:lk] = 20                                          (: COMMA :)
                       or $state[$p:lk] = 25                                          (: '&quot;' :)
                       or $state[$p:lk] = 26                                          (: &quot;'&quot; :)
                       or $state[$p:lk] = 28                                          (: ')' :)
                       or $state[$p:lk] = 35                                          (: '/*' :)
                       or $state[$p:lk] = 37                                          (: ';' :)
                       or $state[$p:lk] = 39                                          (: '@' :)
                       or $state[$p:lk] = 80                                          (: '}' :)
                       or $state[$p:lk] = 774                                         (: S S :)
                       or $state[$p:lk] = 2566                                        (: S COMMA :)
                       or $state[$p:lk] = 4486                                        (: S '/*' :)
                       or $state[$p:lk] = 4742                                        (: S ';' :)
                       or $state[$p:lk] = 4998                                        (: S '@' :)
                       or $state[$p:lk] = 10246                                       (: S '}' :)
                       or $state[$p:lk] = 591366">                                  <!-- S IDENT ':' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 6">                                 <!-- S -->
                  <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:try-value($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" select="p:consumeT(34, $input, $state)"/> <!-- '/' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:try-value($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:try-values-5($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 2nd loop of production values (zero or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-values-2">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:variable name="state" as="item()+">
        <xsl:choose>
          <xsl:when test="$state[$p:l1] eq 6">                                      <!-- S -->
            <xsl:variable name="state" select="p:lookahead2(53, $input, $state)"/>  <!-- S | IDENT | COMMA | '"' | "'" | '/*' | ';' | '@' | '}' -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:lk] eq 774">                              <!-- S S -->
                  <xsl:variable name="state" select="p:lookahead3(46, $input, $state)"/> <!-- S | IDENT | COMMA | '"' | "'" | '@' | '}' -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:variable name="state" as="item()+">
        <xsl:choose>
          <xsl:when test="$state[$p:error]">
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:lk] = 99078">                                   <!-- S S S -->
            <xsl:variable name="state" select="p:memoized($state, 25)"/>
            <xsl:choose>
              <xsl:when test="$state[$p:lk] != 0">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="backtrack" select="$state"/>
                <xsl:variable name="state" select="p:strip-result($state)"/>
                <xsl:variable name="state" select="p:try-values-3($input, $state)"/>
                <xsl:variable name="state" select="p:consumeT(20, $input, $state)"/> <!-- COMMA -->
                <xsl:variable name="state" select="p:try-values-4($input, $state)"/>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:try-value($input, $state)
                "/>
                <xsl:variable name="state" select="p:try-values-5($input, $state)"/>
                <xsl:choose>
                  <xsl:when test="not($state[$p:error])">
                    <xsl:sequence select="p:memoize($backtrack, $state, 25, $backtrack[$p:e0], -1, -1)"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="p:memoize($backtrack, $state, 25, $backtrack[$p:e0], -2, -2)"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="$state"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:choose>
        <xsl:when test="$state[$p:lk] != -1
                    and $state[$p:lk] != 20                                           (: COMMA :)
                    and $state[$p:lk] != 2566                                         (: S COMMA :)
                    and $state[$p:lk] != 328454">                                   <!-- S S COMMA -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:parse-values-3($input, $state)"/>
          <xsl:variable name="state" select="p:consume(20, $input, $state)"/>       <!-- COMMA -->
          <xsl:variable name="state" select="p:parse-values-4($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-value($input, $state)
          "/>
          <xsl:variable name="state" select="p:parse-values-5($input, $state)"/>
          <xsl:sequence select="p:parse-values-2($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Try parsing the 2nd loop of production values (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-values-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(53, $input, $state)"/> <!-- S | IDENT | COMMA | '"' | "'" | '/*' | ';' | '@' | '}' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 774">                            <!-- S S -->
                    <xsl:variable name="state" select="p:lookahead3(46, $input, $state)"/> <!-- S | IDENT | COMMA | '"' | "'" | '@' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] = 99078">                                 <!-- S S S -->
              <xsl:variable name="state" select="p:memoized($state, 25)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" select="p:try-values-3($input, $state)"/>
                  <xsl:variable name="state" select="p:consumeT(20, $input, $state)"/> <!-- COMMA -->
                  <xsl:variable name="state" select="p:try-values-4($input, $state)"/>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:try-value($input, $state)
                  "/>
                  <xsl:variable name="state" select="p:try-values-5($input, $state)"/>
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($state, $state, 25, $backtrack[$p:e0], -1, -3)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 25, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = -3">
            <xsl:sequence select="p:try-values-2($input, $state)"/>
          </xsl:when>
          <xsl:when test="$state[$p:lk] != -1
                      and $state[$p:lk] != 20                                         (: COMMA :)
                      and $state[$p:lk] != 2566                                       (: S COMMA :)
                      and $state[$p:lk] != 328454">                                 <!-- S S COMMA -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:try-values-3($input, $state)"/>
            <xsl:variable name="state" select="p:consumeT(20, $input, $state)"/>    <!-- COMMA -->
            <xsl:variable name="state" select="p:try-values-4($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:try-value($input, $state)
            "/>
            <xsl:variable name="state" select="p:try-values-5($input, $state)"/>
            <xsl:sequence select="p:try-values-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse values.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-values" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-value($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-values-1($input, $state)"/>
    <xsl:variable name="state" select="p:parse-values-2($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 3">                                         <!-- important -->
          <xsl:variable name="state" select="p:consume(3, $input, $state)"/>        <!-- important -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'values', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing values.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-values" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:try-value($input, $state)
    "/>
    <xsl:variable name="state" select="p:try-values-1($input, $state)"/>
    <xsl:variable name="state" select="p:try-values-2($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 3">                                         <!-- important -->
          <xsl:variable name="state" select="p:consumeT(3, $input, $state)"/>       <!-- important -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse property.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-property" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:lookahead1(33, $input, $state)"/>          <!-- IDENT | '"' | "'" -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 12">                                        <!-- IDENT -->
          <xsl:variable name="state" select="p:consume(12, $input, $state)"/>       <!-- IDENT -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-QUOTED_STRING($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'property', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing property.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-property" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="p:lookahead1(33, $input, $state)"/>          <!-- IDENT | '"' | "'" -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 12">                                        <!-- IDENT -->
          <xsl:variable name="state" select="p:consumeT(12, $input, $state)"/>      <!-- IDENT -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-QUOTED_STRING($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production declaration (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-declaration-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(66, $input, $state)"/>      <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS | DIMENSION |
                                                                                         '"' | "'" | '-' | 'attr(' | 'url(' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 12">                                   <!-- IDENT -->
              <xsl:variable name="state" select="p:lookahead2(65, $input, $state)"/> <!-- important | S | IDENT | COMMA | '"' | "'" | ')' | '/' | '/*' | ':' |
                                                                                          ';' | '@' | '}' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] eq 25">                                   <!-- '"' -->
              <xsl:variable name="state" select="p:lookahead2(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 537">                            <!-- '"' STRING_CONTENT1 -->
                    <xsl:variable name="state" select="p:lookahead3(6, $input, $state)"/> <!-- '"' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] eq 26">                                   <!-- "'" -->
              <xsl:variable name="state" select="p:lookahead2(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 666">                            <!-- "'" STRING_CONTENT2 -->
                    <xsl:variable name="state" select="p:lookahead3(7, $input, $state)"/> <!-- "'" -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] = 410137                                    (: '&quot;' STRING_CONTENT1 '&quot;' :)
                         or $state[$p:lk] = 426650">                                <!-- "'" STRING_CONTENT2 "'" -->
              <xsl:variable name="state" select="p:memoized($state, 22)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:try-property($input, $state)
                  "/>
                  <xsl:variable name="state" select="p:lookahead1(12, $input, $state)"/> <!-- ':' -->
                  <xsl:variable name="state" select="p:consumeT(36, $input, $state)"/> <!-- ':' -->
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($backtrack, $state, 22, $backtrack[$p:e0], -1, -1)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 22, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] != -1
                      and $state[$p:lk] != 4620">                                   <!-- IDENT ':' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-property($input, $state)
            "/>
            <xsl:variable name="state" select="p:lookahead1(12, $input, $state)"/>  <!-- ':' -->
            <xsl:variable name="state" select="p:consume(36, $input, $state)"/>     <!-- ':' -->
            <xsl:sequence select="p:parse-declaration-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 1st loop of production declaration (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-declaration-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(66, $input, $state)"/>      <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS | DIMENSION |
                                                                                         '"' | "'" | '-' | 'attr(' | 'url(' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 12">                                   <!-- IDENT -->
              <xsl:variable name="state" select="p:lookahead2(65, $input, $state)"/> <!-- important | S | IDENT | COMMA | '"' | "'" | ')' | '/' | '/*' | ':' |
                                                                                          ';' | '@' | '}' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] eq 25">                                   <!-- '"' -->
              <xsl:variable name="state" select="p:lookahead2(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 537">                            <!-- '"' STRING_CONTENT1 -->
                    <xsl:variable name="state" select="p:lookahead3(6, $input, $state)"/> <!-- '"' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] eq 26">                                   <!-- "'" -->
              <xsl:variable name="state" select="p:lookahead2(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 666">                            <!-- "'" STRING_CONTENT2 -->
                    <xsl:variable name="state" select="p:lookahead3(7, $input, $state)"/> <!-- "'" -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] = 410137                                    (: '&quot;' STRING_CONTENT1 '&quot;' :)
                         or $state[$p:lk] = 426650">                                <!-- "'" STRING_CONTENT2 "'" -->
              <xsl:variable name="state" select="p:memoized($state, 22)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:try-property($input, $state)
                  "/>
                  <xsl:variable name="state" select="p:lookahead1(12, $input, $state)"/> <!-- ':' -->
                  <xsl:variable name="state" select="p:consumeT(36, $input, $state)"/> <!-- ':' -->
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($state, $state, 22, $backtrack[$p:e0], -1, -3)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 22, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = -3">
            <xsl:sequence select="p:try-declaration-1($input, $state)"/>
          </xsl:when>
          <xsl:when test="$state[$p:lk] != -1
                      and $state[$p:lk] != 4620">                                   <!-- IDENT ':' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:try-property($input, $state)
            "/>
            <xsl:variable name="state" select="p:lookahead1(12, $input, $state)"/>  <!-- ':' -->
            <xsl:variable name="state" select="p:consumeT(36, $input, $state)"/>    <!-- ':' -->
            <xsl:sequence select="p:try-declaration-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse declaration.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-declaration" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-property($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1(21, $input, $state)"/>          <!-- S | ':' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 6">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(6, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(12, $input, $state)"/>          <!-- ':' -->
    <xsl:variable name="state" select="p:consume(36, $input, $state)"/>             <!-- ':' -->
    <xsl:variable name="state" select="p:parse-declaration-1($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 6">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(6, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-values($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'declaration', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing declaration.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-declaration" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:try-property($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1(21, $input, $state)"/>          <!-- S | ':' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 6">                                         <!-- S -->
          <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/>       <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(12, $input, $state)"/>          <!-- ':' -->
    <xsl:variable name="state" select="p:consumeT(36, $input, $state)"/>            <!-- ':' -->
    <xsl:variable name="state" select="p:try-declaration-1($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 6">                                         <!-- S -->
          <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/>       <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:try-values($input, $state)
    "/>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse mediaquery_selector.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-mediaquery_selector" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:lookahead1(8, $input, $state)"/>           <!-- '(' -->
    <xsl:variable name="state" select="p:consume(27, $input, $state)"/>             <!-- '(' -->
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-declaration($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1(9, $input, $state)"/>           <!-- ')' -->
    <xsl:variable name="state" select="p:consume(28, $input, $state)"/>             <!-- ')' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'mediaquery_selector', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse atrule.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-atrule" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(39, $input, $state)"/>             <!-- '@' -->
    <xsl:variable name="state" select="p:lookahead1(3, $input, $state)"/>           <!-- IDENT -->
    <xsl:variable name="state" select="p:consume(12, $input, $state)"/>             <!-- IDENT -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'atrule', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse negation_arg.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-negation_arg" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] eq 79">                                       <!-- '|' -->
          <xsl:variable name="state" select="p:lookahead2(27, $input, $state)"/>    <!-- IDENT | '*' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = (12,                                          (: IDENT :)
                                         29)">                                      <!-- '*' -->
          <xsl:variable name="state" select="p:lookahead2(30, $input, $state)"/>    <!-- S | ')' | '|' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:lk] = (10124,                                 (: IDENT '|' :)
                                               10141)">                             <!-- '*' '|' -->
                <xsl:variable name="state" select="p:lookahead3(27, $input, $state)"/> <!-- IDENT | '*' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 780                                           (: IDENT S :)
                     or $state[$p:lk] = 1615                                          (: '|' IDENT :)
                     or $state[$p:lk] = 3596                                          (: IDENT ')' :)
                     or $state[$p:lk] = 206732                                        (: IDENT '|' IDENT :)
                     or $state[$p:lk] = 206749">                                    <!-- '*' '|' IDENT -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-type_selector($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 15">                                        <!-- HASH -->
          <xsl:variable name="state" select="p:consume(15, $input, $state)"/>       <!-- HASH -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 33">                                        <!-- '.' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-class($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 46">                                        <!-- '[' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-attrib($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 36">                                        <!-- ':' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-pseudo($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-universal($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'negation_arg', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production negation (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-negation-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(50, $input, $state)"/>      <!-- S | IDENT | HASH | '*' | '.' | ':' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-negation-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production negation (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-negation-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(20, $input, $state)"/>      <!-- S | ')' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-negation-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse negation.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-negation" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(22, $input, $state)"/>             <!-- NOT -->
    <xsl:variable name="state" select="p:parse-negation-1($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-negation_arg($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-negation-2($input, $state)"/>
    <xsl:variable name="state" select="p:consume(28, $input, $state)"/>             <!-- ')' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'negation', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse ATTR.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-ATTR" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(52, $input, $state)"/>             <!-- 'attr(' -->
    <xsl:variable name="state" select="p:lookahead1(3, $input, $state)"/>           <!-- IDENT -->
    <xsl:variable name="state" select="p:consume(12, $input, $state)"/>             <!-- IDENT -->
    <xsl:variable name="state" select="p:lookahead1(9, $input, $state)"/>           <!-- ')' -->
    <xsl:variable name="state" select="p:consume(28, $input, $state)"/>             <!-- ')' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'ATTR', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing ATTR.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-ATTR" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="p:consumeT(52, $input, $state)"/>            <!-- 'attr(' -->
    <xsl:variable name="state" select="p:lookahead1(3, $input, $state)"/>           <!-- IDENT -->
    <xsl:variable name="state" select="p:consumeT(12, $input, $state)"/>            <!-- IDENT -->
    <xsl:variable name="state" select="p:lookahead1(9, $input, $state)"/>           <!-- ')' -->
    <xsl:variable name="state" select="p:consumeT(28, $input, $state)"/>            <!-- ')' -->
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse BARE_URL.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-BARE_URL" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(2, $input, $state)"/>              <!-- BARE_URL_CHARS -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'BARE_URL', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing BARE_URL.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-BARE_URL" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="p:consumeT(2, $input, $state)"/>             <!-- BARE_URL_CHARS -->
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production URL (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-URL-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(17, $input, $state)"/>      <!-- BARE_URL_CHARS | S -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-URL-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 1st loop of production URL (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-URL-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(17, $input, $state)"/>      <!-- BARE_URL_CHARS | S -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/>     <!-- S -->
            <xsl:sequence select="p:try-URL-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production URL (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-URL-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(20, $input, $state)"/>      <!-- S | ')' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-URL-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 2nd loop of production URL (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-URL-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(20, $input, $state)"/>      <!-- S | ')' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/>     <!-- S -->
            <xsl:sequence select="p:try-URL-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse URL.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-URL" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(77, $input, $state)"/>             <!-- 'url(' -->
    <xsl:variable name="state" select="p:lookahead1(34, $input, $state)"/>          <!-- BARE_URL_CHARS | S | '"' | "'" -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 25                                            (: '&quot;' :)
                     or $state[$p:l1] = 26">                                        <!-- "'" -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-QUOTED_STRING($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:parse-URL-1($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-BARE_URL($input, $state)
          "/>
          <xsl:variable name="state" select="p:parse-URL-2($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(9, $input, $state)"/>           <!-- ')' -->
    <xsl:variable name="state" select="p:consume(28, $input, $state)"/>             <!-- ')' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'URL', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing URL.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-URL" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="p:consumeT(77, $input, $state)"/>            <!-- 'url(' -->
    <xsl:variable name="state" select="p:lookahead1(34, $input, $state)"/>          <!-- BARE_URL_CHARS | S | '"' | "'" -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 25                                            (: '&quot;' :)
                     or $state[$p:l1] = 26">                                        <!-- "'" -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-QUOTED_STRING($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:try-URL-1($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-BARE_URL($input, $state)
          "/>
          <xsl:variable name="state" select="p:try-URL-2($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(9, $input, $state)"/>           <!-- ')' -->
    <xsl:variable name="state" select="p:consumeT(28, $input, $state)"/>            <!-- ')' -->
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production expression (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-expression-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(71, $input, $state)"/>      <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS | COMMA |
                                                                                         DIMENSION | '"' | "'" | ')' | '-' | 'attr(' | 'url(' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-expression-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 2nd loop of production expression (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-expression-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(71, $input, $state)"/>      <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS | COMMA |
                                                                                         DIMENSION | '"' | "'" | ')' | '-' | 'attr(' | 'url(' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/>     <!-- S -->
            <xsl:sequence select="p:try-expression-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 1st loop of production expression (one or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-expression-1">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:variable name="state" as="item()+">
        <xsl:choose>
          <xsl:when test="$state[$p:error]">
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 18">                                      <!-- PLUS -->
            <xsl:variable name="state" select="p:consume(18, $input, $state)"/>     <!-- PLUS -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 17">                                      <!-- PERCENTAGE -->
            <xsl:variable name="state" select="p:consume(17, $input, $state)"/>     <!-- PERCENTAGE -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 77">                                      <!-- 'url(' -->
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-URL($input, $state)
            "/>
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 52">                                      <!-- 'attr(' -->
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-ATTR($input, $state)
            "/>
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 16">                                      <!-- HEX -->
            <xsl:variable name="state" select="p:consume(16, $input, $state)"/>     <!-- HEX -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 32">                                      <!-- '-' -->
            <xsl:variable name="state" select="p:consume(32, $input, $state)"/>     <!-- '-' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 23">                                      <!-- DIMENSION -->
            <xsl:variable name="state" select="p:consume(23, $input, $state)"/>     <!-- DIMENSION -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 14">                                      <!-- NUMBER -->
            <xsl:variable name="state" select="p:consume(14, $input, $state)"/>     <!-- NUMBER -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 12">                                      <!-- IDENT -->
            <xsl:variable name="state" select="p:consume(12, $input, $state)"/>     <!-- IDENT -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 20">                                      <!-- COMMA -->
            <xsl:variable name="state" select="p:consume(20, $input, $state)"/>     <!-- COMMA -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 13">                                      <!-- FUNCTION -->
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-functional_pseudo($input, $state)
            "/>
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-QUOTED_STRING($input, $state)
            "/>
            <xsl:sequence select="$state"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:variable name="state" select="p:parse-expression-2($input, $state)"/>
      <xsl:choose>
        <xsl:when test="$state[$p:l1] = 28">                                        <!-- ')' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="p:parse-expression-1($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Try parsing the 1st loop of production expression (one or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-expression-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 18">                                    <!-- PLUS -->
              <xsl:variable name="state" select="p:consumeT(18, $input, $state)"/>  <!-- PLUS -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 17">                                    <!-- PERCENTAGE -->
              <xsl:variable name="state" select="p:consumeT(17, $input, $state)"/>  <!-- PERCENTAGE -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 77">                                    <!-- 'url(' -->
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:try-URL($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 52">                                    <!-- 'attr(' -->
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:try-ATTR($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 16">                                    <!-- HEX -->
              <xsl:variable name="state" select="p:consumeT(16, $input, $state)"/>  <!-- HEX -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 32">                                    <!-- '-' -->
              <xsl:variable name="state" select="p:consumeT(32, $input, $state)"/>  <!-- '-' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 23">                                    <!-- DIMENSION -->
              <xsl:variable name="state" select="p:consumeT(23, $input, $state)"/>  <!-- DIMENSION -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 14">                                    <!-- NUMBER -->
              <xsl:variable name="state" select="p:consumeT(14, $input, $state)"/>  <!-- NUMBER -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 12">                                    <!-- IDENT -->
              <xsl:variable name="state" select="p:consumeT(12, $input, $state)"/>  <!-- IDENT -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 20">                                    <!-- COMMA -->
              <xsl:variable name="state" select="p:consumeT(20, $input, $state)"/>  <!-- COMMA -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 13">                                    <!-- FUNCTION -->
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:try-functional_pseudo($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:try-QUOTED_STRING($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" select="p:try-expression-2($input, $state)"/>
        <xsl:choose>
          <xsl:when test="$state[$p:l1] = 28">                                      <!-- ')' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="p:try-expression-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse expression.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-expression" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:parse-expression-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'expression', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing expression.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-expression" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="p:try-expression-1($input, $state)"/>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production functional_pseudo (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-functional_pseudo-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(71, $input, $state)"/>      <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS | COMMA |
                                                                                         DIMENSION | '"' | "'" | ')' | '-' | 'attr(' | 'url(' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-functional_pseudo-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 1st loop of production functional_pseudo (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-functional_pseudo-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(71, $input, $state)"/>      <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS | COMMA |
                                                                                         DIMENSION | '"' | "'" | ')' | '-' | 'attr(' | 'url(' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/>     <!-- S -->
            <xsl:sequence select="p:try-functional_pseudo-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse functional_pseudo.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-functional_pseudo" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(13, $input, $state)"/>             <!-- FUNCTION -->
    <xsl:variable name="state" select="p:parse-functional_pseudo-1($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] != 28">                                       <!-- ')' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-expression($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:consume(28, $input, $state)"/>             <!-- ')' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'functional_pseudo', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing functional_pseudo.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-functional_pseudo" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="p:consumeT(13, $input, $state)"/>            <!-- FUNCTION -->
    <xsl:variable name="state" select="p:try-functional_pseudo-1($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] != 28">                                       <!-- ')' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-expression($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:consumeT(28, $input, $state)"/>            <!-- ')' -->
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse pseudo.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-pseudo" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(36, $input, $state)"/>             <!-- ':' -->
    <xsl:variable name="state" select="p:lookahead1(32, $input, $state)"/>          <!-- IDENT | FUNCTION | ':' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 36">                                        <!-- ':' -->
          <xsl:variable name="state" select="p:consume(36, $input, $state)"/>       <!-- ':' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(26, $input, $state)"/>          <!-- IDENT | FUNCTION -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 12">                                        <!-- IDENT -->
          <xsl:variable name="state" select="p:consume(12, $input, $state)"/>       <!-- IDENT -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-functional_pseudo($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'pseudo', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse QUOTED_STRING.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-QUOTED_STRING" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 25">                                        <!-- '"' -->
          <xsl:variable name="state" select="p:consume(25, $input, $state)"/>       <!-- '"' -->
          <xsl:variable name="state" select="p:lookahead1(0, $input, $state)"/>     <!-- STRING_CONTENT1 -->
          <xsl:variable name="state" select="p:consume(4, $input, $state)"/>        <!-- STRING_CONTENT1 -->
          <xsl:variable name="state" select="p:lookahead1(6, $input, $state)"/>     <!-- '"' -->
          <xsl:variable name="state" select="p:consume(25, $input, $state)"/>       <!-- '"' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(26, $input, $state)"/>       <!-- "'" -->
          <xsl:variable name="state" select="p:lookahead1(1, $input, $state)"/>     <!-- STRING_CONTENT2 -->
          <xsl:variable name="state" select="p:consume(5, $input, $state)"/>        <!-- STRING_CONTENT2 -->
          <xsl:variable name="state" select="p:lookahead1(7, $input, $state)"/>     <!-- "'" -->
          <xsl:variable name="state" select="p:consume(26, $input, $state)"/>       <!-- "'" -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'QUOTED_STRING', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing QUOTED_STRING.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-QUOTED_STRING" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 25">                                        <!-- '"' -->
          <xsl:variable name="state" select="p:consumeT(25, $input, $state)"/>      <!-- '"' -->
          <xsl:variable name="state" select="p:lookahead1(0, $input, $state)"/>     <!-- STRING_CONTENT1 -->
          <xsl:variable name="state" select="p:consumeT(4, $input, $state)"/>       <!-- STRING_CONTENT1 -->
          <xsl:variable name="state" select="p:lookahead1(6, $input, $state)"/>     <!-- '"' -->
          <xsl:variable name="state" select="p:consumeT(25, $input, $state)"/>      <!-- '"' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consumeT(26, $input, $state)"/>      <!-- "'" -->
          <xsl:variable name="state" select="p:lookahead1(1, $input, $state)"/>     <!-- STRING_CONTENT2 -->
          <xsl:variable name="state" select="p:consumeT(5, $input, $state)"/>       <!-- STRING_CONTENT2 -->
          <xsl:variable name="state" select="p:lookahead1(7, $input, $state)"/>     <!-- "'" -->
          <xsl:variable name="state" select="p:consumeT(26, $input, $state)"/>      <!-- "'" -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production attrib (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-attrib-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(36, $input, $state)"/>      <!-- S | IDENT | '*' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-attrib-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production attrib (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-attrib-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(49, $input, $state)"/>      <!-- S | INCLUDES | DASHMATCH | PREFIXMATCH | SUFFIXMATCH | SUBSTRINGMATCH |
                                                                                         '=' | ']' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-attrib-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 3rd loop of production attrib (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-attrib-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(35, $input, $state)"/>      <!-- S | IDENT | '"' | "'" -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-attrib-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 4th loop of production attrib (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-attrib-4">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(23, $input, $state)"/>      <!-- S | ']' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-attrib-4($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse attrib.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-attrib" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(46, $input, $state)"/>             <!-- '[' -->
    <xsl:variable name="state" select="p:parse-attrib-1($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] eq 12">                                       <!-- IDENT -->
          <xsl:variable name="state" select="p:lookahead2(52, $input, $state)"/>    <!-- S | INCLUDES | DASHMATCH | PREFIXMATCH | SUFFIXMATCH | SUBSTRINGMATCH |
                                                                                         '=' | ']' | '|' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 29                                            (: '*' :)
                     or $state[$p:lk] = 79                                            (: '|' :)
                     or $state[$p:lk] = 10124">                                     <!-- IDENT '|' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-namespace_prefix($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(3, $input, $state)"/>           <!-- IDENT -->
    <xsl:variable name="state" select="p:consume(12, $input, $state)"/>             <!-- IDENT -->
    <xsl:variable name="state" select="p:parse-attrib-2($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] != 47">                                       <!-- ']' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 9">                                   <!-- PREFIXMATCH -->
                <xsl:variable name="state" select="p:consume(9, $input, $state)"/>  <!-- PREFIXMATCH -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 10">                                  <!-- SUFFIXMATCH -->
                <xsl:variable name="state" select="p:consume(10, $input, $state)"/> <!-- SUFFIXMATCH -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 11">                                  <!-- SUBSTRINGMATCH -->
                <xsl:variable name="state" select="p:consume(11, $input, $state)"/> <!-- SUBSTRINGMATCH -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 38">                                  <!-- '=' -->
                <xsl:variable name="state" select="p:consume(38, $input, $state)"/> <!-- '=' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 7">                                   <!-- INCLUDES -->
                <xsl:variable name="state" select="p:consume(7, $input, $state)"/>  <!-- INCLUDES -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="p:consume(8, $input, $state)"/>  <!-- DASHMATCH -->
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-attrib-3($input, $state)"/>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 12">                                  <!-- IDENT -->
                <xsl:variable name="state" select="p:consume(12, $input, $state)"/> <!-- IDENT -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-QUOTED_STRING($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-attrib-4($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:consume(47, $input, $state)"/>             <!-- ']' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'attrib', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse class.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-class" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(33, $input, $state)"/>             <!-- '.' -->
    <xsl:variable name="state" select="p:lookahead1(3, $input, $state)"/>           <!-- IDENT -->
    <xsl:variable name="state" select="p:consume(12, $input, $state)"/>             <!-- IDENT -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'class', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse universal.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-universal" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] eq 29">                                       <!-- '*' -->
          <xsl:variable name="state" select="p:lookahead2(73, $input, $state)"/>    <!-- S | HASH | PLUS | GREATER | COMMA | TILDE | NOT | '(' | ')' | '.' |
                                                                                         '/*' | ':' | '@' | '[' | '{' | '|' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 12                                            (: IDENT :)
                     or $state[$p:lk] = 79                                            (: '|' :)
                     or $state[$p:lk] = 10141">                                     <!-- '*' '|' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-namespace_prefix($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(10, $input, $state)"/>          <!-- '*' -->
    <xsl:variable name="state" select="p:consume(29, $input, $state)"/>             <!-- '*' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'universal', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse element_name.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-element_name" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:lookahead1(3, $input, $state)"/>           <!-- IDENT -->
    <xsl:variable name="state" select="p:consume(12, $input, $state)"/>             <!-- IDENT -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'element_name', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse namespace_prefix.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-namespace_prefix" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] != 79">                                       <!-- '|' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 12">                                  <!-- IDENT -->
                <xsl:variable name="state" select="p:consume(12, $input, $state)"/> <!-- IDENT -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="p:consume(29, $input, $state)"/> <!-- '*' -->
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(15, $input, $state)"/>          <!-- '|' -->
    <xsl:variable name="state" select="p:consume(79, $input, $state)"/>             <!-- '|' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'namespace_prefix', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse type_selector.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-type_selector" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] eq 12">                                       <!-- IDENT -->
          <xsl:variable name="state" select="p:lookahead2(73, $input, $state)"/>    <!-- S | HASH | PLUS | GREATER | COMMA | TILDE | NOT | '(' | ')' | '.' |
                                                                                         '/*' | ':' | '@' | '[' | '{' | '|' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 29                                            (: '*' :)
                     or $state[$p:lk] = 79                                            (: '|' :)
                     or $state[$p:lk] = 10124">                                     <!-- IDENT '|' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-namespace_prefix($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-element_name($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'type_selector', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production simple_selector_sequence (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_selector_sequence-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(70, $input, $state)"/>      <!-- S | HASH | PLUS | GREATER | COMMA | TILDE | NOT | '(' | '.' | '/*' |
                                                                                         ':' | '@' | '[' | '{' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 15                                         (: HASH :)
                      and $state[$p:l1] != 22                                         (: NOT :)
                      and $state[$p:l1] != 27                                         (: '(' :)
                      and $state[$p:l1] != 33                                         (: '.' :)
                      and $state[$p:l1] != 36                                         (: ':' :)
                      and $state[$p:l1] != 39                                         (: '@' :)
                      and $state[$p:l1] != 46">                                     <!-- '[' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 15">                                <!-- HASH -->
                  <xsl:variable name="state" select="p:consume(15, $input, $state)"/> <!-- HASH -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 33">                                <!-- '.' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-class($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 46">                                <!-- '[' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-attrib($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 36">                                <!-- ':' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-pseudo($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 22">                                <!-- NOT -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-negation($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 39">                                <!-- '@' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-atrule($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-mediaquery_selector($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:parse-simple_selector_sequence-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production simple_selector_sequence (one or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_selector_sequence-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 15">                                    <!-- HASH -->
              <xsl:variable name="state" select="p:consume(15, $input, $state)"/>   <!-- HASH -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 33">                                    <!-- '.' -->
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-class($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 46">                                    <!-- '[' -->
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-attrib($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 36">                                    <!-- ':' -->
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-pseudo($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 22">                                    <!-- NOT -->
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-negation($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 39">                                    <!-- '@' -->
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-atrule($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-mediaquery_selector($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" select="p:lookahead1(70, $input, $state)"/>      <!-- S | HASH | PLUS | GREATER | COMMA | TILDE | NOT | '(' | '.' | '/*' |
                                                                                         ':' | '@' | '[' | '{' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 15                                         (: HASH :)
                      and $state[$p:l1] != 22                                         (: NOT :)
                      and $state[$p:l1] != 27                                         (: '(' :)
                      and $state[$p:l1] != 33                                         (: '.' :)
                      and $state[$p:l1] != 36                                         (: ':' :)
                      and $state[$p:l1] != 39                                         (: '@' :)
                      and $state[$p:l1] != 46">                                     <!-- '[' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="p:parse-simple_selector_sequence-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse simple_selector_sequence.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_selector_sequence" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 12                                            (: IDENT :)
                     or $state[$p:l1] = 29                                            (: '*' :)
                     or $state[$p:l1] = 79">                                        <!-- '|' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:l1] eq 79">                                 <!-- '|' -->
                <xsl:variable name="state" select="p:lookahead2(27, $input, $state)"/> <!-- IDENT | '*' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = (12,                                    (: IDENT :)
                                               29)">                                <!-- '*' -->
                <xsl:variable name="state" select="p:lookahead2(72, $input, $state)"/> <!-- S | HASH | PLUS | GREATER | COMMA | TILDE | NOT | '(' | '.' | '/*' |
                                                                                            ':' | '@' | '[' | '{' | '|' -->
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] = (10124,                           (: IDENT '|' :)
                                                     10141)">                       <!-- '*' '|' -->
                      <xsl:variable name="state" select="p:lookahead3(27, $input, $state)"/> <!-- IDENT | '*' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] = 780                                     (: IDENT S :)
                           or $state[$p:lk] = 1615                                    (: '|' IDENT :)
                           or $state[$p:lk] = 1932                                    (: IDENT HASH :)
                           or $state[$p:lk] = 2316                                    (: IDENT PLUS :)
                           or $state[$p:lk] = 2444                                    (: IDENT GREATER :)
                           or $state[$p:lk] = 2572                                    (: IDENT COMMA :)
                           or $state[$p:lk] = 2700                                    (: IDENT TILDE :)
                           or $state[$p:lk] = 2828                                    (: IDENT NOT :)
                           or $state[$p:lk] = 3468                                    (: IDENT '(' :)
                           or $state[$p:lk] = 4236                                    (: IDENT '.' :)
                           or $state[$p:lk] = 4492                                    (: IDENT '/*' :)
                           or $state[$p:lk] = 4620                                    (: IDENT ':' :)
                           or $state[$p:lk] = 5004                                    (: IDENT '@' :)
                           or $state[$p:lk] = 5900                                    (: IDENT '[' :)
                           or $state[$p:lk] = 9996                                    (: IDENT '{' :)
                           or $state[$p:lk] = 206732                                  (: IDENT '|' IDENT :)
                           or $state[$p:lk] = 206749">                              <!-- '*' '|' IDENT -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-type_selector($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-universal($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-simple_selector_sequence-1($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:parse-simple_selector_sequence-2($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'simple_selector_sequence', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production selector (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-selector-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(60, $input, $state)"/> <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | ':' | '@' | '[' | '{' |
                                                                                          '|' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = 20                                          (: COMMA :)
                       or $state[$p:lk] = 35                                          (: '/*' :)
                       or $state[$p:lk] = 78                                          (: '{' :)
                       or $state[$p:lk] = 9990">                                    <!-- S '{' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-combinator($input, $state)
            "/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-simple_selector_sequence($input, $state)
            "/>
            <xsl:sequence select="p:parse-selector-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse selector.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-selector" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-simple_selector_sequence($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-selector-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'selector', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production selectors_group (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-selectors_group-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(56, $input, $state)"/>      <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | ':' | '@' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-selectors_group-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 1st loop of production selectors_group (zero or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-selectors_group-1">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:choose>
        <xsl:when test="$state[$p:l1] != 20                                           (: COMMA :)
                    and $state[$p:l1] != 35">                                       <!-- '/*' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 35">                                  <!-- '/*' -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-COMMENT($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:lookahead1(4, $input, $state)"/>     <!-- COMMA -->
          <xsl:variable name="state" select="p:consume(20, $input, $state)"/>       <!-- COMMA -->
          <xsl:variable name="state" select="p:parse-selectors_group-2($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-selector($input, $state)
          "/>
          <xsl:sequence select="p:parse-selectors_group-1($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Parse selectors_group.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-selectors_group" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-selector($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-selectors_group-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'selectors_group', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production rule (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-rule-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(44, $input, $state)"/>      <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 774">                            <!-- S S -->
                    <xsl:variable name="state" select="p:lookahead3(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 1542">                           <!-- S IDENT -->
                    <xsl:variable name="state" select="p:lookahead3(21, $input, $state)"/> <!-- S | ':' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 3206">                           <!-- S '"' -->
                    <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 3334">                           <!-- S "'" -->
                    <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 10246">                          <!-- S '}' -->
                    <xsl:variable name="state" select="p:lookahead3(78, $input, $state)"/> <!-- END | S | IDENT | HASH | NOT | '"' | "'" | '(' | '*' | '.' |
                                                                                                '/*' | ':' | '@' | '@charset' | '@import' | '@media' |
                                                                                                '@media print' | '@namespace' | '@page' | '[' | '|' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] != 12                                       (: IDENT :)
                        and $state[$p:lk] != 25                                       (: '&quot;' :)
                        and $state[$p:lk] != 26                                       (: &quot;'&quot; :)
                        and $state[$p:lk] != 35                                       (: '/*' :)
                        and $state[$p:lk] != 80                                       (: '}' :)
                        and $state[$p:lk] != 4486                                     (: S '/*' :)
                        and $state[$p:lk] != 419846                                   (: S '}' '&quot;' :)
                        and $state[$p:lk] != 436230                                   (: S '}' &quot;'&quot; :)
                        and $state[$p:lk] != 574214">                               <!-- S S '/*' -->
              <xsl:variable name="state" select="p:memoized($state, 1)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($backtrack, $state, 1, $backtrack[$p:e0], -1, -1)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 1, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] != -1
                      and $state[$p:lk] != 4486                                       (: S '/*' :)
                      and $state[$p:lk] != 574214">                                 <!-- S S '/*' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-rule-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 3rd loop of production rule (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-rule-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(35, $input, $state)"/>      <!-- S | IDENT | '"' | "'" -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-rule-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 3rd loop of production rule (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-rule-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(35, $input, $state)"/>      <!-- S | IDENT | '"' | "'" -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/>     <!-- S -->
            <xsl:sequence select="p:try-rule-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 4th loop of production rule (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-rule-4">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(47, $input, $state)"/>      <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(47, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] eq 37">                                   <!-- ';' -->
              <xsl:variable name="state" select="p:lookahead2(47, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 805">                            <!-- ';' S -->
                    <xsl:variable name="state" select="p:lookahead3(47, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 4517">                           <!-- ';' '/*' -->
                    <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 10277">                          <!-- ';' '}' -->
                    <xsl:variable name="state" select="p:lookahead3(77, $input, $state)"/> <!-- END | S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' |
                                                                                                '@' | '@charset' | '@import' | '@media' | '@media print' |
                                                                                                '@namespace' | '@page' | '[' | '|' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] != 12                                       (: IDENT :)
                        and $state[$p:lk] != 25                                       (: '&quot;' :)
                        and $state[$p:lk] != 26                                       (: &quot;'&quot; :)
                        and $state[$p:lk] != 35                                       (: '/*' :)
                        and $state[$p:lk] != 80                                       (: '}' :)
                        and $state[$p:lk] != 774                                      (: S S :)
                        and $state[$p:lk] != 1542                                     (: S IDENT :)
                        and $state[$p:lk] != 1573                                     (: ';' IDENT :)
                        and $state[$p:lk] != 3206                                     (: S '&quot;' :)
                        and $state[$p:lk] != 3237                                     (: ';' '&quot;' :)
                        and $state[$p:lk] != 3334                                     (: S &quot;'&quot; :)
                        and $state[$p:lk] != 3365                                     (: ';' &quot;'&quot; :)
                        and $state[$p:lk] != 4486                                     (: S '/*' :)
                        and $state[$p:lk] != 4742                                     (: S ';' :)
                        and $state[$p:lk] != 4773                                     (: ';' ';' :)
                        and $state[$p:lk] != 10246                                    (: S '}' :)
                        and $state[$p:lk] != 197413                                   (: ';' S IDENT :)
                        and $state[$p:lk] != 410405                                   (: ';' S '&quot;' :)
                        and $state[$p:lk] != 426789                                   (: ';' S &quot;'&quot; :)
                        and $state[$p:lk] != 607013">                               <!-- ';' S ';' -->
              <xsl:variable name="state" select="p:memoized($state, 3)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 6">                           <!-- S -->
                        <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" select="p:lookahead1(13, $input, $state)"/> <!-- ';' -->
                  <xsl:variable name="state" select="p:consumeT(37, $input, $state)"/> <!-- ';' -->
                  <xsl:variable name="state" select="p:lookahead1(47, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:l1] eq 6">                          <!-- S -->
                        <xsl:variable name="state" select="p:lookahead2(47, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 1542">                 <!-- S IDENT -->
                              <xsl:variable name="state" select="p:lookahead3(21, $input, $state)"/> <!-- S | ':' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 3206">                 <!-- S '"' -->
                              <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 3334">                 <!-- S "'" -->
                              <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 4486">                 <!-- S '/*' -->
                              <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 10246">                <!-- S '}' -->
                              <xsl:variable name="state" select="p:lookahead3(77, $input, $state)"/> <!-- END | S | IDENT | HASH | NOT | '(' | '*' | '.' |
                                                                                                          '/*' | ':' | '@' | '@charset' | '@import' | '@media' |
                                                                                                          '@media print' | '@namespace' | '@page' | '[' | '|' |
                                                                                                          '}' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] = (774,                     (: S S :)
                                                             4742)">                <!-- S ';' -->
                              <xsl:variable name="state" select="p:lookahead3(47, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] != 12                             (: IDENT :)
                                  and $state[$p:lk] != 25                             (: '&quot;' :)
                                  and $state[$p:lk] != 26                             (: &quot;'&quot; :)
                                  and $state[$p:lk] != 35                             (: '/*' :)
                                  and $state[$p:lk] != 37                             (: ';' :)
                                  and $state[$p:lk] != 80                             (: '}' :)
                                  and $state[$p:lk] != 574214                         (: S S '/*' :)
                                  and $state[$p:lk] != 606982">                     <!-- S S ';' -->
                        <xsl:variable name="state" select="p:memoized($state, 4)"/>
                        <xsl:choose>
                          <xsl:when test="$state[$p:lk] != 0">
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:variable name="backtrack" select="$state"/>
                            <xsl:variable name="state" select="p:strip-result($state)"/>
                            <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                            <xsl:choose>
                              <xsl:when test="not($state[$p:error])">
                                <xsl:sequence select="p:memoize($backtrack, $state, 4, $backtrack[$p:e0], -1, -1)"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:sequence select="p:memoize($backtrack, $state, 4, $backtrack[$p:e0], -2, -2)"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] = -1
                                   or $state[$p:lk] = 574214                          (: S S '/*' :)
                                   or $state[$p:lk] = 606982">                      <!-- S S ';' -->
                        <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" select="p:lookahead1(47, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:l1] eq 12">                         <!-- IDENT -->
                        <xsl:variable name="state" select="p:lookahead2(21, $input, $state)"/> <!-- S | ':' -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 780">                  <!-- IDENT S -->
                              <xsl:variable name="state" select="p:lookahead3(12, $input, $state)"/> <!-- ':' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 4620">                 <!-- IDENT ':' -->
                              <xsl:variable name="state" select="p:lookahead3(66, $input, $state)"/> <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE |
                                                                                                          PLUS | DIMENSION | '"' | "'" | '-' | 'attr(' |
                                                                                                          'url(' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] eq 25">                         <!-- '"' -->
                        <xsl:variable name="state" select="p:lookahead2(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 537">                  <!-- '"' STRING_CONTENT1 -->
                              <xsl:variable name="state" select="p:lookahead3(6, $input, $state)"/> <!-- '"' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] eq 26">                         <!-- "'" -->
                        <xsl:variable name="state" select="p:lookahead2(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 666">                  <!-- "'" STRING_CONTENT2 -->
                              <xsl:variable name="state" select="p:lookahead3(7, $input, $state)"/> <!-- "'" -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] != 6                              (: S :)
                                  and $state[$p:lk] != 35                             (: '/*' :)
                                  and $state[$p:lk] != 37                             (: ';' :)
                                  and $state[$p:lk] != 80">                         <!-- '}' -->
                        <xsl:variable name="state" select="p:memoized($state, 5)"/>
                        <xsl:choose>
                          <xsl:when test="$state[$p:lk] != 0">
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:variable name="backtrack" select="$state"/>
                            <xsl:variable name="state" select="p:strip-result($state)"/>
                            <xsl:variable name="state" select="
                              if ($state[$p:error]) then
                                $state
                              else
                                p:try-declaration($input, $state)
                            "/>
                            <xsl:choose>
                              <xsl:when test="not($state[$p:error])">
                                <xsl:sequence select="p:memoize($backtrack, $state, 5, $backtrack[$p:e0], -1, -1)"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:sequence select="p:memoize($backtrack, $state, 5, $backtrack[$p:e0], -2, -2)"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] = -1">
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-declaration($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($backtrack, $state, 3, $backtrack[$p:e0], -1, -1)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 3, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] != -1
                      and $state[$p:lk] != 1573                                       (: ';' IDENT :)
                      and $state[$p:lk] != 3237                                       (: ';' '&quot;' :)
                      and $state[$p:lk] != 3365                                       (: ';' &quot;'&quot; :)
                      and $state[$p:lk] != 4742                                       (: S ';' :)
                      and $state[$p:lk] != 4773                                       (: ';' ';' :)
                      and $state[$p:lk] != 197413                                     (: ';' S IDENT :)
                      and $state[$p:lk] != 410405                                     (: ';' S '&quot;' :)
                      and $state[$p:lk] != 426789                                     (: ';' S &quot;'&quot; :)
                      and $state[$p:lk] != 607013">                                 <!-- ';' S ';' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 6">                                 <!-- S -->
                  <xsl:variable name="state" select="p:consume(6, $input, $state)"/> <!-- S -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="p:lookahead1(13, $input, $state)"/>  <!-- ';' -->
            <xsl:variable name="state" select="p:consume(37, $input, $state)"/>     <!-- ';' -->
            <xsl:variable name="state" select="p:lookahead1(47, $input, $state)"/>  <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:l1] eq 6">                                <!-- S -->
                  <xsl:variable name="state" select="p:lookahead2(47, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 1542">                       <!-- S IDENT -->
                        <xsl:variable name="state" select="p:lookahead3(21, $input, $state)"/> <!-- S | ':' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 3206">                       <!-- S '"' -->
                        <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 3334">                       <!-- S "'" -->
                        <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 4486">                       <!-- S '/*' -->
                        <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 10246">                      <!-- S '}' -->
                        <xsl:variable name="state" select="p:lookahead3(77, $input, $state)"/> <!-- END | S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' |
                                                                                                    ':' | '@' | '@charset' | '@import' | '@media' |
                                                                                                    '@media print' | '@namespace' | '@page' | '[' | '|' |
                                                                                                    '}' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] = (774,                           (: S S :)
                                                       4742)">                      <!-- S ';' -->
                        <xsl:variable name="state" select="p:lookahead3(47, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] != 12                                   (: IDENT :)
                            and $state[$p:lk] != 25                                   (: '&quot;' :)
                            and $state[$p:lk] != 26                                   (: &quot;'&quot; :)
                            and $state[$p:lk] != 35                                   (: '/*' :)
                            and $state[$p:lk] != 37                                   (: ';' :)
                            and $state[$p:lk] != 80                                   (: '}' :)
                            and $state[$p:lk] != 574214                               (: S S '/*' :)
                            and $state[$p:lk] != 606982">                           <!-- S S ';' -->
                  <xsl:variable name="state" select="p:memoized($state, 4)"/>
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] != 0">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:variable name="backtrack" select="$state"/>
                      <xsl:variable name="state" select="p:strip-result($state)"/>
                      <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                      <xsl:choose>
                        <xsl:when test="not($state[$p:error])">
                          <xsl:sequence select="p:memoize($backtrack, $state, 4, $backtrack[$p:e0], -1, -1)"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:sequence select="p:memoize($backtrack, $state, 4, $backtrack[$p:e0], -2, -2)"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] = -1
                             or $state[$p:lk] = 574214                                (: S S '/*' :)
                             or $state[$p:lk] = 606982">                            <!-- S S ';' -->
                  <xsl:variable name="state" select="p:consume(6, $input, $state)"/> <!-- S -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="p:lookahead1(47, $input, $state)"/>  <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:l1] eq 12">                               <!-- IDENT -->
                  <xsl:variable name="state" select="p:lookahead2(21, $input, $state)"/> <!-- S | ':' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 780">                        <!-- IDENT S -->
                        <xsl:variable name="state" select="p:lookahead3(12, $input, $state)"/> <!-- ':' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 4620">                       <!-- IDENT ':' -->
                        <xsl:variable name="state" select="p:lookahead3(66, $input, $state)"/> <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS |
                                                                                                    DIMENSION | '"' | "'" | '-' | 'attr(' | 'url(' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] eq 25">                               <!-- '"' -->
                  <xsl:variable name="state" select="p:lookahead2(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 537">                        <!-- '"' STRING_CONTENT1 -->
                        <xsl:variable name="state" select="p:lookahead3(6, $input, $state)"/> <!-- '"' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] eq 26">                               <!-- "'" -->
                  <xsl:variable name="state" select="p:lookahead2(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 666">                        <!-- "'" STRING_CONTENT2 -->
                        <xsl:variable name="state" select="p:lookahead3(7, $input, $state)"/> <!-- "'" -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] != 6                                    (: S :)
                            and $state[$p:lk] != 35                                   (: '/*' :)
                            and $state[$p:lk] != 37                                   (: ';' :)
                            and $state[$p:lk] != 80">                               <!-- '}' -->
                  <xsl:variable name="state" select="p:memoized($state, 5)"/>
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] != 0">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:variable name="backtrack" select="$state"/>
                      <xsl:variable name="state" select="p:strip-result($state)"/>
                      <xsl:variable name="state" select="
                        if ($state[$p:error]) then
                          $state
                        else
                          p:try-declaration($input, $state)
                      "/>
                      <xsl:choose>
                        <xsl:when test="not($state[$p:error])">
                          <xsl:sequence select="p:memoize($backtrack, $state, 5, $backtrack[$p:e0], -1, -1)"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:sequence select="p:memoize($backtrack, $state, 5, $backtrack[$p:e0], -2, -2)"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] = -1">
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-declaration($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:parse-rule-4($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 4th loop of production rule (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-rule-4">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(47, $input, $state)"/>      <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(47, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] eq 37">                                   <!-- ';' -->
              <xsl:variable name="state" select="p:lookahead2(47, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 805">                            <!-- ';' S -->
                    <xsl:variable name="state" select="p:lookahead3(47, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 4517">                           <!-- ';' '/*' -->
                    <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 10277">                          <!-- ';' '}' -->
                    <xsl:variable name="state" select="p:lookahead3(77, $input, $state)"/> <!-- END | S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' |
                                                                                                '@' | '@charset' | '@import' | '@media' | '@media print' |
                                                                                                '@namespace' | '@page' | '[' | '|' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] != 12                                       (: IDENT :)
                        and $state[$p:lk] != 25                                       (: '&quot;' :)
                        and $state[$p:lk] != 26                                       (: &quot;'&quot; :)
                        and $state[$p:lk] != 35                                       (: '/*' :)
                        and $state[$p:lk] != 80                                       (: '}' :)
                        and $state[$p:lk] != 774                                      (: S S :)
                        and $state[$p:lk] != 1542                                     (: S IDENT :)
                        and $state[$p:lk] != 1573                                     (: ';' IDENT :)
                        and $state[$p:lk] != 3206                                     (: S '&quot;' :)
                        and $state[$p:lk] != 3237                                     (: ';' '&quot;' :)
                        and $state[$p:lk] != 3334                                     (: S &quot;'&quot; :)
                        and $state[$p:lk] != 3365                                     (: ';' &quot;'&quot; :)
                        and $state[$p:lk] != 4486                                     (: S '/*' :)
                        and $state[$p:lk] != 4742                                     (: S ';' :)
                        and $state[$p:lk] != 4773                                     (: ';' ';' :)
                        and $state[$p:lk] != 10246                                    (: S '}' :)
                        and $state[$p:lk] != 197413                                   (: ';' S IDENT :)
                        and $state[$p:lk] != 410405                                   (: ';' S '&quot;' :)
                        and $state[$p:lk] != 426789                                   (: ';' S &quot;'&quot; :)
                        and $state[$p:lk] != 607013">                               <!-- ';' S ';' -->
              <xsl:variable name="state" select="p:memoized($state, 3)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 6">                           <!-- S -->
                        <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" select="p:lookahead1(13, $input, $state)"/> <!-- ';' -->
                  <xsl:variable name="state" select="p:consumeT(37, $input, $state)"/> <!-- ';' -->
                  <xsl:variable name="state" select="p:lookahead1(47, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:l1] eq 6">                          <!-- S -->
                        <xsl:variable name="state" select="p:lookahead2(47, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 1542">                 <!-- S IDENT -->
                              <xsl:variable name="state" select="p:lookahead3(21, $input, $state)"/> <!-- S | ':' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 3206">                 <!-- S '"' -->
                              <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 3334">                 <!-- S "'" -->
                              <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 4486">                 <!-- S '/*' -->
                              <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 10246">                <!-- S '}' -->
                              <xsl:variable name="state" select="p:lookahead3(77, $input, $state)"/> <!-- END | S | IDENT | HASH | NOT | '(' | '*' | '.' |
                                                                                                          '/*' | ':' | '@' | '@charset' | '@import' | '@media' |
                                                                                                          '@media print' | '@namespace' | '@page' | '[' | '|' |
                                                                                                          '}' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] = (774,                     (: S S :)
                                                             4742)">                <!-- S ';' -->
                              <xsl:variable name="state" select="p:lookahead3(47, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] != 12                             (: IDENT :)
                                  and $state[$p:lk] != 25                             (: '&quot;' :)
                                  and $state[$p:lk] != 26                             (: &quot;'&quot; :)
                                  and $state[$p:lk] != 35                             (: '/*' :)
                                  and $state[$p:lk] != 37                             (: ';' :)
                                  and $state[$p:lk] != 80                             (: '}' :)
                                  and $state[$p:lk] != 574214                         (: S S '/*' :)
                                  and $state[$p:lk] != 606982">                     <!-- S S ';' -->
                        <xsl:variable name="state" select="p:memoized($state, 4)"/>
                        <xsl:choose>
                          <xsl:when test="$state[$p:lk] != 0">
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:variable name="backtrack" select="$state"/>
                            <xsl:variable name="state" select="p:strip-result($state)"/>
                            <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                            <xsl:choose>
                              <xsl:when test="not($state[$p:error])">
                                <xsl:sequence select="p:memoize($backtrack, $state, 4, $backtrack[$p:e0], -1, -1)"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:sequence select="p:memoize($backtrack, $state, 4, $backtrack[$p:e0], -2, -2)"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] = -1
                                   or $state[$p:lk] = 574214                          (: S S '/*' :)
                                   or $state[$p:lk] = 606982">                      <!-- S S ';' -->
                        <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" select="p:lookahead1(47, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:l1] eq 12">                         <!-- IDENT -->
                        <xsl:variable name="state" select="p:lookahead2(21, $input, $state)"/> <!-- S | ':' -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 780">                  <!-- IDENT S -->
                              <xsl:variable name="state" select="p:lookahead3(12, $input, $state)"/> <!-- ':' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 4620">                 <!-- IDENT ':' -->
                              <xsl:variable name="state" select="p:lookahead3(66, $input, $state)"/> <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE |
                                                                                                          PLUS | DIMENSION | '"' | "'" | '-' | 'attr(' |
                                                                                                          'url(' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] eq 25">                         <!-- '"' -->
                        <xsl:variable name="state" select="p:lookahead2(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 537">                  <!-- '"' STRING_CONTENT1 -->
                              <xsl:variable name="state" select="p:lookahead3(6, $input, $state)"/> <!-- '"' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] eq 26">                         <!-- "'" -->
                        <xsl:variable name="state" select="p:lookahead2(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 666">                  <!-- "'" STRING_CONTENT2 -->
                              <xsl:variable name="state" select="p:lookahead3(7, $input, $state)"/> <!-- "'" -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] != 6                              (: S :)
                                  and $state[$p:lk] != 35                             (: '/*' :)
                                  and $state[$p:lk] != 37                             (: ';' :)
                                  and $state[$p:lk] != 80">                         <!-- '}' -->
                        <xsl:variable name="state" select="p:memoized($state, 5)"/>
                        <xsl:choose>
                          <xsl:when test="$state[$p:lk] != 0">
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:variable name="backtrack" select="$state"/>
                            <xsl:variable name="state" select="p:strip-result($state)"/>
                            <xsl:variable name="state" select="
                              if ($state[$p:error]) then
                                $state
                              else
                                p:try-declaration($input, $state)
                            "/>
                            <xsl:choose>
                              <xsl:when test="not($state[$p:error])">
                                <xsl:sequence select="p:memoize($backtrack, $state, 5, $backtrack[$p:e0], -1, -1)"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:sequence select="p:memoize($backtrack, $state, 5, $backtrack[$p:e0], -2, -2)"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] = -1">
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-declaration($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($state, $state, 3, $backtrack[$p:e0], -1, -3)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 3, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = -3">
            <xsl:sequence select="p:try-rule-4($input, $state)"/>
          </xsl:when>
          <xsl:when test="$state[$p:lk] != -1
                      and $state[$p:lk] != 1573                                       (: ';' IDENT :)
                      and $state[$p:lk] != 3237                                       (: ';' '&quot;' :)
                      and $state[$p:lk] != 3365                                       (: ';' &quot;'&quot; :)
                      and $state[$p:lk] != 4742                                       (: S ';' :)
                      and $state[$p:lk] != 4773                                       (: ';' ';' :)
                      and $state[$p:lk] != 197413                                     (: ';' S IDENT :)
                      and $state[$p:lk] != 410405                                     (: ';' S '&quot;' :)
                      and $state[$p:lk] != 426789                                     (: ';' S &quot;'&quot; :)
                      and $state[$p:lk] != 607013">                                 <!-- ';' S ';' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 6">                                 <!-- S -->
                  <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="p:lookahead1(13, $input, $state)"/>  <!-- ';' -->
            <xsl:variable name="state" select="p:consumeT(37, $input, $state)"/>    <!-- ';' -->
            <xsl:variable name="state" select="p:lookahead1(47, $input, $state)"/>  <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:l1] eq 6">                                <!-- S -->
                  <xsl:variable name="state" select="p:lookahead2(47, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 1542">                       <!-- S IDENT -->
                        <xsl:variable name="state" select="p:lookahead3(21, $input, $state)"/> <!-- S | ':' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 3206">                       <!-- S '"' -->
                        <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 3334">                       <!-- S "'" -->
                        <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 4486">                       <!-- S '/*' -->
                        <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 10246">                      <!-- S '}' -->
                        <xsl:variable name="state" select="p:lookahead3(77, $input, $state)"/> <!-- END | S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' |
                                                                                                    ':' | '@' | '@charset' | '@import' | '@media' |
                                                                                                    '@media print' | '@namespace' | '@page' | '[' | '|' |
                                                                                                    '}' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] = (774,                           (: S S :)
                                                       4742)">                      <!-- S ';' -->
                        <xsl:variable name="state" select="p:lookahead3(47, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] != 12                                   (: IDENT :)
                            and $state[$p:lk] != 25                                   (: '&quot;' :)
                            and $state[$p:lk] != 26                                   (: &quot;'&quot; :)
                            and $state[$p:lk] != 35                                   (: '/*' :)
                            and $state[$p:lk] != 37                                   (: ';' :)
                            and $state[$p:lk] != 80                                   (: '}' :)
                            and $state[$p:lk] != 574214                               (: S S '/*' :)
                            and $state[$p:lk] != 606982">                           <!-- S S ';' -->
                  <xsl:variable name="state" select="p:memoized($state, 4)"/>
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] != 0">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:variable name="backtrack" select="$state"/>
                      <xsl:variable name="state" select="p:strip-result($state)"/>
                      <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                      <xsl:choose>
                        <xsl:when test="not($state[$p:error])">
                          <xsl:sequence select="p:memoize($backtrack, $state, 4, $backtrack[$p:e0], -1, -1)"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:sequence select="p:memoize($backtrack, $state, 4, $backtrack[$p:e0], -2, -2)"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] = -1
                             or $state[$p:lk] = 574214                                (: S S '/*' :)
                             or $state[$p:lk] = 606982">                            <!-- S S ';' -->
                  <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="p:lookahead1(47, $input, $state)"/>  <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:l1] eq 12">                               <!-- IDENT -->
                  <xsl:variable name="state" select="p:lookahead2(21, $input, $state)"/> <!-- S | ':' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 780">                        <!-- IDENT S -->
                        <xsl:variable name="state" select="p:lookahead3(12, $input, $state)"/> <!-- ':' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 4620">                       <!-- IDENT ':' -->
                        <xsl:variable name="state" select="p:lookahead3(66, $input, $state)"/> <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS |
                                                                                                    DIMENSION | '"' | "'" | '-' | 'attr(' | 'url(' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] eq 25">                               <!-- '"' -->
                  <xsl:variable name="state" select="p:lookahead2(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 537">                        <!-- '"' STRING_CONTENT1 -->
                        <xsl:variable name="state" select="p:lookahead3(6, $input, $state)"/> <!-- '"' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] eq 26">                               <!-- "'" -->
                  <xsl:variable name="state" select="p:lookahead2(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 666">                        <!-- "'" STRING_CONTENT2 -->
                        <xsl:variable name="state" select="p:lookahead3(7, $input, $state)"/> <!-- "'" -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] != 6                                    (: S :)
                            and $state[$p:lk] != 35                                   (: '/*' :)
                            and $state[$p:lk] != 37                                   (: ';' :)
                            and $state[$p:lk] != 80">                               <!-- '}' -->
                  <xsl:variable name="state" select="p:memoized($state, 5)"/>
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] != 0">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:variable name="backtrack" select="$state"/>
                      <xsl:variable name="state" select="p:strip-result($state)"/>
                      <xsl:variable name="state" select="
                        if ($state[$p:error]) then
                          $state
                        else
                          p:try-declaration($input, $state)
                      "/>
                      <xsl:choose>
                        <xsl:when test="not($state[$p:error])">
                          <xsl:sequence select="p:memoize($backtrack, $state, 5, $backtrack[$p:e0], -1, -1)"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:sequence select="p:memoize($backtrack, $state, 5, $backtrack[$p:e0], -2, -2)"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] = -1">
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:try-declaration($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:try-rule-4($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 2nd loop of production rule (zero or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-rule-2">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:variable name="state" select="p:lookahead1(44, $input, $state)"/>        <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
      <xsl:variable name="state" as="item()+">
        <xsl:choose>
          <xsl:when test="$state[$p:l1] eq 6">                                      <!-- S -->
            <xsl:variable name="state" select="p:lookahead2(42, $input, $state)"/>  <!-- S | IDENT | '"' | "'" | '}' -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:lk] eq 774">                              <!-- S S -->
                  <xsl:variable name="state" select="p:lookahead3(42, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '}' -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] eq 35">                                     <!-- '/*' -->
            <xsl:variable name="state" select="p:lookahead2(5, $input, $state)"/>   <!-- CommentContents -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:lk] eq 3107">                             <!-- '/*' CommentContents -->
                  <xsl:variable name="state" select="p:lookahead3(11, $input, $state)"/> <!-- '*/' -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:variable name="state" as="item()+">
        <xsl:choose>
          <xsl:when test="$state[$p:error]">
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:lk] = 99078                                       (: S S S :)
                       or $state[$p:lk] = 494627">                                  <!-- '/*' CommentContents '*/' -->
            <xsl:variable name="state" select="p:memoized($state, 2)"/>
            <xsl:choose>
              <xsl:when test="$state[$p:lk] != 0">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="backtrack" select="$state"/>
                <xsl:variable name="state" select="p:strip-result($state)"/>
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:error]">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:l1] = 35">                            <!-- '/*' -->
                      <xsl:variable name="state" select="
                        if ($state[$p:error]) then
                          $state
                        else
                          p:try-COMMENT($input, $state)
                      "/>
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:variable name="state" select="p:try-rule-3($input, $state)"/>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:try-declaration($input, $state)
                "/>
                <xsl:variable name="state" select="p:try-rule-4($input, $state)"/>
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:error]">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:l1] = 37">                            <!-- ';' -->
                      <xsl:variable name="state" select="p:consumeT(37, $input, $state)"/> <!-- ';' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:variable name="state" select="p:lookahead1(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:l1] eq 6">                            <!-- S -->
                      <xsl:variable name="state" select="p:lookahead2(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
                      <xsl:variable name="state" as="item()+">
                        <xsl:choose>
                          <xsl:when test="$state[$p:lk] eq 774">                    <!-- S S -->
                            <xsl:variable name="state" select="p:lookahead3(42, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '}' -->
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:when test="$state[$p:lk] eq 1542">                   <!-- S IDENT -->
                            <xsl:variable name="state" select="p:lookahead3(21, $input, $state)"/> <!-- S | ':' -->
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:when test="$state[$p:lk] eq 3206">                   <!-- S '"' -->
                            <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:when test="$state[$p:lk] eq 3334">                   <!-- S "'" -->
                            <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:when test="$state[$p:lk] eq 10246">                  <!-- S '}' -->
                            <xsl:variable name="state" select="p:lookahead3(77, $input, $state)"/> <!-- END | S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' |
                                                                                                        ':' | '@' | '@charset' | '@import' | '@media' |
                                                                                                        '@media print' | '@namespace' | '@page' | '[' | '|' |
                                                                                                        '}' -->
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:sequence select="$state"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:variable>
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:error]">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] != 12                               (: IDENT :)
                                and $state[$p:lk] != 25                               (: '&quot;' :)
                                and $state[$p:lk] != 26                               (: &quot;'&quot; :)
                                and $state[$p:lk] != 35                               (: '/*' :)
                                and $state[$p:lk] != 80                               (: '}' :)
                                and $state[$p:lk] != 4486">                         <!-- S '/*' -->
                      <xsl:variable name="state" select="p:memoized($state, 6)"/>
                      <xsl:choose>
                        <xsl:when test="$state[$p:lk] != 0">
                          <xsl:sequence select="$state"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:variable name="backtrack" select="$state"/>
                          <xsl:variable name="state" select="p:strip-result($state)"/>
                          <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                          <xsl:choose>
                            <xsl:when test="not($state[$p:error])">
                              <xsl:sequence select="p:memoize($backtrack, $state, 6, $backtrack[$p:e0], -1, -1)"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="p:memoize($backtrack, $state, 6, $backtrack[$p:e0], -2, -2)"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:error]">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] = -1
                                 or $state[$p:lk] = 4486">                          <!-- S '/*' -->
                      <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:choose>
                  <xsl:when test="not($state[$p:error])">
                    <xsl:sequence select="p:memoize($backtrack, $state, 2, $backtrack[$p:e0], -1, -1)"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="p:memoize($backtrack, $state, 2, $backtrack[$p:e0], -2, -2)"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="$state"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:choose>
        <xsl:when test="$state[$p:lk] = -2
                     or $state[$p:lk] = 80                                            (: '}' :)
                     or $state[$p:lk] = 10246                                         (: S '}' :)
                     or $state[$p:lk] = 1311494">                                   <!-- S S '}' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 35">                                  <!-- '/*' -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-COMMENT($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-rule-3($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-declaration($input, $state)
          "/>
          <xsl:variable name="state" select="p:parse-rule-4($input, $state)"/>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 37">                                  <!-- ';' -->
                <xsl:variable name="state" select="p:consume(37, $input, $state)"/> <!-- ';' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:lookahead1(44, $input, $state)"/>    <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:l1] eq 6">                                  <!-- S -->
                <xsl:variable name="state" select="p:lookahead2(44, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] eq 774">                          <!-- S S -->
                      <xsl:variable name="state" select="p:lookahead3(42, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '}' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] eq 1542">                         <!-- S IDENT -->
                      <xsl:variable name="state" select="p:lookahead3(21, $input, $state)"/> <!-- S | ':' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] eq 3206">                         <!-- S '"' -->
                      <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] eq 3334">                         <!-- S "'" -->
                      <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] eq 10246">                        <!-- S '}' -->
                      <xsl:variable name="state" select="p:lookahead3(77, $input, $state)"/> <!-- END | S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' |
                                                                                                  '@' | '@charset' | '@import' | '@media' | '@media print' |
                                                                                                  '@namespace' | '@page' | '[' | '|' | '}' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] != 12                                     (: IDENT :)
                          and $state[$p:lk] != 25                                     (: '&quot;' :)
                          and $state[$p:lk] != 26                                     (: &quot;'&quot; :)
                          and $state[$p:lk] != 35                                     (: '/*' :)
                          and $state[$p:lk] != 80                                     (: '}' :)
                          and $state[$p:lk] != 4486">                               <!-- S '/*' -->
                <xsl:variable name="state" select="p:memoized($state, 6)"/>
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] != 0">
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:variable name="backtrack" select="$state"/>
                    <xsl:variable name="state" select="p:strip-result($state)"/>
                    <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                    <xsl:choose>
                      <xsl:when test="not($state[$p:error])">
                        <xsl:sequence select="p:memoize($backtrack, $state, 6, $backtrack[$p:e0], -1, -1)"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="p:memoize($backtrack, $state, 6, $backtrack[$p:e0], -2, -2)"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] = -1
                           or $state[$p:lk] = 4486">                                <!-- S '/*' -->
                <xsl:variable name="state" select="p:consume(6, $input, $state)"/>  <!-- S -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="p:parse-rule-2($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Parse the 5th loop of production rule (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-rule-5">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(31, $input, $state)"/>      <!-- S | '/*' | '}' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 35">                                     <!-- '/*' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-COMMENT($input, $state)
            "/>
            <xsl:sequence select="p:parse-rule-5($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 6th loop of production rule (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-rule-6">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(25, $input, $state)"/>      <!-- S | '}' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-rule-6($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse rule.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-rule" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-selectors_group($input, $state)
    "/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 6">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(6, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(14, $input, $state)"/>          <!-- '{' -->
    <xsl:variable name="state" select="p:consume(78, $input, $state)"/>             <!-- '{' -->
    <xsl:variable name="state" select="p:parse-rule-1($input, $state)"/>
    <xsl:variable name="state" select="p:parse-rule-2($input, $state)"/>
    <xsl:variable name="state" select="p:parse-rule-5($input, $state)"/>
    <xsl:variable name="state" select="p:parse-rule-6($input, $state)"/>
    <xsl:variable name="state" select="p:consume(80, $input, $state)"/>             <!-- '}' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'rule', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production css (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-css-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(76, $input, $state)"/>      <!-- END | S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' | '@' |
                                                                                         '@charset' | '@import' | '@media' | '@media print' | '@namespace' |
                                                                                         '@page' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-css-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 3rd loop of production css (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-css-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(76, $input, $state)"/>      <!-- END | S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' | '@' |
                                                                                         '@charset' | '@import' | '@media' | '@media print' | '@namespace' |
                                                                                         '@page' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-css-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 2nd loop of production css (zero or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-css-2">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:choose>
        <xsl:when test="$state[$p:l1] = 1">                                         <!-- END -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 40                                      (: '@charset' :)
                           or $state[$p:l1] = 44">                                  <!-- '@namespace' -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-simple_atrule($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 41">                                  <!-- '@import' -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-import($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 42">                                  <!-- '@media' -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-mediaquery($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 43">                                  <!-- '@media print' -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-printcssquery($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 45">                                  <!-- '@page' -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-pagequery($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 35">                                  <!-- '/*' -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-COMMENT($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-rule($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-css-3($input, $state)"/>
          <xsl:sequence select="p:parse-css-2($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Parse css.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-css" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:parse-css-1($input, $state)"/>
    <xsl:variable name="state" select="p:parse-css-2($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'css', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Create a textual error message from a parsing error.
   !
   ! @param $input the input string.
   ! @param $error the parsing error descriptor.
   ! @return the error message.
  -->
  <xsl:function name="p:error-message" as="xs:string">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="error" as="element(error)"/>

    <xsl:variable name="begin" select="xs:integer($error/@b)"/>
    <xsl:variable name="context" select="string-to-codepoints(substring($input, 1, $begin - 1))"/>
    <xsl:variable name="linefeeds" select="index-of($context, 10)"/>
    <xsl:variable name="line" select="count($linefeeds) + 1"/>
    <xsl:variable name="column" select="($begin - $linefeeds[last()], $begin)[1]"/>
    <xsl:variable name="expected" select="if ($error/@x or $error/@ambiguous-input) then () else p:expected-token-set($error/@s)"/>
    <xsl:sequence select="
      string-join
      (
        (
          if ($error/@o) then
            ('syntax error, found ', $p:TOKEN[$error/@o + 1])
          else
            'lexical analysis failed',
          '&#10;',
          'while expecting ',
          if ($error/@x) then
            $p:TOKEN[$error/@x + 1]
          else
          (
            '['[exists($expected[2])],
            string-join($expected, ', '),
            ']'[exists($expected[2])]
          ),
          '&#10;',
          if ($error/@o or $error/@e = $begin) then
            ()
          else
            ('after successfully scanning ', string($error/@e - $begin), ' characters beginning '),
          'at line ', string($line), ', column ', string($column), ':&#10;',
          '...', substring($input, $begin, 64), '...'
        ),
        ''
      )
    "/>
  </xsl:function>

  <!--~
   ! Consume one token, i.e. compare lookahead token 1 with expected
   ! token and in case of a match, shift lookahead tokens down such that
   ! l1 becomes the current token, and higher lookahead tokens move down.
   ! When lookahead token 1 does not match the expected token, raise an
   ! error by saving the expected token code in the error field of the
   ! lexer state.
   !
   ! @param $code the expected token.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:consume" as="item()+">
    <xsl:param name="code" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:when test="$state[$p:l1] eq $code">
        <xsl:variable name="begin" select="$state[$p:e0]"/>
        <xsl:variable name="end" select="$state[$p:b1]"/>
        <xsl:variable name="whitespace">
          <xsl:if test="$begin ne $end">
            <xsl:value-of select="substring($input, $begin, $end - $begin)"/>
          </xsl:if>
        </xsl:variable>
        <xsl:variable name="token" select="$p:TOKEN[1 + $state[$p:l1]]"/>
        <xsl:variable name="name" select="if (starts-with($token, &quot;'&quot;)) then 'TOKEN' else $token"/>
        <xsl:variable name="begin" select="$state[$p:b1]"/>
        <xsl:variable name="end" select="$state[$p:e1]"/>
        <xsl:variable name="node">
          <xsl:element name="{$name}">
            <xsl:sequence select="substring($input, $begin, $end - $begin)"/>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="
          subsequence($state, $p:l1, 9),
          0, 0, 0,
          subsequence($state, 13),
          $whitespace/node(),
          $node/node()
        "/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="error">
          <xsl:element name="error">
            <xsl:choose>
              <xsl:when test="$state[$p:e1] &lt; $state[$p:memo]/@e">
                <xsl:sequence select="$state[$p:memo]/@*"/>
              </xsl:when>
              <xsl:otherwise>
              <xsl:attribute name="b" select="$state[$p:b1]"/>
              <xsl:attribute name="e" select="$state[$p:e1]"/>
              <xsl:choose>
                <xsl:when test="$state[$p:l1] lt 0">
                  <xsl:attribute name="s" select="- $state[$p:l1]"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:attribute name="o" select="$state[$p:l1]"/>
                  <xsl:attribute name="x" select="$code"/>
                </xsl:otherwise>
              </xsl:choose>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="
          subsequence($state, 1, $p:error - 1),
          $error/node(),
          subsequence($state, $p:error + 1)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Consume one token, i.e. compare lookahead token 1 with expected
   ! token and in case of a match, shift lookahead tokens down such that
   ! l1 becomes the current token, and higher lookahead tokens move down.
   ! When lookahead token 1 does not match the expected token, raise an
   ! error by saving the expected token code in the error field of the
   ! lexer state. In contrast to p:consume, do not create any output.
   !
   ! @param $code the expected token.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:consumeT" as="item()+">
    <xsl:param name="code" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:when test="$state[$p:l1] eq $code">
        <xsl:sequence select="
          subsequence($state, $p:l1, 9),
          0, 0, 0,
          subsequence($state, 13)
        "/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="error">
          <xsl:element name="error">
            <xsl:choose>
              <xsl:when test="$state[$p:e1] &lt; $state[$p:memo]/@e">
                <xsl:sequence select="$state[$p:memo]/@*"/>
              </xsl:when>
              <xsl:otherwise>
              <xsl:attribute name="b" select="$state[$p:b1]"/>
              <xsl:attribute name="e" select="$state[$p:e1]"/>
              <xsl:choose>
                <xsl:when test="$state[$p:l1] lt 0">
                  <xsl:attribute name="s" select="- $state[$p:l1]"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:attribute name="o" select="$state[$p:l1]"/>
                  <xsl:attribute name="x" select="$code"/>
                </xsl:otherwise>
              </xsl:choose>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="
          subsequence($state, 1, $p:error - 1),
          $error/node(),
          subsequence($state, $p:error + 1)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Lookahead one token on level 1.
   !
   ! @param $set the code of the DFA entry state for the set of valid tokens.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result stack.
   ! @return the updated state.
  -->
  <xsl:function name="p:lookahead1" as="item()+">
    <xsl:param name="set" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:l1] ne 0">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="match" select="
          p:match($input, $state[$p:e0], $set),
          0, 0, 0
        "/>
        <xsl:sequence select="
          $match[1],
          subsequence($state, $p:b0, 2),
          $match,
          subsequence($state, 10)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Lookahead one token on level 2.
   !
   ! @param $set the code of the DFA entry state for the set of valid tokens.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result stack.
   ! @return the updated state.
  -->
  <xsl:function name="p:lookahead2" as="item()+">
    <xsl:param name="set" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="match" select="
      if ($state[$p:l2] ne 0) then
        subsequence($state, $p:l2, 6)
      else
      (
        p:match($input, $state[$p:e1], $set),
        0, 0, 0
      )
    "/>
    <xsl:sequence select="
      $match[1] * 128 + $state[$p:l1],
      subsequence($state, $p:b0, 5),
      $match,
      subsequence($state, 13)
    "/>
  </xsl:function>

  <!--~
   ! Lookahead one token on level 3.
   !
   ! @param $set the code of the DFA entry state for the set of valid tokens.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result stack.
   ! @return the updated state.
  -->
  <xsl:function name="p:lookahead3" as="item()+">
    <xsl:param name="set" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="match" select="
      if ($state[$p:l3] ne 0) then
        subsequence($state, $p:l3, 3)
      else
        p:match($input, $state[$p:e2], $set)
    "/>
    <xsl:sequence select="
      $match[1] * 16384 + $state[$p:lk],
      subsequence($state, $p:b0, 8),
      $match,
      subsequence($state, 13)
    "/>
  </xsl:function>

  <!--~
   ! Reduce the result stack, creating a nonterminal element. Pop
   ! $count elements off the stack, wrap them in a new element
   ! named $name, and push the new element.
   !
   ! @param $state lexer state, error indicator, and result.
   ! @param $name the name of the result node.
   ! @param $count the number of child nodes.
   ! @param $begin the input index where the nonterminal begins.
   ! @param $end the input index where the nonterminal ends.
   ! @return the updated state.
  -->
  <xsl:function name="p:reduce" as="item()+">
    <xsl:param name="state" as="item()+"/>
    <xsl:param name="name" as="xs:string"/>
    <xsl:param name="count" as="xs:integer"/>
    <xsl:param name="begin" as="xs:integer"/>
    <xsl:param name="end" as="xs:integer"/>

    <xsl:variable name="node">
      <xsl:element name="{$name}">
        <xsl:sequence select="subsequence($state, $count + 1)"/>
      </xsl:element>
    </xsl:variable>
    <xsl:sequence select="subsequence($state, 1, $count), $node/node()"/>
  </xsl:function>

  <!--~
   ! Strip result from lexer state, in order to avoid carrying it while
   ! backtracking.
   !
   ! @param $state the lexer state after an alternative failed.
   ! @return the updated state.
  -->
  <xsl:function name="p:strip-result" as="item()+">
    <xsl:param name="state" as="item()+"/>

    <xsl:sequence select="subsequence($state, 1, $p:memo)"/>
  </xsl:function>

  <!--~
   ! Memoize the backtracking result that was computed at decision point
   ! $dpi for input position $e0. Reconstruct state from the parameters.
   !
   ! @param $state the lexer state to be restored.
   ! @param $update the lexer state containing updates.
   ! @param $dpi the decision point id.
   ! @param $e0 the input position.
   ! @param $v the id of the successful alternative.
   ! @param $lk the new lookahead code.
   ! @return the reconstructed state.
  -->
  <xsl:function name="p:memoize" as="item()+">
    <xsl:param name="state" as="item()+"/>
    <xsl:param name="update" as="item()+"/>
    <xsl:param name="dpi" as="xs:integer"/>
    <xsl:param name="e0" as="xs:integer"/>
    <xsl:param name="v" as="xs:integer"/>
    <xsl:param name="lk" as="xs:integer"/>

    <xsl:variable name="memo" select="$update[$p:memo]"/>
    <xsl:variable name="errors" select="($memo, $update[$p:error])[.]"/>
    <xsl:variable name="memo">
      <xsl:element name="memo">
        <xsl:sequence select="$errors[@e = max($errors/xs:integer(@e))][last()]/@*, $memo/value"/>
        <xsl:element name="value">
          <xsl:attribute name="key" select="$e0 * 32 + $dpi"/>
          <xsl:sequence select="$v"/>
        </xsl:element>
      </xsl:element>
    </xsl:variable>
    <xsl:sequence select="
      $lk,
      subsequence($state, $p:b0, $p:memo - $p:b0),
      $memo/node(),
      subsequence($state, $p:memo + 1)
    "/>
  </xsl:function>

  <!--~
   ! Retrieve memoized backtracking result for decision point $dpi
   ! and input position $state[$p:e0] into $state[$p:lk].
   !
   ! @param $state lexer state, error indicator, and result.
   ! @param $dpi the decision point id.
   ! @return the updated state.
  -->
  <xsl:function name="p:memoized" as="item()+">
    <xsl:param name="state" as="item()+"/>
    <xsl:param name="dpi" as="xs:integer"/>

    <xsl:variable name="value" select="data($state[$p:memo]/value[@key = $state[$p:e0] * 32 + $dpi])"/>
    <xsl:sequence select="
      if ($value) then $value else 0,
      subsequence($state, $p:lk + 1)
    "/>
  </xsl:function>

  <!--~
   ! Parse start symbol css from given string.
   !
   ! @param $s the string to be parsed.
   ! @return the result as generated by parser actions.
  -->
  <xsl:function name="p:parse-css" as="item()*">
    <xsl:param name="s" as="xs:string"/>

    <xsl:variable name="memo">
      <xsl:element name="memo"/>
    </xsl:variable>
    <xsl:variable name="state" select="0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, false(), $memo/node()"/>
    <xsl:variable name="state" select="p:parse-css($s, $state)"/>
    <xsl:variable name="error" select="$state[$p:error]"/>
    <xsl:choose>
      <xsl:when test="$error">
        <xsl:variable name="ERROR">
          <xsl:element name="ERROR">
            <xsl:sequence select="$error/@*, p:error-message($s, $error)"/>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="$ERROR/node()"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:sequence select="subsequence($state, $p:result)"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! The input filename, or string, if surrounded by curly braces.
  -->
  <xsl:param name="input" as="xs:string?" select="()"/>

  <!--~
   ! The (simple) main program.
  -->
  <xsl:template name="main" match="/">
    <xsl:param name="input" as="xs:string?" select="$input"/>

    <xsl:choose>
      <xsl:when test="empty($input)">
        <xsl:sequence select="error(xs:QName('main'), '&#xA;    Usage: java net.sf.saxon.Transform -xsl:css3.xslt -it:main input=INPUT&#xA;&#xA;      parse INPUT, which is either a filename or literal text enclosed in curly braces')"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="result" select="
          if (matches($input, '^\{.*\}$')) then
            p:parse-css(substring($input, 2, string-length($input) - 2))
          else
            p:parse-css(unparsed-text($input, 'utf-8'))
        "/>
        <xsl:choose>
          <xsl:when test="empty($result/self::ERROR)">
            <xsl:sequence select="$result"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="error(xs:QName('p:parse-css'), concat('&#10;    ', replace($result, '&#10;', '&#10;    ')))"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

</xsl:stylesheet>